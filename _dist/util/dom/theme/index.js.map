{"version":3,"file":"index.js","sources":["../../../../src/util/dom/theme/ThemeObserver.js"],"sourcesContent":["import { CrossWindow }  from '#runtime/util/browser';\n\nimport { writable }     from '#svelte/store';\n\n/**\n * Provides reactive observation of any platform theme.\n *\n * @privateRemarks\n * This is an API stub class that is a no-op implementation. TODO: More documentation on the stubbing process.\n */\nclass ThemeObserver\n{\n   /**\n    * All readable theme stores.\n    *\n    * @type {Readonly<({\n    *    theme: Readonly<import('svelte/store').Readable<string>>\n    * })>}\n    */\n   static #stores;\n\n   /**\n    * Internal setter for theme stores.\n    *\n    * @type {{ theme: Function }}\n    */\n   static #storeSet;\n\n   /**\n    * Current theme.\n    *\n    * @type {string}\n    */\n   static #theme = '';\n\n   /**\n    * @hideconstructor\n    */\n   constructor()\n   {\n      throw new Error('ThemeObserver constructor: This is a static class and should not be constructed.');\n   }\n\n   /**\n    * @returns {Readonly<{ theme: Readonly<import('svelte/store').Readable<string>> }>} Current core theme stores.\n    */\n   static get stores() { return this.#stores; }\n\n   /**\n    * @returns {string} Current theme CSS class.\n    */\n   static get theme()\n   {\n      return this.#theme;\n   }\n\n   /**\n    * Verify that the given `theme` name or complete CSS class is the current theme.\n    *\n    * @param {string} theme - A theme name or complete CSS class name to verify.\n    *\n    * @returns {boolean} If the requested theme match the current theme.\n    */\n   static isTheme(theme)\n   {\n      return false;\n   }\n\n   /**\n    * Detect if theming classes are present in the given iterable list.\n    *\n    * @param {Iterable<string>}  classes - CSS class list to verify if theming classes are included.\n    *\n    * @param {object} [options] - Optional parameters.\n    *\n    * @param {boolean} [options.strict=false] - When true, all theming classes required if multiple are verified.\n    *\n    * @returns {boolean} True if theming classes present.\n    */\n   static hasThemedClasses(classes, { strict = false } = {})\n   {\n      return false;\n   }\n\n   /**\n    * Initialize `document.body` theme observation.\n    *\n    * @internal\n    */\n   static initialize()\n   {\n      if (this.#stores !== void 0) { return; }\n\n      const themeStore = writable(this.#theme);\n\n      this.#stores = Object.freeze({\n         theme: Object.freeze({ subscribe: themeStore.subscribe }),\n      });\n\n      this.#storeSet = {\n         theme: themeStore.set,\n      };\n   }\n\n   /**\n    * Determine the nearest theme CSS classes from the given element.\n    *\n    * @param {object} options - Required options.\n    *\n    * @param {Element} options.element - A DOM element.\n    *\n    * @param {Set<string>} [options.output] - An optional source Set of existing CSS classes.\n    *\n    * @param {boolean} [options.override=true] - When true, override any existing theme classes\n    *\n    * @param {boolean} [options.strict=false] - When true, ensure all required theming classes in output.\n    *\n    * @returns {Iterable<string>} Any theming CSS classes found from the given element.\n    */\n   static nearestThemedClasses({ element, output = new Set(), override = true, strict = false })\n   {\n      if (!CrossWindow.isSet(output)) { throw new TypeError(`'output' is not a Set.`); }\n\n      if (!CrossWindow.isElement(element)) { return output; }\n\n      return output;\n   }\n}\n\nThemeObserver.initialize();\n\nexport { ThemeObserver };\n"],"names":[],"mappings":";;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,OAAO;;AAEjB;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,SAAS;;AAEnB;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,MAAM,GAAG,EAAE;;AAErB;AACA;AACA;AACA,GAAG,WAAW;AACd,GAAG;AACH,MAAM,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC;AACzG;;AAEA;AACA;AACA;AACA,GAAG,WAAW,MAAM,GAAG,EAAE,OAAO,IAAI,CAAC,OAAO,CAAC;;AAE7C;AACA;AACA;AACA,GAAG,WAAW,KAAK;AACnB,GAAG;AACH,MAAM,OAAO,IAAI,CAAC,MAAM;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,OAAO,CAAC,KAAK;AACvB,GAAG;AACH,MAAM,OAAO,KAAK;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,gBAAgB,CAAC,OAAO,EAAE,EAAE,MAAM,GAAG,KAAK,EAAE,GAAG,EAAE;AAC3D,GAAG;AACH,MAAM,OAAO,KAAK;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,UAAU;AACpB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,EAAE,EAAE,OAAO;;AAE5C,MAAM,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;;AAE9C,MAAM,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;AACnC,SAAS,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,UAAU,CAAC,SAAS,EAAE,CAAC;AAClE,OAAO,CAAC;;AAER,MAAM,IAAI,CAAC,SAAS,GAAG;AACvB,SAAS,KAAK,EAAE,UAAU,CAAC,GAAG;AAC9B,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,oBAAoB,CAAC,EAAE,OAAO,EAAE,MAAM,GAAG,IAAI,GAAG,EAAE,EAAE,QAAQ,GAAG,IAAI,EAAE,MAAM,GAAG,KAAK,EAAE;AAC/F,GAAG;AACH,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;;AAEtF,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,MAAM,CAAC;;AAE3D,MAAM,OAAO,MAAM;AACnB;AACA;;AAEA,aAAa,CAAC,UAAU,EAAE;;;;"}