{"version":3,"file":"index.js","sources":["../../../../src/util/dom/style/parse/StyleParse.ts","../../../../src/util/dom/style/manager/RuleManager.ts","../../../../src/util/dom/style/manager/StyleManager.ts","../../../../src/util/dom/style/resolve/StyleSheetResolve.ts"],"sourcesContent":["import { CrossWindow } from '#runtime/util/browser';\r\n\r\n/**\r\n * Provides resources for parsing style strings.\r\n */\r\nexport class StyleParse\r\n{\r\n   static #regexPixels = /(\\d+)\\s*px/;\r\n\r\n   /**\r\n    * @private\r\n    */\r\n   private constructor()\r\n   {\r\n      throw new Error('StyleParse constructor: This is a static class and should not be constructed.');\r\n   }\r\n\r\n   /**\r\n    * Parse a CSS declaration block / {@link CSSDeclarationBlock} (IE `color: red; font-size: 14px;`) into an object of\r\n    * property / value pairs.\r\n    *\r\n    * This implementation is optimized for parsing the output of `CSSStyleRule.style.cssText`, which is always\r\n    * well-formed according to the CSSOM spec. It is designed to be:\r\n    * ```\r\n    * - **Fast**: minimal allocations, no regex in the hot loop.\r\n    * - **Accurate**: ignores `;` inside quotes or parentheses.\r\n    * - **Flexible**: supports optional camel case conversion.\r\n    * - **CSS variable safe**: leaves `--*` properties untouched.\r\n    *```\r\n    *\r\n    * @param cssText - A valid CSS declaration block (no selectors).\r\n    *\r\n    * @param [options] - Optional parser settings.\r\n    *\r\n    * @param [options.camelCase=false] - Convert hyphen-case property names to camel case.\r\n    *\r\n    * @returns An object mapping property names to their CSS values.\r\n    */\r\n   static cssText(cssText: string, { camelCase = false }: { camelCase?: boolean } = {}): { [key: string]: string }\r\n   {\r\n      // Reject non-strings or empty input quickly.\r\n      if (typeof cssText !== 'string' || cssText.length === 0) { return {}; }\r\n\r\n      // Quick reject: if there's no `:` there are no declarations.\r\n      if (cssText.indexOf(':') === -1) { return {}; }\r\n\r\n      const out: { [key: string]: string } = {};\r\n\r\n      // Index where the current declaration starts.\r\n      let segStart = 0;\r\n\r\n      // Tracks whether we are inside parentheses (url(), calc(), var(), etc.).\r\n      let parens = 0;\r\n\r\n      // Tracks whether we are inside single or double quotes.\r\n      let inSQ = false;\r\n      let inDQ = false;\r\n\r\n      // Walk through every character in the string.\r\n      for (let i = 0; i < cssText.length; i++)\r\n      {\r\n         const ch = cssText[i];\r\n\r\n         if (ch === '\"' && !inSQ)\r\n         {\r\n            // Toggle double-quote mode if not in single quotes.\r\n            inDQ = !inDQ;\r\n         }\r\n         else if (ch === '\\'' && !inDQ)\r\n         {\r\n            // Toggle single-quote mode if not in double quotes.\r\n            inSQ = !inSQ;\r\n         }\r\n         else if (!inSQ && !inDQ)\r\n         {\r\n            // Only count parentheses when outside of quotes.\r\n            if (ch === '(')\r\n            {\r\n               parens++;\r\n            }\r\n            else if (ch === ')')\r\n            {\r\n               if (parens > 0) { parens--; }\r\n            }\r\n            // Only treat `;` as a declaration terminator if not inside parentheses.\r\n            else if (ch === ';' && parens === 0)\r\n            {\r\n               // Extract the substring for this declaration.\r\n               if (i > segStart)\r\n               {\r\n                  const chunk = cssText.slice(segStart, i).trim();\r\n                  if (chunk) { this.#cssTextFlushDecl(chunk, out, camelCase); }\r\n               }\r\n               // Move start index to the character after the semicolon.\r\n               segStart = i + 1;\r\n            }\r\n         }\r\n      }\r\n\r\n      // Process the last declaration after the loop ends.\r\n      if (segStart < cssText.length)\r\n      {\r\n         const chunk = cssText.slice(segStart).trim();\r\n         if (chunk) { this.#cssTextFlushDecl(chunk, out, camelCase); }\r\n      }\r\n\r\n      return out;\r\n   }\r\n\r\n   /**\r\n    * Parses a pixel string / computed styles. Ex. `100px` returns `100`.\r\n    *\r\n    * @param   value - Value to parse.\r\n    *\r\n    * @returns The integer component of a pixel string.\r\n    */\r\n   static pixels(value: string): number | undefined\r\n   {\r\n      if (typeof value !== 'string') { return void 0; }\r\n\r\n      const isPixels = this.#regexPixels.test(value);\r\n      const number = parseInt(value);\r\n\r\n      return isPixels && Number.isFinite(number) ? number : void 0;\r\n   }\r\n\r\n   /**\r\n    * Returns the pixel value for `1rem` based on the root document element. You may apply an optional multiplier.\r\n    *\r\n    * @param [multiplier=1] - Optional multiplier to apply to `rem` pixel value; default: 1.\r\n    *\r\n    * @param [options] - Optional parameters.\r\n    *\r\n    * @param [options.targetDocument=document] The target DOM {@link Document} if different from the main\r\n    *        browser global `document`.\r\n    *\r\n    * @returns The pixel value for `1rem` with or without a multiplier based on the root document element.\r\n    */\r\n   static remPixels(multiplier: number = 1, { targetDocument = window.document }: { targetDocument?: Document } = {}):\r\n    number | undefined\r\n   {\r\n      return targetDocument?.documentElement ?\r\n       multiplier * parseFloat(window.getComputedStyle(targetDocument.documentElement).fontSize) : void 0;\r\n   }\r\n\r\n   /**\r\n    * Split a CSS selector list into individual selectors, honoring commas that appear only at the top level\r\n    * (IE not inside (), [], or quotes). Additional options provide inclusion / exclusion filtering of selector parts.\r\n    *\r\n    * Examples:\r\n    *   '.a, .b'                                  → ['.a', '.b']\r\n    *   ':is(.a, .b):not([data-x=\",\"]) .c, .d'    → [':is(.a, .b):not([data-x=\",\"]) .c', '.d']\r\n    *\r\n    * @param selectorText - `CSSStyleRule.selectorText` to parse.\r\n    *\r\n    * @param [options] - Optional filtering options.\r\n    *\r\n    * @param [options.excludeSelectorParts] - An array of RegExp instances to filter by exclusion.\r\n    *\r\n    * @param [options.includeSelectorPartSet] - A Set of strings to filter by inclusion.\r\n    *\r\n    * @returns Array of trimmed selector strings w/ optional filtering of parts.\r\n    */\r\n   static selectorText(selectorText: string, { excludeSelectorParts, includeSelectorPartSet }:\r\n    { excludeSelectorParts?: RegExp[], includeSelectorPartSet?: Set<string>} = {}): string[]\r\n   {\r\n      const parts: string[] = [];\r\n      if (typeof selectorText !== 'string' || selectorText.length === 0) { return parts; }\r\n\r\n      const hasExclude = Array.isArray(excludeSelectorParts) && excludeSelectorParts.length > 0;\r\n      const hasInclude = CrossWindow.isSet(includeSelectorPartSet) && includeSelectorPartSet.size > 0;\r\n\r\n      let start = 0;\r\n      let inSQ = false; // '\r\n      let inDQ = false; // \"\r\n      let paren = 0;    // ()\r\n      let bracket = 0;  // []\r\n\r\n      for (let i = 0; i < selectorText.length; i++)\r\n      {\r\n         const ch = selectorText[i];\r\n\r\n         // Toggle quote states; don’t nest the other quote type.\r\n         if (ch === '\"' && !inSQ) { inDQ = !inDQ; continue; }\r\n         if (ch === '\\'' && !inDQ) { inSQ = !inSQ; continue; }\r\n         if (inSQ || inDQ) { continue; }\r\n\r\n         // Only track bracket / paren nesting outside quotes.\r\n         if (ch === '(') { paren++; continue; }\r\n         if (ch === ')') { if (paren > 0) { paren--; } continue; }\r\n         if (ch === '[') { bracket++; continue; }\r\n         if (ch === ']') { if (bracket > 0) { bracket--; } continue; }\r\n\r\n         // Top-level comma separates selectors.\r\n         if (ch === ',' && paren === 0 && bracket === 0)\r\n         {\r\n            const piece = selectorText.slice(start, i).trim();\r\n            if (piece && (!hasInclude || includeSelectorPartSet.has(piece)) &&\r\n             (!hasExclude || !excludeSelectorParts.some((rx) => rx.test(piece))))\r\n            {\r\n               parts.push(piece);\r\n            }\r\n            start = i + 1;\r\n         }\r\n      }\r\n\r\n      // Final segment.\r\n      const last = selectorText.slice(start).trim();\r\n      if (last && (!hasInclude || includeSelectorPartSet.has(last)) &&\r\n       (!hasExclude || !excludeSelectorParts.some((rx) => rx.test(last))))\r\n      {\r\n         parts.push(last);\r\n      }\r\n\r\n      return parts;\r\n   }\r\n\r\n   // Internal Implementation ----------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * Parse a single CSS declaration string into a property / value pair and store it in the output object.\r\n    *\r\n    * Note: Used by {@link StyleParse.cssText}.\r\n    *\r\n    * This method:\r\n    * ```\r\n    * - Splits on the first `:` into property and value parts\r\n    * - Trims whitespace from both\r\n    * - Optionally converts hyphen-case to camelCase\r\n    * - Ignores empty or malformed declarations\r\n    * ```\r\n    *\r\n    * @param chunk - The raw CSS declaration string (IE `\"color: red\"`).\r\n    *\r\n    * @param out - The object to store the parsed property / value pair.\r\n    *\r\n    * @param camelCase - Whether to convert hyphen-case keys to camel case.\r\n    */\r\n   static #cssTextFlushDecl(chunk: string, out: { [key: string]: string }, camelCase: boolean): void\r\n   {\r\n      // Find the first colon — separates property from value.\r\n      const idx = chunk.indexOf(':');\r\n      if (idx < 0) { return; }\r\n\r\n      // Extract and trim the property name.\r\n      let key = chunk.slice(0, idx).trim();\r\n      if (!key) { return; }\r\n\r\n      // Extract and trim the value (keep empty string if explicitly set).\r\n      const value = chunk.slice(idx + 1).trim();\r\n\r\n      // Convert to camelCase if requested and not a CSS variable.\r\n      if (camelCase && !key.startsWith('--'))\r\n      {\r\n         let s = '';\r\n         for (let i = 0; i < key.length; i++)\r\n         {\r\n            const code = key.charCodeAt(i);\r\n            if (code === 45 /* '-' */ && i + 1 < key.length)\r\n            {\r\n               i++;\r\n               s += key[i].toUpperCase();\r\n            }\r\n            else\r\n            {\r\n               s += key[i];\r\n            }\r\n         }\r\n         key = s;\r\n      }\r\n\r\n      // Store in the output object.\r\n      out[key] = value;\r\n   }\r\n}\r\n","import { CrossWindow }        from '#runtime/util/browser';\n\nimport {\n   isIterable,\n   isObject }                 from '#runtime/util/object';\n\nimport { StyleParse }         from '../parse';\n\nimport type { StyleManager }  from './StyleManager';\n\n/**\n * Provides the ability to `get` and `set` bulk or single CSS properties to a specific {@link CSSStyleRule}.\n */\nexport class RuleManager implements StyleManager.RuleManager\n{\n   /**\n    * The specific rule instance in the association HTMLStyleElement.\n    */\n   #cssRule: CSSStyleRule;\n\n   /**\n    * The CSS selector for this rule manager.\n    */\n   readonly #selector: string;\n\n   /**\n    * The name that this rule manager is indexed by in the associated `StyleManager` instance.\n    */\n   readonly #name: string;\n\n   /**\n    * @param   cssRule -\n    *\n    * @param   name -\n    *\n    * @param   selector -\n    */\n   constructor(cssRule: CSSStyleRule, name: string, selector: string)\n   {\n      if (!CrossWindow.isCSSStyleRule(cssRule))\n      {\n         throw new TypeError(`RuleManager error: 'cssRule' is not a CSSStyleRule instance..`);\n      }\n\n      if (typeof name !== 'string') { throw new TypeError(`RuleManager error: 'name' is not a string.`); }\n      if (typeof selector !== 'string') { throw new TypeError(`RuleManager error: 'selector' is not a string.`); }\n\n      this.#cssRule = cssRule;\n      this.#name = name;\n      this.#selector = selector;\n   }\n\n   // Accessors ------------------------------------------------------------------------------------------------------\n\n   /**\n    * @returns Provides an accessor to get the `cssText` for the style rule or undefined if not connected.\n    */\n   get cssText(): string | undefined\n   {\n      return this.isConnected ? this.#cssRule.style.cssText : void 0;\n   }\n\n   /**\n    * Determines if this RuleManager is still connected / available.\n    *\n    * @returns Is RuleManager connected.\n    */\n   get isConnected(): boolean\n   {\n      const sheet = this.#cssRule?.parentStyleSheet;\n      const owner = sheet?.ownerNode;\n\n      return !!(sheet && owner && owner.isConnected);\n   }\n\n   /**\n    * @returns Name of this RuleManager indexed by associated StyleManager.\n    */\n   get name(): string\n   {\n      return this.#name;\n   }\n\n   /**\n    * @returns The associated selector for this CSS rule.\n    */\n   get selector(): string\n   {\n      return this.#selector;\n   }\n\n   /**\n    * @param   cssText - Provides an accessor to set the `cssText` for the style rule.\n    */\n   set cssText(cssText: string | undefined)\n   {\n      if (!this.isConnected) { return; }\n\n      this.#cssRule.style.cssText = typeof cssText === 'string' ? cssText : '';\n   }\n\n   // Iterator -------------------------------------------------------------------------------------------------------\n\n   /**\n    * Allows usage in `for of` loops directly.\n    *\n    * @returns Entries Map iterator.\n    */\n   [Symbol.iterator](): Iterator<[string, string]>\n   {\n      return this.entries();\n   }\n\n   // Methods --------------------------------------------------------------------------------------------------------\n\n   /**\n    * @returns Iterator of CSS property entries in hyphen-case.\n    */\n   entries(): Iterator<[string, string]>\n   {\n      return Object.entries(this.get() ?? {})[Symbol.iterator]();\n   }\n\n   /**\n    * Retrieves an object with the current CSS rule data.\n    *\n    * @param [options] - Optional settings.\n    *\n    * @param [options.camelCase=false] - Whether to convert property names to camel case.\n    *\n    * @returns Current CSS style data or undefined if not connected.\n    */\n   get(options: { camelCase?: boolean } = {}): StyleManager.Data.StyleProps | undefined\n   {\n      return this.isConnected ? StyleParse.cssText(this.#cssRule.style.cssText, options) : void 0;\n   }\n\n   /**\n    * Gets a particular CSS property value.\n    *\n    * @param key - CSS property key; must be in hyphen-case (IE `background-color`).\n    *\n    * @returns Returns CSS property value or undefined if non-existent.\n    */\n   getProperty(key: string): string | undefined\n   {\n      if (!this.isConnected) { return void 0; }\n\n      if (typeof key !== 'string') { throw new TypeError(`RuleManager error: 'key' is not a string.`); }\n\n      const result = this.#cssRule.style.getPropertyValue(key);\n\n      return result !== '' ? result : void 0;\n   }\n\n   /**\n    * Returns whether this CSS rule manager has a given property key.\n    *\n    * @param key - CSS property key; must be in hyphen-case (IE `background-color`).\n    *\n    * @returns Property key exists / is defined.\n    */\n   hasProperty(key: string): boolean\n   {\n      if (!this.isConnected) { return false; }\n\n      if (typeof key !== 'string') { throw new TypeError(`RuleManager error: 'key' is not a string.`); }\n\n      return this.#cssRule.style.getPropertyValue(key) !== '';\n   }\n\n   /**\n    * @returns Iterator of CSS property keys in hyphen-case.\n    */\n   keys(): MapIterator<string>\n   {\n      return Object.keys(this.get() ?? {})[Symbol.iterator]();\n   }\n\n   /**\n    * Set CSS properties in bulk by property / value. Must use hyphen-case.\n    *\n    * @param styles - CSS styles object.\n    *\n    * @param [options] - Options.\n    *\n    * @param [override=true] - When true overrides any existing values; default: `true`.\n    */\n   setProperties(styles: StyleManager.Data.StyleProps, { override = true }: { override?: boolean } = {})\n   {\n      if (!this.isConnected) { return; }\n\n      if (!isObject(styles)) { throw new TypeError(`RuleManager error: 'styles' is not an object.`); }\n      if (typeof override !== 'boolean') { throw new TypeError(`RuleManager error: 'override' is not a boolean.`); }\n\n      if (override)\n      {\n         for (const [key, value] of Object.entries(styles)) { this.#cssRule.style.setProperty(key, value); }\n      }\n      else\n      {\n         // Only set property keys for entries that don't have an existing rule set.\n         for (const [key, value] of Object.entries(styles))\n         {\n            if (this.#cssRule.style.getPropertyValue(key) === '') { this.#cssRule.style.setProperty(key, value); }\n         }\n      }\n   }\n\n   /**\n    * Sets a particular property.\n    *\n    * @param key - CSS property key; must be in hyphen-case (IE `background-color`).\n    *\n    * @param value - CSS property value.\n    *\n    * @param [options] - Options.\n    *\n    * @param [options.override=true] - When true overrides any existing value; default: `true`.\n    */\n   setProperty(key: string, value: string, { override = true }: { override?: boolean } = {})\n   {\n      if (!this.isConnected) { return; }\n\n      if (typeof key !== 'string') { throw new TypeError(`RuleManager error: 'key' is not a string.`); }\n      if (typeof value !== 'string') { throw new TypeError(`RuleManager error: 'value' is not a string.`); }\n      if (typeof override !== 'boolean') { throw new TypeError(`RuleManager error: 'override' is not a boolean.`); }\n\n      if (override)\n      {\n         this.#cssRule.style.setProperty(key, value);\n      }\n      else\n      {\n         if (this.#cssRule.style.getPropertyValue(key) === '') { this.#cssRule.style.setProperty(key, value); }\n      }\n   }\n\n   /**\n    * Removes the property keys specified. If `keys` is an iterable list then all property keys in the list are\n    * removed. The keys must be in hyphen-case (IE `background-color`).\n    *\n    * @param keys - The property keys to remove.\n    */\n   removeProperties(keys: Iterable<string>)\n   {\n      if (!this.isConnected) { return; }\n\n      if (!isIterable(keys)) { throw new TypeError(`RuleManager error: 'keys' is not an iterable list.`); }\n\n      for (const key of keys)\n      {\n         if (typeof key === 'string') { this.#cssRule.style.removeProperty(key); }\n      }\n   }\n\n   /**\n    * Removes a particular CSS property.\n    *\n    * @param key - CSS property key; must be in hyphen-case (IE `background-color`).\n    *\n    * @returns CSS value when removed or undefined if non-existent.\n    */\n   removeProperty(key: string): string | undefined\n   {\n      if (!this.isConnected) { return void 0; }\n\n      if (typeof key !== 'string') { throw new TypeError(`RuleManager error: 'key' is not a string.`); }\n\n      const result = this.#cssRule.style.removeProperty(key);\n\n      return result !== '' ? result : void 0;\n   }\n}\n","import { CrossWindow }     from '#runtime/util/browser';\nimport { isObject }        from '#runtime/util/object';\n\nimport {\n   compare,\n   satisfies,\n   validateStrict }        from '#runtime/util/semver';\n\nimport { RuleManager }  from './RuleManager';\n\n/**\n * Provides a managed dynamic style sheet / element useful in configuring global CSS variables. When creating an\n * instance of StyleManager, you must provide a CSS ID for the style element.\n *\n * Instances of StyleManager must be versioned by supplying a semver version string via the 'version' option. This\n * version is assigned to the associated style element. When a StyleManager instance is created and there is an\n * existing instance with a version that is lower than the current new instance, all CSS rules are removed, letting\n * the higher version take precedence. This isn't a perfect system and requires thoughtful construction of CSS\n * variables exposed, but allows multiple independently compiled TRL packages to load the latest CSS variables..\n */\nclass StyleManager implements Iterable<[string, StyleManager.RuleManager]>\n{\n   /**\n    * Provides a token allowing internal instance construction.\n    */\n   static #CTOR_TOKEN: symbol = Symbol('StyleManager.CTOR_TOKEN');\n\n   /**\n    * Stores configured RuleManager instance by name.\n    */\n   #cssRuleMap: Map<string, StyleManager.RuleManager>;\n\n   /**\n    * CSS ID associated with style element.\n    */\n   readonly #id: string;\n\n   /**\n    * Any associated CSS layer name.\n    */\n   readonly #layerName: string | undefined;\n\n   /**\n    * The target style element.\n    */\n   #styleElement: HTMLStyleElement;\n\n   /**\n    * The version of this style manager.\n    */\n   readonly #version: string;\n\n   /**\n    * @private\n    */\n   private constructor({ cssRuleMap, id, styleElement, version, layerName, token }:\n    { cssRuleMap: Map<string, StyleManager.RuleManager>; id: string; styleElement: HTMLStyleElement;\n     version: string; layerName?: string; token: symbol })\n   {\n      if (token !== StyleManager.#CTOR_TOKEN)\n      {\n         throw new Error('StyleManager constructor: Please use the static `create` or `connect` methods.');\n      }\n\n      this.#cssRuleMap = cssRuleMap;\n      this.#id = id;\n      this.#layerName = layerName;\n      this.#styleElement = styleElement;\n      this.#version = version;\n   }\n\n   // Static Methods -------------------------------------------------------------------------------------------------\n\n   /**\n    * Connect to an existing dynamic styles managed element by CSS ID with semver check on version range compatibility.\n    *\n    * @param   options - Options.\n    */\n   static connect({ id, range, document = window.document, warn = false }: StyleManager.Options.Connect)\n   {\n      if (typeof id !== 'string') { throw new TypeError(`'id' is not a string.`); }\n      if (typeof range !== 'string') { throw new TypeError(`'range' is not a string.`); }\n      if (!CrossWindow.isDocument(document)) { throw new TypeError(`'document' is not an instance of HTMLDocument.`); }\n\n      return this.#initializeConnect(document, id, range, warn);\n   }\n\n   /**\n    * @param   options - Options.\n    *\n    * @returns Created style manager instance or undefined if already exists with a higher version.\n    */\n   static create(options: StyleManager.Options.Create): StyleManager | undefined\n   {\n      return this.#createImpl(options);\n   }\n\n   /**\n    * Query and check for an existing dynamic style manager element / instance given a CSS ID.\n    *\n    * @param   options - Options.\n    *\n    * @returns Undefined if no style manager is configured for the given CSS ID otherwise an object containing the\n    *          current version and HTMLStyleElement associated with the CSS ID.\n    */\n   static exists({ id, document = window.document }: StyleManager.Options.Exists): StyleManager.Data.Exists |\n    undefined\n   {\n      if (typeof id !== 'string') { throw new TypeError(`'id' is not a string.`); }\n      if (!CrossWindow.isDocument(document)) { throw new TypeError(`'document' is not an instance of HTMLDocument.`); }\n\n      const existingStyleEl = document.querySelector<HTMLStyleElement>(`head style#${id}`);\n\n      if (existingStyleEl)\n      {\n         const existingVersion = existingStyleEl.getAttribute('data-version') ?? '';\n\n         if (validateStrict(existingVersion))\n         {\n            return {\n               id,\n               version: existingVersion,\n               element: existingStyleEl\n            }\n         }\n      }\n\n      return void 0;\n   }\n\n   // Accessors ------------------------------------------------------------------------------------------------------\n\n   /**\n    * Determines if this StyleManager style element is still connected / available.\n    *\n    * @returns Is StyleManager connected.\n    */\n   get isConnected(): boolean\n   {\n      return !!this.#styleElement?.isConnected;\n   }\n\n   /**\n    * @returns Provides an accessor to get the `textContent` for the style sheet.\n    */\n   get textContent(): string | null\n   {\n      return this.#styleElement?.textContent;\n   }\n\n   /**\n    * @returns Returns the version of this instance.\n    */\n   get version(): string\n   {\n      return this.#version;\n   }\n\n   // Iterator -------------------------------------------------------------------------------------------------------\n\n   /**\n    * Allows usage in `for of` loops directly.\n    *\n    * @returns Entries Map iterator.\n    */\n   [Symbol.iterator](): MapIterator<[string, StyleManager.RuleManager]>\n   {\n      return this.entries();\n   }\n\n   // Methods --------------------------------------------------------------------------------------------------------\n\n   /**\n    * Provides a copy constructor to duplicate an existing StyleManager instance into a new document.\n    *\n    * @param   options - Required clone options.\n    *\n    * @returns New style manager instance or undefined if not connected.\n    */\n   clone({ document, force = false, warn = false }: StyleManager.Options.Clone): StyleManager | undefined\n   {\n      if (!this.isConnected)\n      {\n         StyleManager.#log(warn, 'clone', `This style manager instance is not connected for id: ${this.#id}`);\n         return void 0;\n      }\n\n      if (!CrossWindow.isDocument(document)) { throw new TypeError(`'document' is not an instance of HTMLDocument.`); }\n\n      const rules: StyleManager.Data.RulesConfig = {};\n\n      for (const key of this.#cssRuleMap.keys())\n      {\n         const selector = this.#cssRuleMap.get(key)?.selector;\n         if (selector) { rules[key] = selector }\n      }\n\n      const newStyleManager = StyleManager.#createImpl({\n         id: this.#id,\n         version: this.#version,\n         layerName: this.#layerName,\n         rules,\n         document,\n         force,\n         warn\n      });\n\n      if (newStyleManager)\n      {\n         for (const key of this.#cssRuleMap.keys())\n         {\n            if (newStyleManager.#cssRuleMap.has(key))\n            {\n               const value = this.#cssRuleMap.get(key)?.cssText;\n               const targetRuleManager = newStyleManager.#cssRuleMap.get(key);\n\n               if (value && targetRuleManager) { targetRuleManager.cssText = value; }\n            }\n         }\n\n         return newStyleManager;\n      }\n\n      return void 0;\n   }\n\n   /**\n    * @returns RuleManager entries iterator.\n    */\n   entries(): MapIterator<[string, StyleManager.RuleManager]>\n   {\n      return this.#cssRuleMap.entries();\n   }\n\n   /**\n    * Retrieves an associated {@link RuleManager} by name.\n    *\n    * @param   ruleName - Rule name.\n    *\n    * @returns Associated rule manager for given name or undefined if the rule name is not defined or manager is\n    *          unconnected.\n    */\n   get(ruleName: string): StyleManager.RuleManager | undefined\n   {\n      if (!this.isConnected) { return; }\n\n      return this.#cssRuleMap.get(ruleName);\n   }\n\n   /**\n    * Returns whether a {@link StyleManager.CSSRuleManger} exists for the given name.\n    *\n    * @param ruleName - Rule name.\n    *\n    * @returns Is there a CSS rule manager with the given name.\n    */\n   has(ruleName: string): boolean\n   {\n      return this.#cssRuleMap.has(ruleName);\n   }\n\n   /**\n    * @returns {MapIterator<string>} RuleManager keys iterator.\n    */\n   keys(): MapIterator<string>\n   {\n      return this.#cssRuleMap.keys();\n   }\n\n   /**\n    * @returns Iterator of all RuleManager instances.\n    */\n   values(): MapIterator<StyleManager.RuleManager>\n   {\n      return this.#cssRuleMap.values();\n   }\n\n   // Internal Implementation ----------------------------------------------------------------------------------------\n\n   /**\n    * Internal `create` implementation with additional `force` option to override any version check.\n    *\n    * @param   options - Options.\n    *\n    * @returns Created style manager instance or undefined if already exists with a higher version.\n    */\n   static #createImpl({ id, rules, version, layerName, document = window.document, force = false, warn = false }:\n    StyleManager.Options.Create & { force?: boolean }): StyleManager | undefined\n   {\n      if (typeof id !== 'string') { throw new TypeError(`'id' is not a string.`); }\n      if (!isObject(rules)) { throw new TypeError(`'rules' is not an object.`); }\n      if (!CrossWindow.isDocument(document)) { throw new TypeError(`'document' is not an instance of HTMLDocument.`); }\n      if (!validateStrict(version)) { throw new TypeError(`'version' is not a valid semver string.`); }\n      if (typeof force !== 'boolean') { throw new TypeError(`'force' is not a boolean.`); }\n      if (typeof warn !== 'boolean') { throw new TypeError(`'warn' is not a boolean.`); }\n\n      if (layerName !== void 0 && typeof layerName !== 'string')\n      {\n         throw new TypeError(`'layerName' is not a string.`);\n      }\n\n      const current = this.exists({ id, document });\n\n      if (isObject(current))\n      {\n         // Remove all existing CSS rules / text if the version is greater than the existing version or `force` is true.\n         if (force || compare(version, current.version, '>'))\n         {\n            current.element?.remove?.();\n            return this.#initializeCreate(document, id, rules, version, layerName);\n         }\n         else\n         {\n            this.#log(warn, 'create',\n             `Could not create instance as one already exists with a higher version for ID: ${id}.`);\n\n            // A style manager already exists that is a greater version than requested.\n            return void 0;\n         }\n      }\n      else\n      {\n         return this.#initializeCreate(document, id, rules, version, layerName);\n      }\n   }\n\n   /**\n    * @param document - Target Document.\n    *\n    * @param id - Associated CSS ID\n    *\n    * @param range - SemVer version or version range.\n    *\n    * @param warn - When true, log warnings.\n    *\n    * @returns Style manager connected to existing element / style rules or undefined if no connection possible.\n    */\n   static #initializeConnect(document: Document, id: string, range: string, warn: boolean = false):\n    StyleManager | undefined\n   {\n      const styleElement = document.querySelector<StyleManager.TJSStyleElement>(`head style#${id}`);\n\n      if (!styleElement || styleElement?.sheet === null)\n      {\n         this.#log(warn, 'connect', `Could not find existing style element for id: ${id}`);\n         return void 0;\n      }\n\n      const existingRules = styleElement._tjsRules;\n      const existingVersion = styleElement._tjsVersion;\n      const existingLayerName = styleElement._tjsLayerName;\n\n      let targetSheet: CSSStyleSheet | CSSLayerBlockRule = styleElement.sheet;\n\n      if (!isObject(existingRules))\n      {\n         this.#log(warn, 'connect', `Could not find rules configuration on existing style element for id: ${id}`);\n         return void 0;\n      }\n\n      if (!validateStrict(existingVersion))\n      {\n         this.#log(warn, 'connect', `Could not find version on existing style element for id: ${id}`);\n         return void 0;\n      }\n\n      if (existingLayerName !== void 0 && typeof existingLayerName !== 'string')\n      {\n         this.#log(warn, 'connect', `Could not find layer name on existing style element for id: ${id}`);\n         return void 0;\n      }\n\n      if (!satisfies(existingVersion, range))\n      {\n         this.#log(warn, 'connect', `Requested range (${range}) does not satisfy existing version: ${existingVersion}`);\n         return void 0;\n      }\n\n      // TS type guard.\n      if (!CrossWindow.isCSSStyleSheet(targetSheet)) { return void 0; }\n\n      const cssRuleMap = new Map();\n\n      // Reverse the rule object to find the actual CSS rules below.\n      const reverseRuleMap = new Map(Object.entries(existingRules).map(([key, value]) => [value, key]));\n\n      try\n      {\n         if (typeof existingLayerName)\n         {\n            let foundLayer = false;\n\n            for (const rule of Array.from(targetSheet.cssRules))\n            {\n               if (CrossWindow.isCSSLayerBlockRule(rule) && rule.name === existingLayerName)\n               {\n                  targetSheet = rule;\n                  foundLayer = true;\n               }\n            }\n\n            if (!foundLayer)\n            {\n               this.#log(warn, 'connect', `Could not find CSSLayerBlockRule for existing layer name: ${\n                existingLayerName}`);\n\n               return void 0;\n            }\n         }\n\n         for (const cssRule of Array.from(targetSheet.cssRules))\n         {\n            if (!CrossWindow.isCSSStyleRule(cssRule)) { continue; }\n\n            const selector = cssRule?.selectorText;\n\n            if (reverseRuleMap.has(selector))\n            {\n               const ruleName = reverseRuleMap.get(selector) as string;\n\n               cssRuleMap.set(ruleName, new RuleManager(cssRule, ruleName, selector));\n\n               reverseRuleMap.delete(selector);\n            }\n         }\n\n         // Check if all registered rules have been found.\n         if (reverseRuleMap.size > 0)\n         {\n            this.#log(warn, 'connect', `Could not find CSSStyleRules for these rule configurations: ${\n             JSON.stringify([...reverseRuleMap])}`);\n\n            return void 0;\n         }\n\n         return new StyleManager({\n            cssRuleMap,\n            id,\n            version: existingVersion,\n            layerName: existingLayerName,\n            styleElement,\n            token: StyleManager.#CTOR_TOKEN\n         });\n      }\n      catch (error)\n      {\n         console.error(`TyphonJS Runtime [StyleManager error]: Please update your browser to the latest version.`,\n          error);\n      }\n\n      return void 0;\n   }\n\n   /**\n    * @param document - Target Document.\n    *\n    * @param id - Associated CSS ID\n    *\n    * @param rules -\n    *\n    * @param version -\n    *\n    * @param layerName -\n    *\n    * @returns New StyleManager instance.\n    */\n   static #initializeCreate(document: Document, id: string, rules: StyleManager.Data.RulesConfig, version: string,\n                            layerName: string | undefined): StyleManager | undefined\n   {\n      const styleElement = (document.createElement('style') as StyleManager.TJSStyleElement);\n      styleElement.id = id;\n      styleElement.setAttribute('data-version', String(version));\n\n      styleElement._tjsRules = rules;\n      styleElement._tjsVersion = version;\n      styleElement._tjsLayerName = layerName;\n\n      document.head.append(styleElement);\n\n      let targetSheet: CSSStyleSheet | CSSLayerBlockRule | null;\n\n      // Type guard for TS.\n      if (styleElement.sheet === null) { return void 0; }\n\n      const cssRuleMap = new Map();\n\n      try\n      {\n         if (layerName)\n         {\n            const index = styleElement.sheet.insertRule(`@layer ${layerName} {}`);\n            targetSheet = styleElement.sheet.cssRules[index] as CSSLayerBlockRule;\n         }\n         else\n         {\n            targetSheet = styleElement.sheet;\n         }\n\n         if (rules)\n         {\n            for (const ruleName in rules)\n            {\n               const selector = rules[ruleName];\n               const index = targetSheet.insertRule(`${selector} {}`);\n\n               const cssRule = targetSheet.cssRules[index] as CSSStyleRule;\n\n               cssRuleMap.set(ruleName, new RuleManager(cssRule, ruleName, selector));\n            }\n         }\n\n         return new StyleManager({\n            cssRuleMap,\n            id,\n            version,\n            layerName,\n            styleElement,\n            token: StyleManager.#CTOR_TOKEN\n         });\n      }\n      catch (error)\n      {\n         console.error(`TyphonJS Runtime [StyleManager error]: Please update your browser to the latest version.`,\n          error);\n\n         // Clean up: remove the <style> from the DOM.\n         if (styleElement && styleElement.parentNode) { styleElement.remove(); }\n      }\n\n      return void 0;\n   }\n\n   /**\n    * @param   warn - When true, log warnings.\n    *\n    * @param   path - Particular interaction path for warning.\n    *\n    * @param   message - Message to log.\n    */\n   static #log(warn: boolean, path: 'clone' | 'connect' | 'create', message: string): void\n   {\n      if (warn) { console.warn(`[TRL StyleManager] ${path} warning: ${message}`); }\n   }\n}\n\n/**\n * Provides various type definitions and interfaces utilized by {@link StyleManager}.\n */\ndeclare namespace StyleManager {\n   /**\n    * Provides return data types for various methods of {@link StyleManager}.\n    */\n   export namespace Data {\n      /**\n       * Return data from {@link StyleManager.exists}.\n       */\n      type Exists = {\n         /**\n          * CSS ID of target style element.\n          */\n         id: string;\n\n         /**\n          * Semver version of the dynamic styles.\n          */\n         version: string;\n\n         /**\n          * Associated {@link HTMLStyleElement}.\n          */\n         element: HTMLStyleElement;\n      }\n\n      /**\n       * Defines the rule name to CSS selector configuration when using {@link StyleManager.create}. Keys are the\n       * rule name that can retrieve a {@link StyleManager.RuleManager} via {@link StyleManager.get}. Values\n       * are the CSS selector to associate with this manager.\n       */\n      type RulesConfig = { [key: string]: string };\n\n      /**\n       * A mapping of CSS style properties. When bulk setting style properties keys must be in hyphen-case\n       * (IE `background-color`). When retrieving bulk style properties you may request keys to be in camel case\n       * (IE `backgroundColor`). Keys are CSS property names. Bulk retrieval is facilitated by\n       * {@link StyleManager.RuleManager.get}. All values are strings as returned from the CSS Object Model.\n       */\n      type StyleProps = { [key: string]: string };\n   }\n\n   /**\n    * Provides options types for various methods of {@link StyleManager}.\n    */\n   export namespace Options {\n      /**\n       * Options for {@link StyleManager.clone}.\n       */\n      type Clone = {\n         /**\n          * Target browser document to clone into.\n          *\n          * @defaultValue\n          */\n         document: Document;\n\n         /**\n          * When true, force the cloning of the style manager into the target document.\n          *\n          * @defaultValue `false`\n          */\n         force?: boolean;\n\n         /**\n          * When true, log warnings on why cloning failed.\n          *\n          * @defaultValue `false`\n          */\n         warn?: boolean;\n      }\n\n      /**\n       * Options for {@link StyleManager.connect}.\n       */\n      type Connect = {\n         /**\n          * Required CSS ID providing a link to a specific style sheet element.\n          */\n         id: string;\n\n         /**\n          * A semver version or range string representing the version / level of styles supported in connecting to\n          * an existing dynamic styles implementation.\n          */\n         range: string;\n\n         /**\n          * Target document to load styles into.\n          *\n          * @defaultValue `window.document`\n          */\n         document?: Document;\n\n         /**\n          * When true, log warnings on why connecting failed.\n          *\n          * @defaultValue `false`\n          */\n         warn?: boolean;\n      }\n\n      /**\n       * Options for {@link StyleManager.create}.\n       */\n      type Create = {\n         /**\n          * Required CSS ID providing a link to a specific style sheet element.\n          */\n         id: string;\n\n         /**\n          * CSS Rules configuration. Rule name / selector.\n          */\n         rules: StyleManager.Data.RulesConfig;\n\n         /**\n          * Required semver string without wildcards / version ranges representing the version / level of styles being\n          * managed.\n          */\n         version: string;\n\n         /**\n          * Target document to load styles into.\n          *\n          * @defaultValue `window.document`\n          */\n         document?: Document;\n\n         /**\n          * Optional CSS layer name defining the top level CSS layer containing all rules.\n          */\n         layerName?: string;\n\n         /**\n          * When true, log warnings on why creation failed.\n          *\n          * @defaultValue `false`\n          */\n         warn?: boolean;\n      }\n\n      /**\n       * Options for {@link StyleManager.exists}.\n       */\n      type Exists = {\n         /**\n          * Required CSS ID providing a link to a specific style sheet element.\n          */\n         id: string;\n\n         /**\n          * Target document to load styles into.\n          *\n          * @defaultValue `window.document`\n          */\n         document?: Document;\n      }\n   }\n\n   /**\n    * Provides the ability to `get` and `set` bulk or single CSS properties to a specific {@link CSSStyleRule}.\n    */\n   export interface RuleManager extends Iterable<[string, string]>\n   {\n      /**\n       * @returns Provides an accessor to get the `cssText` for the style rule or undefined if not connected.\n       */\n      get cssText(): string | undefined;\n\n      /**\n       * @param cssText - Provides an accessor to set the `cssText` for the style rule.\n       */\n      set cssText(cssText: string | undefined);\n\n      /**\n       * Determines if this RuleManager is still connected / available.\n       *\n       * @returns {boolean} Is RuleManager connected.\n       */\n      get isConnected(): boolean;\n\n      /**\n       * @returns Name of this RuleManager indexed by associated StyleManager.\n       */\n      get name(): string;\n\n      /**\n       * @returns The associated selector for this CSS rule.\n       */\n      get selector(): string;\n\n      /**\n       * @returns Iterator of CSS property entries in hyphen-case.\n       */\n      entries(): Iterator<[string, string]>;\n\n      /**\n       * Retrieves an object with the current CSS rule data.\n       *\n       * @param [options] - Optional settings.\n       *\n       * @param [options.camelCase=false] - Whether to convert property names to camel case.\n       *\n       * @returns Current CSS style data or undefined if not connected.\n       */\n      get(options: { camelCase?: boolean }): StyleManager.Data.StyleProps | undefined;\n\n      /**\n       * Gets a particular CSS property value.\n       *\n       * @param key - CSS property key; must be in hyphen-case (IE `background-color`).\n       *\n       * @returns Returns CSS property value or undefined if non-existent.\n       */\n      getProperty(key: string): string | undefined;\n\n      /**\n       * Returns whether this CSS rule manager has a given property key.\n       *\n       * @param key - CSS property key; must be in hyphen-case (IE `background-color`).\n       *\n       * @returns Property key exists / is defined.\n       */\n      hasProperty(key: string): boolean;\n\n      /**\n       * @returns Iterator of CSS property keys in hyphen-case.\n       */\n      keys(): Iterator<string>;\n\n      /**\n       * Set CSS properties in bulk by property / value. Must use hyphen-case.\n       *\n       * @param styles - CSS styles object.\n       *\n       * @param [options] - Options.\n       *\n       * @param [override=true] - When true overrides any existing values; default: `true`.\n       */\n      setProperties(styles: StyleManager.Data.StyleProps, { override }?: { override?: boolean }): void;\n\n      /**\n       * Sets a particular property.\n       *\n       * @param key - CSS property key; must be in hyphen-case (IE `background-color`).\n       *\n       * @param value - CSS property value.\n       *\n       * @param [options] - Options.\n       *\n       * @param [options.override=true] - When true overrides any existing value; default: `true`.\n       */\n      setProperty(key: string, value: string, { override }?: { override?: boolean }): void;\n\n      /**\n       * Removes the property keys specified. If `keys` is an iterable list then all property keys in the list are\n       * removed. The keys must be in hyphen-case (IE `background-color`).\n       *\n       * @param keys - The property keys to remove.\n       */\n      removeProperties(keys: Iterable<string>): void;\n\n      /**\n       * Removes a particular CSS property.\n       *\n       * @param key - CSS property key; must be in hyphen-case (IE `background-color`).\n       *\n       * @returns CSS value when removed or undefined if non-existent.\n       */\n      removeProperty(key: string): string | undefined;\n   }\n\n   /**\n    * Defines extra data stored directly on an {@link HTMLStyleElement} associated with the dynamic style manager\n    * instance.\n    */\n   export interface TJSStyleElement extends HTMLStyleElement {\n      /**\n       * The rules configuration for this dynamic style instance.\n       */\n      _tjsRules: StyleManager.Data.RulesConfig;\n\n      /**\n       * The non-wildcard semver for this dynamic style instance.\n       */\n      _tjsVersion: string;\n\n      /**\n       * Any associated CSS layer name for this dynamic style instance.\n       */\n      _tjsLayerName: string | undefined;\n   }\n}\n\n// @ts-ignore // strict checking doesn't like the intentional dual namespace / class export.\nexport { StyleManager }\n","import { CrossWindow }  from '#runtime/util/browser';\n\nimport {\n   isIterable,\n   isObject }           from '#runtime/util/object';\n\nimport { StyleParse }   from '../parse';\n\n/**\n * Dynamically parses and indexes a `CSSStyleSheet` at runtime, exposing a selector-to-style mapping by\n * individual selector parts. CSS variable resolution is also possible which enables the ability to flatten and\n * resolve complex nested `var(--...)` chains defined across multiple selectors and layers.\n *\n * When retrieving specific selector styles via {@link StyleSheetResolve.get} and {@link StyleSheetResolve.getProperty}\n * it is possible to provide additional parent selectors that may define scoped CSS variables. These parent variable\n * definitions will be substituted in the target selector data allowing specific element scoping of CSS variables to be\n * flattened.\n *\n * Current fallback support includes recursive var(--a, var(--b, ...)) chains with graceful partial substitution if\n * some variables are undefined. This maintains correctness without introducing ambiguity or needing a complete AST\n * based parser.\n *\n * By default, when parsing CSSStyleSheet instances relative URL rewriting occurs converting `url(...)` references to\n * absolute paths based on the `CSSStyleSheet.href` or the `baseHref` parse option for inline / synthetic\n * CSSStyleSheets. You may turn off relative URL rewriting via setting the `urlRewrite` parse option to `false`.\n *\n * By default, simple media queries / `@media` rules are parsed when all conditions are `prefers-*` features and the\n * media query matches at runtime via `window.matchMedia(...)`. Mixed conditions (IE with screen, width, etc.) are\n * ignored by design. Only direct style rules under a media query are parsed. You may turn off media query parsing via\n * setting the `mediaQuery` parse option to false.\n *\n * --------\n *\n * The goal of this implementation is to realize a regex-based parser with small code size, minimal memory footprint,\n * speed, and reasonable accuracy.\n *\n * Core features:\n * - Parses all or specific relevant `@layer` blocks.\n * - Provides both direct and resolved access to styles via `.get()` and `.getProperty()`.\n * - Automatically rewrites relative URLs / `url(...)` references to absolute paths.\n *\n * Parse Options:\n * - Can set a base `href` for inline / synthetic CSSStyleSheets being processed via `baseHref` option.\n * - Can filter out and exclude undesired CSS selector parts for parsing via `excludeSelectorParts` option.\n * - Can filter out and include just desired CSS layers via `includeCSSLayers` option.\n * - Can filter out and include just desired CSS selector parts via `includeSelectorPartSet` option.\n * - Can disable relative URL rewriting by setting `urlRewrite` option to `false`.\n *\n * Access Options:\n * - Can return style property keys in camel case via `camelCase` option.\n * - Can limit the depth of resolved CSS variables across parent-selector fallback chains via `depth` option.\n * - Enables resolution of scoped CSS variables using a parent-selector fallback chain via `resolve` option.\n * - Can enable cyclic dependency detection warnings when resolving CSS variables via `warnCycles` option.\n * - Can enable warnings for non-existent parent-selector fallback lookup via `warnResolve` option.\n *\n * @example\n * ```js\n * import { StyleSheetResolve } from '#runtime/util/dom/style';\n *\n * // Parse first stylesheet in the browser `document`.\n * const parsedStyles = StyleSheetResolve.parse(document.styleSheets[0]);\n *\n * // The `props` object has styles w/ CSS variables resolved from `input[type=\"text\"]` for the dark theme.\n * const props = parsedStyles.get('input[type=\"text\"]', { resolve: '.themed.theme-dark input' });\n * ```\n *\n * @privateRemarks\n * This implementation avoids a full AST parser for `var(--...)` fallback expressions to keep the codebase compact. If\n * future requirements include resolving deeply nested fallbacks, debug tracing, or custom resolution behavior, I'll\n * consider replacing this logic with a dedicated AST parser and visitor pattern. An AST-based approach would offer more\n * flexibility and maintainability at the cost of slightly increased complexity and larger runtime memory footprint.\n */\nclass StyleSheetResolve implements Iterable<[string, { [key: string]: string }]>\n{\n   /**\n    * Detects hyphen-case separator for camel case property key conversion.\n    */\n   static #HYPHEN_CASE_REGEX = /-([a-z])/g;\n\n   /**\n    * Detects just a single `(prefers-*)` CSSMediaRule condition.\n    */\n   static #MEDIA_RULE_PREFERS = /^\\s*\\(?\\s*prefers-[^)]+(?:\\s*:\\s*[^)]+)?\\)?\\s*$/i;\n\n   /**\n    * Detects relative `url()` references in CSSStyleRule `cssText`.\n    */\n   static #URL_DETECTION_REGEX = /\\burl\\(\\s*(['\"]?)(?!data:|https?:|\\/|#)/i;\n\n   /**\n    * Captures contents of `url()` references.\n    */\n   static #URL_REGEX = /url\\((['\"]?)([^'\")]+)\\1\\)/g;\n\n   /**\n    * Internal tracking of frozen state; once frozen, no more modifications are possible.\n    */\n   #frozen: boolean = false;\n\n   /**\n    * Parsed selector to associated style properties.\n    */\n   #sheetMap: Map<string, { [key: string]: string }> = new Map();\n\n   /**\n    * Parse a CSSStyleSheet instance with the given options or accept a pre-filled Map generating a new\n    * `StyleSheetResolve` instance.\n    *\n    * @param styleSheetOrMap - The stylesheet instance to parse or an existing parsed stylesheet Map.\n    *\n    * @param [options] - Options for parsing stylesheet.\n    *\n    * @returns {StyleSheetResolve} New instance with the given parsed data.\n    */\n   static parse(styleSheetOrMap: CSSStyleSheet | Map<string, { [key: string]: string }>,\n    options: StyleSheetResolve.Options.Parse = {}): StyleSheetResolve\n   {\n      return new StyleSheetResolve().parse(styleSheetOrMap, options);\n   }\n\n   /**\n    * Instantiate an empty `StyleSheetResolve` instance.\n    */\n   constructor() {}\n\n   // Accessors ------------------------------------------------------------------------------------------------------\n\n   /**\n    * @returns Current frozen state; when true no more modifications are possible.\n    */\n   get frozen(): boolean\n   {\n      return this.#frozen;\n   }\n\n   /**\n    * @returns Returns the size / count of selector properties tracked.\n    */\n   get size(): number\n   {\n      return this.#sheetMap.size;\n   }\n\n   // Iterator -------------------------------------------------------------------------------------------------------\n\n   /**\n    * Allows usage in `for of` loops directly.\n    *\n    * @returns Entries Map iterator.\n    */\n   *[Symbol.iterator](): MapIterator<[string, { [key: string]: string }]>\n   {\n      // Use `entries()` to make a shallow copy of data.\n      yield* this.entries();\n   }\n\n   // Methods --------------------------------------------------------------------------------------------------------\n\n   /**\n    * Clears any existing parsed styles.\n    */\n   clear()\n   {\n      if (this.#frozen) { throw new Error('Cannot modify a frozen StyleSheetResolve instance.'); }\n\n      this.#sheetMap.clear();\n   }\n\n   /**\n    * Clones this instance returning a new `StyleSheetResolve` instance with a copy of the data.\n    *\n    * @returns Cloned instance.\n    */\n   clone(): StyleSheetResolve\n   {\n      return StyleSheetResolve.parse(this.#clone(this.#sheetMap));\n   }\n\n   /**\n    * Deletes an entry in the parsed stylesheet Map.\n    *\n    * @param   selector - Selector key to delete.\n    *\n    * @returns Success state.\n    */\n   delete(selector: string): boolean\n   {\n      if (this.#frozen) { throw new Error('Cannot modify a frozen StyleSheetResolve instance.'); }\n\n      return this.#sheetMap.delete(selector);\n   }\n\n   /**\n    * Entries iterator of selector / style properties objects.\n    *\n    * @returns {MapIterator<[string, { [key: string]: string }]>} Tracked CSS selector key / value iterator.\n    * @yields\n    */\n   *entries(): MapIterator<[string, { [key: string]: string }]>\n   {\n      // Ensure a shallow copy of style properties.\n      for (const key of this.#sheetMap.keys()) { yield [key, { ...this.#sheetMap.get(key) }]; }\n   }\n\n   /**\n    * Freezes this instance disallowing further modifications to the stylesheet data.\n    */\n   freeze()\n   {\n      /* c8 ignore next 1 */\n      if (this.#frozen) { return; }\n\n      this.#frozen = true;\n\n      for (const props of this.#sheetMap.values()) { Object.freeze(props); }\n\n      Object.freeze(this.#sheetMap);\n   }\n\n   /**\n    * Gets all properties associated with the given selector(s). You may combine multiple selectors for a\n    * combined result. You may also provide additional selectors as the `resolve` option to substitute any CSS variables\n    * in the target selector(s).\n    *\n    * @param selector - A selector or list of selectors to retrieve.\n    *\n    * @param [options] - Options.\n    *\n    * @returns Style properties object or undefined.\n    */\n   get(selector: string | Iterable<string>, { camelCase = false, depth, resolve, warnCycles = false,\n    warnResolve = false }: StyleSheetResolve.Options.Get = {}): { [key: string]: string } | undefined\n   {\n      if (typeof selector !== 'string' && !isIterable(selector))\n      {\n         throw new TypeError(`'selector' must be a string or an iterable list of strings.`);\n      }\n\n      if (typeof camelCase !== 'boolean') { throw new TypeError(`'camelCase' must be a boolean.`); }\n\n      if (depth !== void 0 && (!Number.isInteger(depth) || depth < 1))\n      {\n         throw new TypeError(`'depth' must be a positive integer >= 1.`);\n      }\n\n      if (resolve !== void 0 && typeof resolve !== 'string' && !isIterable(resolve))\n      {\n         throw new TypeError(`'resolve' must be a string or an iterable list of strings.`);\n      }\n\n      if (typeof warnCycles !== 'boolean') { throw new TypeError(`'warnCycles' must be a boolean.`); }\n      if (typeof warnResolve !== 'boolean') { throw new TypeError(`'warnResolve' must be a boolean.`); }\n\n      let result: { [key: string]: string } | undefined = void 0;\n\n      if (isIterable(selector))\n      {\n         for (const entry of selector)\n         {\n            // If there is a direct selector match, then return a value immediately.\n            if (this.#sheetMap.has(entry)) { result = Object.assign(result ?? {}, this.#sheetMap.get(entry)); }\n         }\n      }\n      else\n      {\n         // If there is a direct selector match, then return a value immediately.\n         if (this.#sheetMap.has(selector)) { result = Object.assign(result ?? {}, this.#sheetMap.get(selector)); }\n      }\n\n      if (result && (typeof resolve === 'string' || isIterable(resolve)))\n      {\n         const resolveList = typeof resolve === 'string' ? [resolve] : Array.from(resolve);\n\n         depth = typeof depth === 'number' ? depth : Math.max(1, resolveList.length);\n\n         const resolveData: ResolveData = {\n            parentNotFound: new Set(),\n            seenCycles: new Set(),\n            warnCycles\n         }\n\n         // Progressively resolve CSS variables up to the requested depth.\n         for (let cntr = 0; cntr < depth && cntr < resolveList.length; cntr++)\n         {\n            this.#resolve(result, resolveList, resolveData);\n         }\n\n         if (resolveData.parentNotFound.size > 0)\n         {\n            console.warn(\n             `[TyphonJS Runtime] StyleSheetResolve - resolve - Could not locate parent selector(s) for resolution: '${\n              [...resolveData.parentNotFound].join(', ')}'`);\n         }\n      }\n\n      // Potentially convert property keys to camel case.\n      if (result && camelCase)\n      {\n         const remapped: { [key: string]: string } = {};\n\n         const toUpper = (_: any, str: string) => str.toUpperCase();\n\n         for (const key in result)\n         {\n            const mappedKey = key.startsWith('--') ? key : key.replace(StyleSheetResolve.#HYPHEN_CASE_REGEX, toUpper);\n            remapped[mappedKey] = result[key];\n         }\n\n         result = remapped;\n      }\n\n      return result;\n   }\n\n   /**\n    * Gets a specific property value from the given `selector` and `property` key.\n    *\n    * @param   selector - A selector or list of selectors to retrieve.\n    *\n    * @param   property - Specific property to locate.\n    *\n    * @param   [options] - Options.\n    *\n    * @returns Style property value.\n    */\n   getProperty(selector: string | Iterable<string>, property: string, options?: StyleSheetResolve.Options.Get):\n    string | undefined\n   {\n      const data = this.get(selector, options);\n\n      return isObject(data) && property in data ? data[property] : void 0;\n   }\n\n   /**\n    * Test if `StyleSheetResolve` tracks the given selector.\n    *\n    * @param   selector - CSS selector to check.\n    *\n    * @returns StyleSheetResolve tracks the given selector.\n    */\n   has(selector: string): boolean\n   {\n      return this.#sheetMap.has(selector);\n   }\n\n   /**\n    * @returns Tracked CSS selector keys iterator.\n    */\n   keys(): MapIterator<string>\n   {\n      return this.#sheetMap.keys();\n   }\n\n   /**\n    * Merges selectors and style properties from another StyleSheetResolve instance into this one. By default, the\n    * source of the merge overrides existing properties. You may choose to preserve existing values along with\n    * specifying exact selector matches.\n    *\n    * @param   source - Another instance to merge from.\n    *\n    * @param   [options] - Options.\n    *\n    * @returns This instance.\n    */\n   merge(source: StyleSheetResolve, { exactMatch = false, strategy = 'override' }:\n    StyleSheetResolve.Options.Merge = {}): this\n   {\n      if (this.#frozen) { throw new Error('Cannot modify a frozen StyleSheetResolve instance.'); }\n\n      if (!(source instanceof StyleSheetResolve))\n      {\n         throw new TypeError(`'source' is not a StyleSheetResolve instance.`);\n      }\n\n      for (const selectorPart of source.keys())\n      {\n         if (exactMatch && !this.#sheetMap.has(selectorPart)) { continue; }\n\n         // Directly retrieve the stored object.\n         const incoming = source.#sheetMap.get(selectorPart);\n\n         /* c8 ignore next 1 */ // Sanity check.\n         if (!incoming) { continue; }\n\n         /* c8 ignore next 1 */  // `?? {}` is for sanity.\n         const current = this.#sheetMap.get(selectorPart) ?? {};\n\n         // For preserve strategy, make a copy of the incoming data in the case that the source is frozen.\n         const merged = strategy === 'preserve' ? Object.assign({}, { ...incoming }, current) :\n          Object.assign({}, current, incoming);\n\n         this.#sheetMap.set(selectorPart, merged);\n      }\n\n      return this;\n   }\n\n   /**\n    * Clears existing stylesheet mapping and parses the given stylesheet or Map.\n    *\n    * @param   styleSheetOrMap - The stylesheet element to parse or an existing parsed stylesheet Map.\n    *\n    * @param   [options] - Options for parsing stylesheet.\n    *\n    * @returns This instance.\n    */\n   parse(styleSheetOrMap: CSSStyleSheet | Map<string, { [key: string]: string }>,\n    options: StyleSheetResolve.Options.Parse = {}): this\n   {\n      if (this.#frozen) { throw new Error('Cannot modify a frozen StyleSheetResolve instance.'); }\n\n      this.#sheetMap.clear();\n\n      if (!CrossWindow.isCSSStyleSheet(styleSheetOrMap) && !CrossWindow.isMap(styleSheetOrMap))\n      {\n         throw new TypeError(\n          `'styleSheetOrMap' must be a 'CSSStyleSheet' instance or a parsed Map of stylesheet entries.`);\n      }\n\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\n\n      if (options.baseHref !== void 0 && typeof options.baseHref !== 'string')\n      {\n         throw new TypeError(`'baseHref' must be a string.`);\n      }\n\n      if (options.excludeSelectorParts !== void 0 && !isIterable(options.excludeSelectorParts))\n      {\n         throw new TypeError(`'excludeSelectorParts' must be a list of RegExp instances.`);\n      }\n\n      if (options.includeCSSLayers !== void 0 && !isIterable(options.includeCSSLayers))\n      {\n         throw new TypeError(`'includeCSSLayers' must be a list of RegExp instances.`);\n      }\n\n      if (options.includeSelectorPartSet !== void 0 && !CrossWindow.isSet(options.includeSelectorPartSet))\n      {\n         throw new TypeError(`'includeSelectorPartSet' must be a Set of strings.`);\n      }\n\n      if (options.mediaQuery !== void 0 && typeof options.mediaQuery !== 'boolean')\n      {\n         throw new TypeError(`'mediaQuery' must be a boolean.`);\n      }\n\n      if (options.urlRewrite !== void 0 && typeof options.urlRewrite !== 'boolean')\n      {\n         throw new TypeError(`'urlRewrite' must be a boolean.`);\n      }\n\n      if (CrossWindow.isCSSStyleSheet(styleSheetOrMap))\n      {\n         this.#parse(styleSheetOrMap, options);\n      }\n      else if (CrossWindow.isMap(styleSheetOrMap))\n      {\n         this.#sheetMap = this.#clone(styleSheetOrMap as Map<string, { [key: string]: string }>);\n      }\n\n      return this;\n   }\n\n   /**\n    * Directly sets a selector key with the given style properties object.\n    *\n    * @param   selector - A single selector key to set.\n    *\n    * @param   styleObj - Style data object of property / value pairs.\n    */\n   set(selector: string, styleObj: { [key: string]: string })\n   {\n      if (this.#frozen) { throw new Error('Cannot modify a frozen StyleSheetResolve instance.'); }\n\n      if (typeof selector !== 'string') { throw new TypeError(`'selector' must be a string.`); }\n      if (!isObject(styleObj)) { throw new TypeError(`'styleObj' must be an object.`); }\n\n      this.#sheetMap.set(selector, styleObj);\n   }\n\n   // Internal Implementation ----------------------------------------------------------------------------------------\n\n   /**\n    * Shallow clone of source Map into target Map.\n    *\n    * @param   sourceMap - Source Map.\n    *\n    * @param   [targetMap] - Target Map.\n    *\n    * @returns Shallow copy cloned Map.\n    */\n   #clone(sourceMap: Map<string, { [key: string]: string }>,\n    targetMap: Map<string, { [key: string]: string }> = new Map()): Map<string, { [key: string]: string }>\n   {\n      // Shallow copy.\n      for (const [selector, props] of sourceMap.entries()) { targetMap.set(selector, { ...props }); }\n\n      return targetMap;\n   }\n\n   /**\n    * Parses the given CSSStyleSheet instance.\n    *\n    * @param styleSheet - The stylesheet to parse.\n    *\n    * @param [opts] - Options for parsing stylesheet.\n    */\n   #parse(styleSheet: CSSStyleSheet, opts: StyleSheetResolve.Options.Parse)\n   {\n      // Convert to consistent sanitized options data data.\n      const options: ProcessOptions = {\n         baseHref: styleSheet.href ?? opts.baseHref,\n         excludeSelectorParts: isIterable(opts.excludeSelectorParts) ? Array.from(opts.excludeSelectorParts) : [],\n         includeCSSLayers: isIterable(opts.includeCSSLayers) ? Array.from(opts.includeCSSLayers) : [],\n         includeSelectorPartSet: CrossWindow.isSet(opts.includeSelectorPartSet) ? opts.includeSelectorPartSet :\n          new Set(),\n         mediaQuery: opts.mediaQuery ?? true,\n         urlRewrite: opts.urlRewrite ?? true\n      }\n\n      const rules = styleSheet.cssRules;\n\n      const allStyleRules: CSSStyleRule[] = [];\n\n      // Collect all CSSStyleRules.\n      for (let i = 0; i < rules.length; i++)\n      {\n         const rule = rules[i];\n\n         switch(rule.constructor.name)\n         {\n            case 'CSSLayerBlockRule':\n               this.#processLayerBlockRule(rule as CSSLayerBlockRule, void 0, allStyleRules, options);\n               break;\n\n            case 'CSSMediaRule':\n               this.#processMediaRule(rule as CSSMediaRule, allStyleRules, options);\n               break;\n\n            case 'CSSStyleRule':\n               allStyleRules.push(rule as unknown as CSSStyleRule);\n               break;\n         }\n      }\n\n      // Bulk process all CSSStyleRules and build the map of selectors to properties.\n      this.#processStyleRules(allStyleRules, options);\n   }\n\n   /**\n    * Recursively parses / processes a CSSLayerBlockRule and encountered CSSStyleRule entries.\n    *\n    * @param   blockRule - The `CSSLayerBlockRule` to parse.\n    *\n    * @param   parentLayerName - Name of parent CSS layer.\n    *\n    * @param   allStyleRules - All style rules to process.\n    *\n    * @param   opts - Sanitized process options.\n    */\n   #processLayerBlockRule(blockRule: CSSLayerBlockRule, parentLayerName: string | undefined,\n    allStyleRules: CSSStyleRule[], opts: ProcessOptions)\n   {\n      const fullname = typeof parentLayerName === 'string' ? `${parentLayerName}.${blockRule.name}` : blockRule.name;\n\n      const includeLayer = opts.includeCSSLayers.length === 0 ||\n       opts.includeCSSLayers.some((regex) => regex.test(fullname));\n\n      const layerBlockRules: CSSLayerBlockRule[] = [];\n\n      const rules = blockRule.cssRules;\n      for (let i = 0; i < rules.length; i++)\n      {\n         const rule = rules[i];\n\n         switch(rule.constructor.name)\n         {\n            case 'CSSLayerBlockRule':\n               layerBlockRules.push(rule as CSSLayerBlockRule);\n               break;\n\n            case 'CSSMediaRule':\n               this.#processMediaRule(rule as CSSMediaRule, allStyleRules, opts);\n               break;\n\n            case 'CSSStyleRule':\n               if (includeLayer) { allStyleRules.push(rule as unknown as CSSStyleRule); }\n               break;\n         }\n      }\n\n      for (let i = 0; i < layerBlockRules.length; i++)\n      {\n         this.#processLayerBlockRule(layerBlockRules[i], fullname, allStyleRules, opts);\n      }\n   }\n\n   /**\n    * Simple processing of a CSSMediaRule and directly nested CSSStyleRule entries.\n    *\n    * @param   mediaRule - The `CSSMediaRule` to parse.\n    *\n    * @param   allStyleRules - All style rules to process.\n    *\n    * @param   opts - Sanitized process options.\n    */\n   #processMediaRule(mediaRule: CSSMediaRule, allStyleRules: CSSStyleRule[], opts: ProcessOptions)\n   {\n      if (!opts.mediaQuery) { return; }\n\n      // Skip if the media rule does not match the current environment.\n      if (!window.matchMedia(mediaRule.media.mediaText).matches) { return; }\n\n      // Currently just singular `(prefers-*)` conditions are allowed.\n      if (!StyleSheetResolve.#MEDIA_RULE_PREFERS.test(mediaRule.media.mediaText)) { return; }\n\n      const rules = mediaRule.cssRules;\n      for (let i = 0; i < rules.length; i++)\n      {\n         const rule = rules[i];\n\n         switch(rule.constructor.name)\n         {\n            case 'CSSStyleRule':\n               allStyleRules.push(rule as unknown as CSSStyleRule);\n               break;\n         }\n      }\n   }\n\n   /**\n    * Processes all collected `CSSStyleRules`.\n    *\n    * @param   allStyleRules - Style rules to parse.\n    *\n    * @param   opts - ProcessOptions.\n    */\n   #processStyleRules(allStyleRules: CSSStyleRule[], opts: ProcessOptions)\n   {\n      for (let i = 0; i < allStyleRules.length; i++)\n      {\n         const styleRule = allStyleRules[i];\n\n         // Split selector parts and remove disallowed selector parts and empty strings.\n         const selectorParts = StyleParse.selectorText(styleRule.selectorText, opts);\n\n         if (selectorParts.length)\n         {\n            // Parse CSSStyleDeclaration.\n            const result = StyleParse.cssText(styleRule.style.cssText);\n\n            // Only convert `url()` references if `urlRewrite` is true, baseHref` is defined, and relative `url()`\n            // detected in `cssText`.\n            if (opts.urlRewrite && opts.baseHref &&\n             StyleSheetResolve.#URL_DETECTION_REGEX.test(styleRule.style.cssText))\n            {\n               this.#processStyleRuleUrls(result, opts);\n            }\n\n            for (let j = selectorParts.length; --j >= 0;)\n            {\n               const part = selectorParts[j];\n\n               if (this.#sheetMap.has(part))\n               {\n                  Object.assign(this.#sheetMap.get(part)!, result);\n               }\n               else\n               {\n                  this.#sheetMap.set(part, result);\n               }\n            }\n         }\n      }\n   }\n\n   /**\n    * Resolve relative `url(...)` references in CSS property values based on the stylesheet origin.\n    *\n    * This method rewrites relative paths in `url(...)` to absolute paths (IE `/assets/img.png`) using the\n    * CSSStyleSheet `href` when available or falling back to the provided `baseHref` for inline stylesheets.\n    *\n    * @param result - Parsed CSS property key-value map.\n    *\n    * @param opts - Processing options.\n    */\n   #processStyleRuleUrls(result: { [key: string]: string }, opts: ProcessOptions)\n   {\n      const baseHref = opts.baseHref;\n\n      for (const key in result)\n      {\n         let value = result[key];\n\n         // Fast skip if there's no 'url(' substring.\n         if (value.indexOf('url(') === -1) { continue; }\n\n         // Avoid regex test if no reason to rewrite (IE relative URLs)\n         if (!StyleSheetResolve.#URL_DETECTION_REGEX.test(value)) { continue; }\n\n         // Only assign back to result if value changes.\n         let modified = false;\n\n         value = value.replace(StyleSheetResolve.#URL_REGEX, (match, quote, relPath) =>\n         {\n            try\n            {\n               // Convert the relative path to an absolute pathname using the resolved baseHref.\n               const absPath = new URL(relPath, baseHref).pathname;\n               modified = true;\n               return `url(${quote}${absPath}${quote})`;\n               /* c8 ignore next 6 */\n            }\n            catch\n            {\n               // If resolution fails return the original value unchanged.\n               return match;\n            }\n         });\n\n         if (modified) { result[key] = value; }\n      }\n   }\n\n   /**\n    * Resolves intermediate CSS variables defined in the `result` style properties object with data from the given\n    * `resolve` selector(s).\n    *\n    * @param   result - Copy of source selector style properties to resolve.\n    *\n    * @param   resolve - Parent CSS variable resolution selectors.\n    *\n    * @param   resolveData - Resolution data.\n    */\n   #resolve(result: { [key: string]: string }, resolve: string[], resolveData: ResolveData)\n   {\n      // Collect all parent-defined CSS variables.\n      const parentVars: { [key: string]: string } = {};\n\n      for (let i = 0; i < resolve.length; i++)\n      {\n         const entry = resolve[i];\n\n         const parent = this.get(entry);\n\n         // Verify that the parent lookup is available otherwise add selector to `not found` Set.\n         if (!isObject(parent))\n         {\n            resolveData.parentNotFound.add(entry);\n            continue;\n         }\n\n         for (const key in parent)\n         {\n            if (key.startsWith('--')) { parentVars[key] = parent[key]; }\n         }\n      }\n\n      // Track and resolve variables used in the result.\n      const cssVars = new ResolveVars(result, parentVars, resolveData);\n\n      /* c8 ignore next 1 */\n      if (!cssVars.unresolvedCount) { return; }\n\n      for (const key in parentVars) { cssVars.set(key, parentVars[key]); }\n\n      Object.assign(result, cssVars.resolved);\n   }\n}\n\n/**\n * Process options sanitized and converted for internal usage.\n */\ntype ProcessOptions = {\n   /**\n    * This value is used as the base `HREF` and is used as a fallback origin for any stylesheet that lacks a defined\n    * `CSSStyleSheet.href` (IE inline or synthetic stylesheets). You may provide it when processing inline stylesheets\n    * when URL rewriting is necessary.\n    */\n   baseHref?: string;\n\n   /**\n    * Array of RegExp to filter via exclusion CSS selector parts.\n    */\n   excludeSelectorParts: RegExp[];\n\n   /**\n    * Array of RegExp to filter via inclusion for CSS layer names.\n    */\n   includeCSSLayers: RegExp[];\n\n   /**\n    * A Set of strings to exactly match selector parts to include in parsed stylesheet data.\n    */\n   includeSelectorPartSet: Set<string>;\n\n   /**\n    * When false, media query / `@media` parsing is disabled.\n    *\n    * @defaultValue `true`\n    */\n   mediaQuery?: boolean;\n\n   /**\n    * When false, relative URL rewriting is disabled. Relative URL rewriting based on the `CSSStyleSheet.href` or\n    * provided `baseHref` option is enabled by default.\n    *\n    * @defaultValue `true`\n    */\n   urlRewrite?: boolean;\n}\n\n/**\n * Additional tracking data passed to CSS variable resolution path.\n */\ntype ResolveData = {\n   /**\n    * Stores resolution parents that are not found.\n    */\n   parentNotFound: Set<string>;\n\n   /**\n    * Dedupes warnings for cyclic dependency warnings.\n    */\n   seenCycles: Set<string>;\n\n   /**\n    * Cyclic dependency warnings enabled.\n    */\n   warnCycles: boolean;\n}\n\n/**\n * Encapsulates CSS variable resolution logic and data.\n */\nclass ResolveVars\n{\n   /**\n    * Detect CSS variable.\n    */\n   static readonly #DETECT_CSS_VAR_REGEX = /--[\\w-]+/g;\n\n   /**\n    * Capture CSS variable fallbacks.\n    */\n   static readonly #CSS_VAR_FALLBACK_REGEX = /^var\\((?<varName>--[\\w-]+)\\s*,\\s*(?<fallback>.+?)\\)$/;\n\n   /**\n    * Replace CSS variable fallbacks.\n    */\n   static readonly #CSS_VAR_FALLBACK_REPLACE_REGEX = /var\\((--[\\w-]+)(?:\\s*,\\s*[^()]*?)?\\)/g;\n\n   /**\n    * Closed CSS variable.\n    */\n   static readonly #CSS_VAR_REGEX = /^var\\((--[\\w-]+)\\)$/;\n\n   /**\n    * Open CSS variable.\n    */\n   static readonly #CSS_VAR_PARTIAL_REGEX = /^var\\((--[\\w-]+)/;\n\n   /**\n    * Prevent deep fallback recursion.\n    */\n   static readonly #MAX_FALLBACK_DEPTH = 10;\n\n   /**\n    * Initial style properties w/ CSS variables to track.\n    */\n   #propMap = new Map<string, string>();\n\n   /**\n    * Reverse lookup for CSS variable name to associated property.\n    */\n   #varToProp = new Map<string, Set<string>>();\n\n   /**\n    * Resolved CSS variable from parent selector properties.\n    */\n   #varResolved = new Map<string, string>();\n\n   readonly #parentVars: { [key: string]: string };\n\n   #resolveData: ResolveData;\n\n   /**\n    * @param initial - Initial style entry to resolve.\n    *\n    * @param parentVars - All parent resolution vars.\n    *\n    * @param resolveData - Resolution data.\n    */\n   constructor(initial: { [key: string]: string }, parentVars: { [key: string]: string }, resolveData: ResolveData)\n   {\n      this.#parentVars = parentVars;\n      this.#resolveData = resolveData;\n\n      // Build the reverse dependency map of which CSS variables (--x) are referenced by each style property.\n      // This enables efficient tracking of what properties depend on what variables.\n      for (const prop in initial)\n      {\n         const value = initial[prop];\n         let match: RegExpExecArray | null;\n\n         ResolveVars.#DETECT_CSS_VAR_REGEX.lastIndex = 0; // Reset if reused\n\n         let found = false;\n\n         while ((match = ResolveVars.#DETECT_CSS_VAR_REGEX.exec(value)))\n         {\n            const entry = match[0];\n            if (!this.#varToProp.has(entry)) this.#varToProp.set(entry, new Set());\n            this.#varToProp.get(entry)!.add(prop);\n            found = true;\n         }\n\n         if (found) this.#propMap.set(prop, value);\n      }\n   }\n\n   /**\n    * Resolves properties in `#propMap` by substituting var(...) expressions using resolved values in #varResolved. If\n    * no resolution is available, attempts to preserve fallback expressions in their original var(...) form.\n    *\n    * Supports chained fallbacks like: var(--a, var(--b, var(--c, red))) and resolving variables in statements like\n    * `calc(1rem + var(--x))`.\n    *\n    * @returns All fields that have been resolved.\n    */\n   get resolved(): { [key: string]: string }\n   {\n      const result: { [key: string]: string } = {};\n\n      // Attempt to resolve each CSS variable found in style properties. If resolution is known, then substitute it\n      // otherwise check for fallback chains.\n      for (const entry of this.#varToProp.keys())\n      {\n         const props = this.#varToProp.get(entry);\n         const varResolved = this.#varResolved.get(entry);\n\n         /* c8 ignore next 1 */\n         if (!props) { continue; }\n\n         // Direct resolution: replace all `var(--x)` forms in all dependent properties with the resolved value.\n         if (varResolved)\n         {\n            for (const prop of props)\n            {\n               let value = this.#propMap.get(prop) as string;\n\n               if (value.indexOf(`var(${entry}`) !== -1)\n               {\n                  // Replace each `var(--x[, fallback])` with its resolved value (if available).\n                  // Fallbacks are preserved unless fully resolvable, enabling partial resolution of chained vars.\n                  value = value.replace(ResolveVars.#CSS_VAR_FALLBACK_REPLACE_REGEX, (match) =>\n                  {\n                     // Extract the CSS variable name (`--x`) from the matched `var(--x[, fallback])` expression.\n                     const varName = match.match(ResolveVars.#CSS_VAR_PARTIAL_REGEX)?.[1];\n                     const resolved = this.#varResolved.get(varName as string);\n\n                     /* c8 ignore next 1 */ // `?? match` is a sanity fallback.\n                     return resolved ?? match;\n                  });\n               }\n\n               this.#propMap.set(prop, value);\n               result[prop] = value;\n            }\n         }\n         // Unresolved var: check if fallback exists (`var(--x, red)`), and resolve nested fallback chains if present.\n         else\n         {\n            for (const prop of props)\n            {\n               const value = this.#propMap.get(prop) as string;\n\n               // Early out if no fallback to resolve.\n               if (value.indexOf(`var(${entry}`) === -1) { continue; }\n\n               const fallback = this.#resolveNestedFallback(value);\n\n               this.#propMap.set(prop, fallback);\n               result[prop] = fallback;\n            }\n         }\n      }\n\n      return result;\n   }\n\n   /**\n    * @returns Unresolved field count.\n    */\n   get unresolvedCount(): number\n   {\n      let count = 0;\n\n      for (const entry of this.#varToProp.keys())\n      {\n         if (!this.#varResolved.has(entry)) { count++; }\n      }\n\n      return count;\n   }\n\n   /**\n    * Sets the parent selector defined CSS variable for resolution.\n    *\n    * @param name - CSS variable name\n    *\n    * @param value - Value of target CSS variable.\n    */\n   set(name: string, value: string)\n   {\n      /* c8 ignore next 1 */\n      if (typeof value !== 'string' || value.length === 0) { return; }\n\n      if (this.#resolveData.warnCycles)\n      {\n         this.#setCycleWarn(name, value);\n      }\n      else\n      {\n         if (this.#varToProp.has(name) && !this.#varResolved.has(name)) { this.#varResolved.set(name, value); }\n      }\n   }\n\n   // Internal Implementation ----------------------------------------------------------------------------------------\n\n   /**\n    * Performs DFS traversal to detect cycles in CSS variable resolution. Tracks the resolution path and emits a\n    * warning if a cycle is found. Each affected property is reported once with its originating chain.\n    *\n    * @param   value - Value of target CSS variable.\n    *\n    * @param   visited - Visited CSS variables.\n    *\n    * @param   seenCycles - Dedupe cyclic dependency warnings.\n    *\n    * @returns Resolution result or undefined.\n    */\n   #resolveCycleWarn(value: string, visited: Set<string>, seenCycles: Set<string>): string | undefined\n   {\n      const match = value.match(ResolveVars.#CSS_VAR_REGEX);\n      if (!match) { return value; }\n\n      const next = match[1];\n\n      // Cycle detection: if var is already seen in traversal, then record and warn.\n      if (visited.has(next))\n      {\n         // Format cycle signature for deduping.\n         const cycleChain = [...visited, next];\n         const cycleKey = cycleChain.join('→');\n\n         if (!seenCycles.has(cycleKey))\n         {\n            // Record and deduplicate cycle chains to avoid redundant logs.\n            seenCycles.add(cycleKey);\n\n            const affected = cycleChain.flatMap((varName) => Array.from(this.#varToProp.get(varName) ?? []).map(\n             (prop) => `- ${prop} (via ${varName})`));\n\n            if (affected.length > 0)\n            {\n               console.warn(`[TyphonJS Runtime] StyleSheetResolve - CSS variable cyclic dependency detected: ${\n                cycleChain.join(' → ')}\\nAffected properties:\\n${affected.join('\\n')}`);\n            }\n         }\n\n         return void 0;\n      }\n\n      visited.add(next);\n\n      // Look up the next variable in the chain to continue DFS. Prefer already-resolved entries.\n      const nextValue = this.#varResolved.get(next) ?? this.#parentVars[next];\n\n      /* c8 ignore next 1 */\n      if (typeof nextValue !== 'string') { return void 0; }\n\n      return this.#resolveCycleWarn(nextValue, visited, seenCycles);\n   }\n\n   /**\n    * Resolve fallback chains of the form: var(--a, var(--b, ...))\n    * - Only replaces the top-level var if it is resolved.\n    * - Leaves fallback intact if unresolved.\n    * - Recursively evaluates nested fallbacks if they are var(...).\n    * - Limits recursion depth to prevent cycles or stack overflow.\n    *\n    * @param   expr - CSS var expression to resolve.\n    *\n    * @param   depth - Recursion guard\n    *\n    * @returns Nested fallback resolution result.\n    */\n   #resolveNestedFallback(expr: string, depth: number = 0): string\n   {\n      /* c8 ignore next 1 */ // Prevent runaway recursion or malformed fallback chains.\n      if (depth > ResolveVars.#MAX_FALLBACK_DEPTH) { return expr; }\n\n      // Match top-level var(--x, fallback) expression. Non-greedy match on fallback to avoid trailing garbage.\n      const match = expr.match(ResolveVars.#CSS_VAR_FALLBACK_REGEX);\n      if (!match?.groups) { return expr; }\n\n      const { varName, fallback } = match.groups;\n      const resolved = this.#varResolved.get(varName);\n\n      // If the primary variable is resolved, return the substitution directly ignoring fallback.\n      if (resolved !== void 0) { return resolved; }\n\n      const fallbackTrimmed = fallback.trim();\n\n      // If fallback itself is a var(...) expression, recurse to evaluate it.\n      // The result is substituted in-place unless final resolution is still a var(...) chain.\n      if (fallbackTrimmed.startsWith('var('))\n      {\n         let nested = this.#resolveNestedFallback(fallbackTrimmed, depth + 1);\n\n         // If the nested result itself is a var(...) with a resolved variable, then resolve again.\n         const innerMatch = nested.match(ResolveVars.#CSS_VAR_REGEX);\n         if (innerMatch)\n         {\n            const innerResolved = this.#varResolved.get(innerMatch[1]);\n\n            // If the result of recursion itself is a var(--x) with a known resolution, resolve it again.\n            if (innerResolved !== void 0) { nested = innerResolved; }\n         }\n\n         return `var(${varName}, ${nested})`;\n      }\n\n      // Literal fallback: preserve the full var(...) expression with untouched fallback if not further resolvable.\n      return `var(${varName}, ${fallbackTrimmed})`;\n   }\n\n   /**\n    * Sets the parent selector defined CSS variable for resolution with additional cyclic dependency metrics.\n    *\n    * @param   name - CSS variable name\n    *\n    * @param   value - Value of target CSS variable.\n    */\n   #setCycleWarn(name: string, value: string)\n   {\n      const resolved = this.#resolveCycleWarn(value, new Set([name]), this.#resolveData.seenCycles);\n\n      if (resolved !== void 0 && this.#varToProp.has(name) && !this.#varResolved.has(name))\n      {\n         this.#varResolved.set(name, resolved);\n      }\n   }\n}\n\n/**\n * Provides various options types for {@link StyleSheetResolve}.\n */\ndeclare namespace StyleSheetResolve {\n   /**\n    * Provides various options types for {@link StyleSheetResolve}.\n    */\n   export namespace Options {\n      /**\n       * Optional options for {@link StyleSheetResolve.get} and {@link StyleSheetResolve.getProperty}.\n       */\n      type Get = {\n         /**\n          * When true, returned property keys will be in camel case. CSS variable key names are not converted.\n          *\n          * @defaultValue `false`\n          */\n         camelCase?: boolean;\n\n         /**\n          * Resolution depth for CSS variable substitution. By default, the depth is the length of the provided\n          * `resolve` selectors, but you may opt to provide a specific depth even with multiple resolution selectors.\n          */\n         depth?: number;\n\n         /**\n          * Additional parent selectors as CSS variable resolution sources.\n          */\n         resolve?: string | Iterable<string>;\n\n         /**\n          * When true and resolving CSS variables cyclic / self-referential CSS variable associations are detected.\n          *\n          * @defaultValue `false`\n          */\n         warnCycles?: boolean;\n\n         /**\n          * When true, missing parent-selector in fallback-chain are logged.\n          *\n          * @defaultValue `false`\n          */\n         warnResolve?: boolean;\n      }\n\n      /**\n       * Optional options for {@link StyleSheetResolve.merge}.\n       */\n      type Merge = {\n         /**\n          * Only merge if selector part keys match exactly.\n          *\n          * @defaultValue `false`.\n          */\n         exactMatch?: boolean;\n\n         /**\n          * By default, the source overrides existing values. You may also provide a `preserve` strategy which only\n          * merges property keys that do not exist already.\n          *\n          * @defaultValue `override`\n          */\n         strategy?: 'override' | 'preserve';\n      }\n\n      /**\n       * Optional options for {@link StyleSheetResolve.parse}.\n       */\n      type Parse = {\n         /**\n          * This value is used as the base `HREF` and is used as a fallback origin for any stylesheet that lacks a\n          * defined `CSSStyleSheet.href` (IE inline or synthetic stylesheets). You may provide it when processing inline\n          * stylesheets when URL rewriting is necessary.\n          */\n         baseHref?: string;\n\n         /**\n          * A list of RegExp instance used to exclude CSS selector parts from parsed stylesheet data.\n          */\n         excludeSelectorParts?: Iterable<RegExp>;\n\n         /**\n          * A list of RegExp instance used to specifically include in parsing for specific allowed CSS layers if\n          * present in the stylesheet.\n          */\n         includeCSSLayers?: Iterable<RegExp>;\n\n         /**\n          * A Set of strings to exactly match selector parts to include in parsed stylesheet data.\n          */\n         includeSelectorPartSet?: Set<string>;\n\n         /**\n          * When false, media query / `@media` parsing is disabled.\n          *\n          * @defaultValue `true`\n          */\n         mediaQuery?: boolean;\n\n         /**\n          * When false, relative URL rewriting is disabled. Relative URL rewriting based on the `CSSStyleSheet.href` or\n          * provided `baseHref` option is enabled by default.\n          *\n          * @defaultValue `true`\n          */\n         urlRewrite?: boolean;\n      }\n   }\n}\n\n// @ts-ignore // strict checking doesn't like the intentional dual namespace / class export.\nexport { StyleSheetResolve }\n"],"names":[],"mappings":"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"}