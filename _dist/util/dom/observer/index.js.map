{"version":3,"file":"index.js","sources":["../../../../src/util/dom/observer/ResizeObserverManager.js"],"sourcesContent":["import { isWritableStore } from '#runtime/svelte/store/util';\r\nimport { CrossWindow }     from '#runtime/util/browser';\r\nimport { StyleParse }      from '#runtime/util/dom/style';\r\nimport { isObject }        from '#runtime/util/object';\r\n\r\n/**\r\n * Provides an instance of {@link ResizeObserver} that can manage multiple elements and notify a wide range of\r\n * {@link ResizeObserverData.ResizeTarget} listeners. Offset width and height is also provided through caching the\r\n * margin and padding styles of the target element.\r\n *\r\n * The action, {@link resizeObserver}, utilizes ResizeObserverManager for automatic registration and removal\r\n * via Svelte.\r\n */\r\nexport class ResizeObserverManager\r\n{\r\n   /** @type {Map<HTMLElement, import('./types-local').ResizeObserverSubscriber[]>} */\r\n   #elMap = new Map();\r\n\r\n   /** @type {ResizeObserver} */\r\n   #resizeObserver;\r\n\r\n   /**\r\n    * Defines the various shape / update type of the given target.\r\n    *\r\n    * @type {{ [key: string]: number }}\r\n    */\r\n   static #updateTypes = Object.freeze({\r\n      none: 0,\r\n      attribute: 1,\r\n      function: 2,\r\n      resizeObserved: 3,\r\n      setContentBounds: 4,\r\n      setDimension: 5,\r\n      storeObject: 6,\r\n      storesObject: 7\r\n   });\r\n\r\n   constructor()\r\n   {\r\n      this.#resizeObserver = new ResizeObserver((entries) =>\r\n      {\r\n         for (const entry of entries)\r\n         {\r\n            const subscribers = this.#elMap.get(entry?.target);\r\n\r\n            if (Array.isArray(subscribers))\r\n            {\r\n               const contentWidth = entry.contentRect.width;\r\n               const contentHeight = entry.contentRect.height;\r\n\r\n               for (const subscriber of subscribers)\r\n               {\r\n                  ResizeObserverManager.#updateSubscriber(subscriber, contentWidth, contentHeight);\r\n               }\r\n            }\r\n         }\r\n      });\r\n   }\r\n\r\n   /**\r\n    * Add an {@link HTMLElement} and {@link ResizeObserverData.ResizeTarget} instance for monitoring. Create cached\r\n    * style attributes for the given element include border & padding dimensions for offset width / height calculations.\r\n    *\r\n    * @param {HTMLElement}    el - The element to observe.\r\n    *\r\n    * @param {import('./types').ResizeObserverData.ResizeTarget} target - A target that contains one of several\r\n    *        mechanisms for updating resize data.\r\n    */\r\n   add(el, target)\r\n   {\r\n      if (!CrossWindow.isHTMLElement(el))\r\n      {\r\n         throw new TypeError(`ResizeObserverManager.add error: 'el' is not a HTMLElement.`);\r\n      }\r\n\r\n      // Verify that this target is not already added for this element.\r\n      if (this.#hasTarget(el, target)) { return; }\r\n\r\n      const updateType = ResizeObserverManager.#getUpdateType(target);\r\n\r\n      if (updateType === 0)\r\n      {\r\n         throw new Error(`ResizeObserverManager.add error: 'target' is not a valid ResizeObserverManager target.`);\r\n      }\r\n\r\n      const computed = globalThis.getComputedStyle(el);\r\n\r\n      // Cache styles first from any inline styles then computed styles defaulting to 0 otherwise.\r\n      // Used to create the offset width & height values from the context box ResizeObserver provides.\r\n      const borderBottom = StyleParse.pixels(el.style.borderBottom) ?? StyleParse.pixels(computed.borderBottom) ?? 0;\r\n      const borderLeft = StyleParse.pixels(el.style.borderLeft) ?? StyleParse.pixels(computed.borderLeft) ?? 0;\r\n      const borderRight = StyleParse.pixels(el.style.borderRight) ?? StyleParse.pixels(computed.borderRight) ?? 0;\r\n      const borderTop = StyleParse.pixels(el.style.borderTop) ?? StyleParse.pixels(computed.borderTop) ?? 0;\r\n      const paddingBottom = StyleParse.pixels(el.style.paddingBottom) ?? StyleParse.pixels(computed.paddingBottom) ?? 0;\r\n      const paddingLeft = StyleParse.pixels(el.style.paddingLeft) ?? StyleParse.pixels(computed.paddingLeft) ?? 0;\r\n      const paddingRight = StyleParse.pixels(el.style.paddingRight) ?? StyleParse.pixels(computed.paddingRight) ?? 0;\r\n      const paddingTop = StyleParse.pixels(el.style.paddingTop) ?? StyleParse.pixels(computed.paddingTop) ?? 0;\r\n\r\n      /** @type {import('./types-local').ResizeObserverSubscriber} */\r\n      const data = {\r\n         updateType,\r\n         target,\r\n\r\n         // Stores most recent contentRect.width and contentRect.height values from ResizeObserver.\r\n         contentWidth: 0,\r\n         contentHeight: 0,\r\n\r\n         // Convenience data for total border & padding for offset width & height calculations.\r\n         styles: {\r\n            additionalWidth: borderLeft + borderRight + paddingLeft + paddingRight,\r\n            additionalHeight: borderTop + borderBottom + paddingTop + paddingBottom\r\n         }\r\n      };\r\n\r\n      if (this.#elMap.has(el))\r\n      {\r\n         const subscribers = this.#elMap.get(el);\r\n         subscribers.push(data);\r\n      }\r\n      else\r\n      {\r\n         this.#elMap.set(el, [data]);\r\n      }\r\n\r\n      this.#resizeObserver.observe(el);\r\n   }\r\n\r\n   /**\r\n    * Clears and unobserves all currently tracked elements and managed targets.\r\n    */\r\n   clear()\r\n   {\r\n      for (const el of this.#elMap.keys()) { this.#resizeObserver.unobserve(el); }\r\n\r\n      this.#elMap.clear();\r\n   }\r\n\r\n   /**\r\n    * Removes all {@link ResizeObserverData.ResizeTarget} instances for the given element from monitoring when just an\r\n    * element is provided otherwise removes a specific target from the monitoring map. If no more targets remain then\r\n    * the element is removed from monitoring.\r\n    *\r\n    * @param {HTMLElement} el - Element to remove from monitoring.\r\n    *\r\n    * @param {import('./types').ResizeObserverData.ResizeTarget} [target] - A specific target to remove from monitoring.\r\n    */\r\n   remove(el, target = void 0)\r\n   {\r\n      const subscribers = this.#elMap.get(el);\r\n      if (Array.isArray(subscribers))\r\n      {\r\n         // Remove specific target from subscribers.\r\n         if (target !== void 0)\r\n         {\r\n            const index = subscribers.findIndex((entry) => entry.target === target);\r\n            if (index >= 0)\r\n            {\r\n               subscribers.splice(index, 1);\r\n            }\r\n         }\r\n         else\r\n         {\r\n            // Remove all subscribers.\r\n            subscribers.length = 0;\r\n         }\r\n\r\n         // Remove element monitoring if last target removed.\r\n         if (subscribers.length === 0)\r\n         {\r\n            this.#elMap.delete(el);\r\n            this.#resizeObserver.unobserve(el);\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Provides a function that when invoked with an element updates the cached styles for each subscriber of the\r\n    * element.\r\n    *\r\n    * The style attributes cached to calculate offset height / width include border & padding dimensions. You only need\r\n    * to update the cache if you change border or padding attributes of the element.\r\n    *\r\n    * @param {HTMLElement} el - A HTML element.\r\n    */\r\n   updateCache(el)\r\n   {\r\n      const subscribers = this.#elMap.get(el);\r\n\r\n      if (Array.isArray(subscribers))\r\n      {\r\n         const computed = globalThis.getComputedStyle(el);\r\n\r\n         // Cache styles first from any inline styles then computed styles defaulting to 0 otherwise.\r\n         // Used to create the offset width & height values from the context box ResizeObserver provides.\r\n         const borderBottom = StyleParse.pixels(el.style.borderBottom) ?? StyleParse.pixels(computed.borderBottom) ?? 0;\r\n         const borderLeft = StyleParse.pixels(el.style.borderLeft) ?? StyleParse.pixels(computed.borderLeft) ?? 0;\r\n         const borderRight = StyleParse.pixels(el.style.borderRight) ?? StyleParse.pixels(computed.borderRight) ?? 0;\r\n         const borderTop = StyleParse.pixels(el.style.borderTop) ?? StyleParse.pixels(computed.borderTop) ?? 0;\r\n         const paddingBottom = StyleParse.pixels(el.style.paddingBottom) ??\r\n          StyleParse.pixels(computed.paddingBottom) ?? 0;\r\n         const paddingLeft = StyleParse.pixels(el.style.paddingLeft) ?? StyleParse.pixels(computed.paddingLeft) ?? 0;\r\n         const paddingRight = StyleParse.pixels(el.style.paddingRight) ?? StyleParse.pixels(computed.paddingRight) ?? 0;\r\n         const paddingTop = StyleParse.pixels(el.style.paddingTop) ?? StyleParse.pixels(computed.paddingTop) ?? 0;\r\n\r\n         const additionalWidth = borderLeft + borderRight + paddingLeft + paddingRight;\r\n         const additionalHeight = borderTop + borderBottom + paddingTop + paddingBottom;\r\n\r\n         for (const subscriber of subscribers)\r\n         {\r\n            subscriber.styles.additionalWidth = additionalWidth;\r\n            subscriber.styles.additionalHeight = additionalHeight;\r\n            ResizeObserverManager.#updateSubscriber(subscriber, subscriber.contentWidth, subscriber.contentHeight);\r\n         }\r\n      }\r\n   }\r\n\r\n   // Internal implementation ----------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * Determines the shape of the target instance regarding valid update mechanisms to set width & height changes.\r\n    *\r\n    * @param {import('./types').ResizeObserverData.ResizeTarget}  target - The target instance.\r\n    *\r\n    * @returns {number} Update type value.\r\n    */\r\n   static #getUpdateType(target)\r\n   {\r\n      if (typeof target?.resizeObserved === 'function') { return this.#updateTypes.resizeObserved; }\r\n      if (typeof target?.setDimension === 'function') { return this.#updateTypes.setDimension; }\r\n      if (typeof target?.setContentBounds === 'function') { return this.#updateTypes.setContentBounds; }\r\n\r\n      const targetType = typeof target;\r\n\r\n      // Does the target have resizeObserved writable store?\r\n      if (targetType !== null && (targetType === 'object' || targetType === 'function'))\r\n      {\r\n         if (isWritableStore(target.resizeObserved))\r\n         {\r\n            return this.#updateTypes.storeObject;\r\n         }\r\n\r\n         // Now check for a child stores object which is a common TRL pattern for exposing stores.\r\n         const stores = target?.stores;\r\n         if (isObject(stores) || typeof stores === 'function')\r\n         {\r\n            if (isWritableStore(stores.resizeObserved))\r\n            {\r\n               return this.#updateTypes.storesObject;\r\n            }\r\n         }\r\n      }\r\n\r\n      if (targetType !== null && targetType === 'object') { return this.#updateTypes.attribute; }\r\n\r\n      if (targetType === 'function') { return this.#updateTypes.function; }\r\n\r\n      return this.#updateTypes.none;\r\n   }\r\n\r\n   /**\r\n    * Determines if a given element and target is already being observed.\r\n    *\r\n    * @param {HTMLElement} el - A HTMLElement.\r\n    *\r\n    * @param {import('./types').ResizeObserverData.ResizeTarget} [target] - A specific target to find.\r\n    *\r\n    * @returns {boolean} Whether the target is already being tracked for the given element.\r\n    */\r\n   #hasTarget(el, target)\r\n   {\r\n      if (target === void 0 || target === null) { return false; }\r\n\r\n      const subscribers = this.#elMap.get(el);\r\n      if (Array.isArray(subscribers))\r\n      {\r\n         return subscribers.findIndex((entry) => entry.target === target) >= 0;\r\n      }\r\n\r\n      return false;\r\n   }\r\n\r\n   /**\r\n    * Updates a subscriber target with given content width & height values. Offset width & height is calculated from\r\n    * the content values + cached styles.\r\n    *\r\n    * @param {import('./types-local').ResizeObserverSubscriber} subscriber - Internal data about subscriber.\r\n    *\r\n    * @param {number|undefined}  contentWidth - ResizeObserver `contentRect.width` value or undefined.\r\n    *\r\n    * @param {number|undefined}  contentHeight - ResizeObserver `contentRect.height` value or undefined.\r\n    */\r\n   static #updateSubscriber(subscriber, contentWidth, contentHeight)\r\n   {\r\n      const styles = subscriber.styles;\r\n\r\n      subscriber.contentWidth = contentWidth;\r\n      subscriber.contentHeight = contentHeight;\r\n\r\n      const offsetWidth = Number.isFinite(contentWidth) ? contentWidth + styles.additionalWidth : void 0;\r\n      const offsetHeight = Number.isFinite(contentHeight) ? contentHeight + styles.additionalHeight : void 0;\r\n\r\n      const target = subscriber.target;\r\n\r\n      switch (subscriber.updateType)\r\n      {\r\n         case this.#updateTypes.attribute:\r\n            target.contentWidth = contentWidth;\r\n            target.contentHeight = contentHeight;\r\n            target.offsetWidth = offsetWidth;\r\n            target.offsetHeight = offsetHeight;\r\n            break;\r\n\r\n         case this.#updateTypes.function:\r\n            target?.(offsetWidth, offsetHeight, contentWidth, contentHeight);\r\n            break;\r\n\r\n         case this.#updateTypes.resizeObserved:\r\n            target.resizeObserved?.(offsetWidth, offsetHeight, contentWidth, contentHeight);\r\n            break;\r\n\r\n         case this.#updateTypes.setContentBounds:\r\n            target.setContentBounds?.(contentWidth, contentHeight);\r\n            break;\r\n\r\n         case this.#updateTypes.setDimension:\r\n            target.setDimension?.(offsetWidth, offsetHeight);\r\n            break;\r\n\r\n         case this.#updateTypes.storeObject:\r\n            target.resizeObserved.update((object) =>\r\n            {\r\n               object.contentHeight = contentHeight;\r\n               object.contentWidth = contentWidth;\r\n               object.offsetHeight = offsetHeight;\r\n               object.offsetWidth = offsetWidth;\r\n\r\n               return object;\r\n            });\r\n            break;\r\n\r\n         case this.#updateTypes.storesObject:\r\n            target.stores.resizeObserved.update((object) =>\r\n            {\r\n               object.contentHeight = contentHeight;\r\n               object.contentWidth = contentWidth;\r\n               object.offsetHeight = offsetHeight;\r\n               object.offsetWidth = offsetWidth;\r\n\r\n               return object;\r\n            });\r\n            break;\r\n      }\r\n   }\r\n}\r\n"],"names":[],"mappings":"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"}