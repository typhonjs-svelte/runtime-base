{"version":3,"file":"index.js","sources":["../../../node_modules/@typhonjs-utils/loader-module/dist/browser/ModuleLoader.js"],"sourcesContent":["/**\r\n * Provides a custom error for Node to combine CJS and ESM module not found errors.\r\n */\r\nclass ModuleLoadError extends Error\r\n{\r\n   /**\r\n    * @param {object} options - Options object.\r\n    *\r\n    * @param {string} options.message - Error message.\r\n    *\r\n    * @param {string} options.code - Error code.\r\n    */\r\n   constructor({ message, code })\r\n   {\r\n      super(`[${code}] ${message}`);\r\n      this.name = 'ModuleLoadError';\r\n      this.code = code;\r\n   }\r\n}\n\nclass ModuleLoader\r\n{\r\n   /**\r\n    * @template M, E\r\n    *\r\n    * Loads an ES Module in the browser passing back an object containing info about the loading process.\r\n    *\r\n    * @param {object}      options - Options object.\r\n    *\r\n    * @param {string|URL}  options.modulepath - A URL to load.\r\n    *\r\n    * @param {(M) => E}    [options.resolveModule] - An optional function which resolves the import to set `instance`.\r\n    *\r\n    * @returns {Promise<ModuleLoaderObj<M, E>>} The module / instance and data about the loading process.\r\n    */\r\n   static async load({ modulepath, resolveModule = undefined })\r\n   {\r\n      if (!(modulepath instanceof URL) && typeof modulepath !== 'string')\r\n      {\r\n         throw new TypeError(`'modulepath' is not a string or URL`);\r\n      }\r\n\r\n      if (resolveModule !== undefined && typeof resolveModule !== 'function')\r\n      {\r\n         throw new TypeError(`'resolveModule' is not a function`);\r\n      }\r\n\r\n      const loadpath = modulepath instanceof URL ? modulepath.toString() : modulepath;\r\n\r\n      const type = `import-${modulepath instanceof URL ||\r\n      (typeof modulepath === 'string' && modulepath.match(/^(https?:\\/\\/|file:\\/\\/)/)) ? 'url' : 'path'}`;\r\n\r\n      try\r\n      {\r\n         const module = await import(modulepath);\r\n\r\n         const instance = resolveModule !== void 0 ? resolveModule(module) : module;\r\n\r\n         return { filepath: loadpath, instance, isESM: true, loadpath, module, modulepath, type };\r\n      }\r\n      catch (error)\r\n      {\r\n         // In case the browser version of ModuleLoader is used on Node... The CJS and ESM loaders of Node have\r\n         // different error codes. Collect both of these as one error with clear stack trace from ModuleLoader.\r\n         /* istanbul ignore next */\r\n         if (error.code === 'MODULE_NOT_FOUND' || error.code === 'ERR_MODULE_NOT_FOUND')\r\n         {\r\n            throw new ModuleLoadError({\r\n               message: `import() failed to load ${loadpath}`,\r\n               code: 'ERR_MODULE_NOT_FOUND'\r\n            });\r\n         }\r\n\r\n         throw error;\r\n      }\r\n   }\r\n}\r\n\r\n/**\r\n * @template M, E\r\n *\r\n * @typedef {object} ModuleLoaderObj The object passed back from `ModuleLoader.load`.\r\n *\r\n * @property {string}      filepath If available the file path on Node otherwise this will match `loadpath` in the\r\n * browser.\r\n *\r\n * @property {E}           instance Either the module itself or any particular export the `resolveModule` function\r\n * selects.\r\n *\r\n * @property {boolean}     isESM Indicates if the import was an ES Module.\r\n *\r\n * @property {string}      loadpath A string representation of the module path being loaded.\r\n *\r\n * @property {M}           module The direct module import.\r\n *\r\n * @property {string|URL}  modulepath The initial string or URL sent to ModuleLoader.\r\n *\r\n * @property {(\r\n *    'import-module' |\r\n *    'import-path' |\r\n *    'import-url' |\r\n *    'require-module' |\r\n *    'require-path' |\r\n *    'require-url'\r\n * )} type The type and how the module was loaded.\r\n */\n\nexport { ModuleLoadError, ModuleLoader };\n//# sourceMappingURL=ModuleLoader.js.map\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA,MAAM,eAAe,SAAS,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE;AAChC,GAAG;AACH,MAAM,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACpC,MAAM,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;AACpC,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACvB,GAAG,CAAC;AACJ;;AAEA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,aAAa,IAAI,CAAC,EAAE,UAAU,EAAE,aAAa,GAAG,SAAS,EAAE;AAC9D,GAAG;AACH,MAAM,IAAI,EAAE,UAAU,YAAY,GAAG,CAAC,IAAI,OAAO,UAAU,KAAK,QAAQ;AACxE,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,mCAAmC,CAAC,CAAC,CAAC;AACpE,MAAM,CAAC;AACP;AACA,MAAM,IAAI,aAAa,KAAK,SAAS,IAAI,OAAO,aAAa,KAAK,UAAU;AAC5E,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC;AAClE,MAAM,CAAC;AACP;AACA,MAAM,MAAM,QAAQ,GAAG,UAAU,YAAY,GAAG,GAAG,UAAU,CAAC,QAAQ,EAAE,GAAG,UAAU,CAAC;AACtF;AACA,MAAM,MAAM,IAAI,GAAG,CAAC,OAAO,EAAE,UAAU,YAAY,GAAG;AACtD,OAAO,OAAO,UAAU,KAAK,QAAQ,IAAI,UAAU,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC;AAC1G;AACA,MAAM;AACN,MAAM;AACN,SAAS,MAAM,MAAM,GAAG,MAAM,OAAO,UAAU,CAAC,CAAC;AACjD;AACA,SAAS,MAAM,QAAQ,GAAG,aAAa,KAAK,KAAK,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;AACpF;AACA,SAAS,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;AAClG,MAAM,CAAC;AACP,MAAM,OAAO,KAAK;AAClB,MAAM;AACN;AACA;AACA;AACA,SAAS,IAAI,KAAK,CAAC,IAAI,KAAK,kBAAkB,IAAI,KAAK,CAAC,IAAI,KAAK,sBAAsB;AACvF,SAAS;AACT,YAAY,MAAM,IAAI,eAAe,CAAC;AACtC,eAAe,OAAO,EAAE,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;AAC7D,eAAe,IAAI,EAAE,sBAAsB;AAC3C,aAAa,CAAC,CAAC;AACf,SAAS,CAAC;AACV;AACA,SAAS,MAAM,KAAK,CAAC;AACrB,MAAM,CAAC;AACP,GAAG,CAAC;AACJ;;;;","x_google_ignoreList":[0]}