{"version":3,"file":"index.js","sources":["../../../src/math/physics/TJSVelocityTrack.js"],"sourcesContent":["import { lerp }   from '#runtime/math/interpolate';\n\n/**\n * Provides a way to calculate velocity via effectively creating a \"complementary filter\".\n *\n * `velQuick` and `velSmooth` separately accumulate over time. `velInstant` and `velUsed` do not accumulate and are\n * discarded each update. `velQuick` is responsive, but noisy. `velSmooth` is laggy but eventually more accurate. By\n * tracking them separately the used result can be responsive in the short term and accurate in the long term.\n */\nexport class TJSVelocityTrack\n{\n   /** @type {number} */\n   #lastSampleTime;\n\n   /**\n    * Tracks the last sample point.\n    *\n    * @type {{x: number, y: number, z: number}}\n    */\n   #lastSamplePoint = { x: 0, y: 0, z: 0 };\n\n   /**\n    * Defines the settle time in milliseconds that resets any tracked velocity state.\n    *\n    * @type {number}\n    */\n   #resetDeltaTime;\n\n   /**\n    * Stores the scaling conversion for used velocity calculation. By default, this is 1000 which converts the velocity\n    * calculation to velocity per second. Set to `1` for instance for velocity per millisecond.\n    *\n    * @type {number}\n    */\n   #scaleTime;\n\n   /**\n    * Stores the instant velocity between current and last sample point.\n    *\n    * @type {{x: number, y: number, z: number}}\n    */\n   #velInstant = { x: 0, y: 0, z: 0 };\n\n   /**\n    * Stores the `quick` running calculated velocity.\n    *\n    * @type {{x: number, y: number, z: number}}\n    */\n   #velQuick = { x: 0, y: 0, z: 0 };\n\n   /**\n    * Stores the `smooth` running calculated velocity.\n    *\n    * @type {{x: number, y: number, z: number}}\n    */\n   #velSmooth = { x: 0, y: 0, z: 0 };\n\n   /**\n    * Stores the mix between `quick` and `smooth` running velocity.\n    *\n    * @type {{x: number, y: number, z: number}}\n    */\n   #velUsed = { x: 0, y: 0, z: 0 };\n\n   /**\n    * Creates a velocity tracker instance.\n    *\n    * @param {object}   [opts] - Optional parameters.\n    *\n    * @param {number}   [opts.resetDeltaTime=50] - Delta time in milliseconds that resets velocity tracking.\n    *\n    * @param {number}   [opts.scaleTime=1000] - Scales velocity calculation to new time frame. 1000 is velocity per\n    *                                           second.\n    */\n   constructor({ resetDeltaTime = 50, scaleTime = 1000 } = {})\n   {\n      this.resetDeltaTime = resetDeltaTime;\n      this.scaleTime = scaleTime;\n\n      Object.seal(this.#velUsed);\n   }\n\n   /**\n    * @returns {number} Gets `resetDeltaTime`.\n    */\n   get resetDeltaTime() { return this.#resetDeltaTime; }\n\n   /**\n    * @returns {number} Gets `scaleTime`.\n    */\n   get scaleTime() { return this.#scaleTime; }\n\n   /**\n    * Sets `resetDeltaTime`.\n    *\n    * @param {number}   resetDeltaTime - Delta time in milliseconds that resets velocity tracking.\n    */\n   set resetDeltaTime(resetDeltaTime)\n   {\n      if (!Number.isFinite(resetDeltaTime) || resetDeltaTime < 0)\n      {\n         throw new TypeError(`'resetDeltaTime' is not a positive finite number.`);\n      }\n\n      this.#resetDeltaTime = resetDeltaTime;\n   }\n\n   /**\n    * Sets `scaleTime`.\n    *\n    * @param {number}   scaleTime - Scales velocity calculation to new time frame. 1000 is velocity per second.\n    */\n   set scaleTime(scaleTime)\n   {\n      if (!Number.isFinite(scaleTime) || scaleTime < 0)\n      {\n         throw new TypeError(`'scaleTime' is not a positive finite number.`);\n      }\n\n      this.#scaleTime = scaleTime;\n   }\n\n   /**\n    * Resets velocity tracking data.\n    *\n    * @param {number}   [x=0] - 'X' value to set to last sample point.\n    *\n    * @param {number}   [y=0] - 'Y' value to set to last sample point.\n    *\n    * @param {number}   [z=0] - 'Z' value to set to last sample point.\n    *\n    * @param {number}   [sampleTime=performance.now()] - A sample time in milliseconds resolution.\n    */\n   reset(x = 0, y = 0, z = 0, sampleTime = performance.now())\n   {\n      if (!Number.isFinite(x)) { throw new TypeError(`'x' is not a finite number.`); }\n      if (!Number.isFinite(y)) { throw new TypeError(`'y' is not a finite number.`); }\n      if (!Number.isFinite(z)) { throw new TypeError(`'z' is not a finite number.`); }\n      if (!Number.isFinite(sampleTime)) { throw new TypeError(`'sampleTime' is not a finite number.`); }\n\n      // Reset velocity tracking variables.\n      this.#lastSampleTime = sampleTime;\n\n      this.#lastSamplePoint.x = x;\n      this.#lastSamplePoint.y = y;\n      this.#lastSamplePoint.z = z;\n\n      this.#velInstant.x = this.#velQuick.x = this.#velSmooth.x = this.#velUsed.x = 0;\n      this.#velInstant.y = this.#velQuick.y = this.#velSmooth.y = this.#velUsed.y = 0;\n      this.#velInstant.z = this.#velQuick.z = this.#velSmooth.z = this.#velUsed.z = 0;\n   }\n\n   /**\n    * Runs ongoing velocity calculation of x / y / z given a sample time.\n    *\n    * @param {number|undefined}  x - New sample X\n    *\n    * @param {number|undefined}  y - New sample Y\n    *\n    * @param {number|undefined}  z - New sample Z\n    *\n    * @param {number}            [sampleTime=performance.now()] - An optional specific time w/ millisecond resolution.\n    *\n    * @returns {{x: number, y: number, z: number}} current velocity.\n    */\n   update(x = void 0, y = void 0, z = void 0, sampleTime = performance.now())\n   {\n      if (!Number.isFinite(sampleTime)) { throw new TypeError(`'sampleTime' is not a finite number.`); }\n\n      const deltaTime = sampleTime - this.#lastSampleTime + Number.EPSILON;\n      this.#lastSampleTime = sampleTime;\n\n      // Reset velocity tracking if the delta time is greater than `resetDeltaTime`.\n      if (deltaTime > this.#resetDeltaTime)\n      {\n         this.reset(x, y, z, sampleTime);\n         return this.#velUsed;\n      }\n\n      if (Number.isFinite(x))\n      {\n         this.#velInstant.x = (x - this.#lastSamplePoint.x) / deltaTime;\n\n         this.#lastSamplePoint.x = x;\n\n         this.#velQuick.x = lerp(this.#velQuick.x, this.#velInstant.x, 0.1);\n         this.#velSmooth.x = lerp(this.#velSmooth.x, this.#velInstant.x, 0.01);\n         this.#velUsed.x = lerp(this.#velSmooth.x, this.#velQuick.x, 0.5) * this.#scaleTime;\n      }\n\n      if (Number.isFinite(y))\n      {\n         this.#velInstant.y = (y - this.#lastSamplePoint.y) / deltaTime;\n\n         this.#lastSamplePoint.y = y;\n\n         this.#velQuick.y = lerp(this.#velQuick.y, this.#velInstant.y, 0.1);\n         this.#velSmooth.y = lerp(this.#velSmooth.y, this.#velInstant.y, 0.01);\n\n         this.#velUsed.y = lerp(this.#velSmooth.y, this.#velQuick.y, 0.5) * this.#scaleTime;\n      }\n\n      if (Number.isFinite(z))\n      {\n         this.#velInstant.z = (z - this.#lastSamplePoint.z) / deltaTime;\n\n         this.#lastSamplePoint.z = z;\n\n         this.#velQuick.z = lerp(this.#velQuick.z, this.#velInstant.z, 0.1);\n         this.#velSmooth.z = lerp(this.#velSmooth.z, this.#velInstant.z, 0.01);\n         this.#velUsed.z = lerp(this.#velSmooth.z, this.#velQuick.z, 0.5) * this.#scaleTime;\n      }\n\n      return this.#velUsed;\n   }\n\n   /**\n    * Gets the current velocity tracking data.\n    *\n    * @returns {{x: number, y: number, z: number}} Velocity tracking data.\n    */\n   get()\n   {\n      this.#velUsed.x = lerp(this.#velSmooth.x, this.#velQuick.x, 0.5) * this.#scaleTime;\n      this.#velUsed.y = lerp(this.#velSmooth.y, this.#velQuick.y, 0.5) * this.#scaleTime;\n      this.#velUsed.z = lerp(this.#velSmooth.z, this.#velQuick.z, 0.5) * this.#scaleTime;\n\n      return this.#velUsed;\n   }\n}\n"],"names":[],"mappings":"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"}