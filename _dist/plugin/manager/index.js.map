{"version":3,"file":"index.js","sources":["../../../node_modules/@typhonjs-plugin/manager/dist/eventbus/index.js","../../../node_modules/@typhonjs-plugin/manager/dist/manager/browser/index.js"],"sourcesContent":["/**\r\n * Provides common utility functions for Eventbus / EventbusProxy.\r\n */\r\nclass EventbusUtils\r\n{\r\n   /**\r\n    * Used in instanceof checks to determine if callbacks are async.\r\n    *\r\n    * @type {Function}\r\n    */\r\n   static AsyncFunction = /* c8 ignore start */async function() {}.constructor;/* c8 ignore stop */\r\n\r\n   /**\r\n    * Used in instanceof checks to determine if callbacks are async.\r\n    *\r\n    * @type {Function}\r\n    */\r\n   static AsyncGeneratorFunction = /* c8 ignore start */async function *() {}.constructor;/* c8 ignore stop */\r\n\r\n   /**\r\n    * Regular expression used to split event strings.\r\n    *\r\n    * @type {RegExp}\r\n    */\r\n   static eventSplitter = /\\s+/;\r\n\r\n   /**\r\n    * Iterates over the standard `event, callback` (as well as the fancy multiple space-separated events `\"change blur\",\r\n    * callback` and event maps `{event: callback}`).\r\n    *\r\n    * @template T\r\n    *\r\n    * @param {Function}       iteratee - Event operation to invoke.\r\n    *\r\n    * @param {T}              events - EventbusEvents object\r\n    *\r\n    * @param {string | import('.').EventMap}  name - A single event name, compound event names, or a hash of event\r\n    *        names.\r\n    *\r\n    * @param {Function}       callback - Event callback function\r\n    *\r\n    * @param {object}         opts - Optional parameters\r\n    *\r\n    * @returns {T} EventbusEvents object or processed data.\r\n    */\r\n   static eventsAPI(iteratee, events, name, callback, opts)\r\n   {\r\n      let i = 0, names;\r\n      if (name && typeof name === 'object')\r\n      {\r\n         // Handle event maps.\r\n         if (callback !== void 0 && 'context' in opts && opts.context === void 0) { opts.context = callback; }\r\n         for (names = EventbusUtils.objectKeys(name); i < names.length; i++)\r\n         {\r\n            events = EventbusUtils.eventsAPI(iteratee, events, names[i], name[names[i]], opts);\r\n         }\r\n      }\r\n      else if (name && typeof name === 'string' && EventbusUtils.eventSplitter.test(name))\r\n      {\r\n         // Handle space-separated event names by delegating them individually.\r\n         for (names = name.split(EventbusUtils.eventSplitter); i < names.length; i++)\r\n         {\r\n            events = iteratee(events, names[i], callback, opts);\r\n         }\r\n      }\r\n      else\r\n      {\r\n         // Finally, standard events.\r\n         events = iteratee(events, name, callback, opts);\r\n      }\r\n      return events;\r\n   }\r\n\r\n   /**\r\n    * Returns a string to output for error messages including any eventbus name.\r\n    *\r\n    * @param {import('.').Eventbus|import('.').EventbusProxy|import('.').EventbusSecure} eventbus - The eventbus to\r\n    *        format.\r\n    *\r\n    * @returns {string} A string representing the eventbus.\r\n    */\r\n   static getErrorName(eventbus)\r\n   {\r\n      const name = eventbus.name;\r\n      return name !== '' ? `[${name}] ` : '';\r\n   }\r\n\r\n   /**\r\n    * The reducing API that returns the options for an event. Any guarded event sets guard and the higher type is set.\r\n    *\r\n    * @param {object}   output - The output object.\r\n    *\r\n    * @param {string}   name - Event name\r\n    *\r\n    * @param {Function} callback - Event callback\r\n    *\r\n    * @param {object}   opts - Optional parameters\r\n    *\r\n    * @returns {object} The output object.\r\n    */\r\n   static getOptions(output, name, callback, opts)\r\n   {\r\n      const events = opts.events;\r\n\r\n      if (events)\r\n      {\r\n         const handlers = events[name];\r\n\r\n         if (Array.isArray(handlers))\r\n         {\r\n            for (const handler of handlers)\r\n            {\r\n               if (handler.options.guard)\r\n               {\r\n                  output.guard = true;\r\n               }\r\n\r\n               if (handler.options.type > output.type)\r\n               {\r\n                  output.type = handler.options.type;\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      return output;\r\n   }\r\n\r\n   /**\r\n    * Provides  protected Object.keys functionality.\r\n    *\r\n    * @param {object}   object - Object to retrieve keys.\r\n    *\r\n    * @returns {string[]} Keys of object if any.\r\n    */\r\n   static objectKeys(object)\r\n   {\r\n      return object === null || typeof object !== 'object' ? [] : Object.keys(object);\r\n   }\r\n\r\n   /**\r\n    * Reduces the event callbacks into a map of `{event: beforeWrapper}`. `after` unbinds the `beforeWrapper` after\r\n    * it has been called the number of times specified by options.count.\r\n    *\r\n    * @param {import('.').EventbusEvents}   map - EventbusEvents object\r\n    *\r\n    * @param {string}   name - Event name\r\n    *\r\n    * @param {Function} callback - Event callback\r\n    *\r\n    * @param {object}   opts - Function to invoke after event has been triggered once; `off()`\r\n    *\r\n    * @returns {import('.').EventbusEvents} The EventbusEvents object.\r\n    */\r\n   static beforeMap(map, name, callback, opts)\r\n   {\r\n      const after = opts.after;\r\n      const count = opts.count + 1;\r\n\r\n      if (callback)\r\n      {\r\n         // @ts-ignore\r\n         const beforeWrapper = map[name] = EventbusUtils.#s_BEFORE(count, function()\r\n         {\r\n            return callback.apply(this, arguments);\r\n         }, () => { after(name, beforeWrapper); });\r\n\r\n         // @ts-ignore\r\n         beforeWrapper._callback = callback;\r\n      }\r\n      return map;\r\n   }\r\n\r\n   /**\r\n    * Creates a function that invokes `before`, with the `this` binding and arguments of the created function, while\r\n    * it's called less than `count` times. Subsequent calls to the created function return the result of the last `before`\r\n    * invocation.\r\n    *\r\n    * `after` is invoked after the count is reduced.\r\n    *\r\n    * @param {number}   count - The number of calls at which `before` is no longer invoked and then `after` is invoked.\r\n    *\r\n    * @param {Function} before - The function to restrict.\r\n    *\r\n    * @param {Function} after - The function to invoke after count number of calls.\r\n    *\r\n    * @returns {Function} Returns the new restricted function.\r\n    */\r\n   static #s_BEFORE(count, before, after)\r\n   {\r\n      let result;\r\n\r\n      return function(...args)\r\n      {\r\n         if (--count > 0) { result = before.apply(this, args); }\r\n\r\n         if (count <= 1)\r\n         {\r\n            if (after) { after.apply(this, args); }\r\n            after = void 0;\r\n            before = void 0;\r\n         }\r\n\r\n         return result;\r\n      };\r\n   }\r\n}\n\n/**\r\n * Provides the ability to bind and trigger custom named events. Bound callback functions may be triggered\r\n * asynchronously or synchronously returning results.\r\n */\r\nclass Eventbus\r\n{\r\n   /**\r\n    * Stores the name of this eventbus.\r\n    *\r\n    * @type {string}\r\n    */\r\n   #name = '';\r\n\r\n   /**\r\n    * Stores the events map for associated events and callback / context data.\r\n    *\r\n    * @type {import('.').EventbusEvents}\r\n    */\r\n   #events;\r\n\r\n   /**\r\n    * Provides a constructor which optionally takes the eventbus name.\r\n    *\r\n    * @param {string}   name - Optional eventbus name.\r\n    */\r\n   constructor(name = '')\r\n   {\r\n      if (typeof name !== 'string') { throw new TypeError(`'name' is not a string`); }\r\n\r\n      this.#name = name;\r\n\r\n      /**\r\n       * Stores the Listening instances for this context.\r\n       *\r\n       * @type {{ [key: string]: object }}\r\n       * @private\r\n       */\r\n      this._listeners = void 0;\r\n\r\n      /**\r\n       * A unique ID set when listened to.\r\n       *\r\n       * @type {string}\r\n       * @private\r\n       */\r\n      this._listenId = void 0;\r\n\r\n      /**\r\n       * Stores the Listening instances for other contexts.\r\n       *\r\n       * @type {{ [key: string]: object }}\r\n       * @private\r\n       */\r\n      this._listeningTo = void 0;\r\n   }\r\n\r\n   /**\r\n    * Just like `on`, but causes the bound callback to fire several times up to the count specified before being\r\n    * removed. When multiple events are passed in using the space separated syntax, the event\r\n    * will fire count times for every event you passed in, not once for a combination of all events.\r\n    *\r\n    * @param {number}            count - Number of times the function will fire before being removed.\r\n    *\r\n    * @param {string|import('.').EventMap}   name - Event name(s) or event map.\r\n    *\r\n    * @param {Function|object}   callback - Event callback function or context for event map.\r\n    *\r\n    * @param {object}            [context] - Event context\r\n    *\r\n    * @param {import('.').EventOptions | import('.').EventOptionsOut} [options] - Event registration options.\r\n    *\r\n    * @returns {Eventbus} This Eventbus instance.\r\n    */\r\n   before(count, name, callback, context = void 0, options = {})\r\n   {\r\n      if (!Number.isInteger(count)) { throw new TypeError(`'count' is not an integer`); }\r\n\r\n      const data = {};\r\n      if (this.isGuarded(name, data))\r\n      {\r\n         console.warn(`@typhonjs-plugin/eventbus ${EventbusUtils.getErrorName(this)}` +\r\n          `- before() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\r\n         return this;\r\n      }\r\n\r\n      // Map the event into a `{event: beforeWrapper}` object.\r\n      const events = EventbusUtils.eventsAPI(EventbusUtils.beforeMap, {}, name, callback,\r\n       { count, after: this.off.bind(this) });\r\n\r\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\r\n\r\n      return this.on(events, callback, context, options);\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for all stored events yielding an array with event name, callback function, and event context.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\r\n    *\r\n    * @returns {Generator<[string, Function, object, import('.').EventOptionsOut], void, unknown>} Generator\r\n    * @yields {[string, Function, object, import('.').EventOptionsOut]}\r\n    */\r\n   *entries(regex = void 0)\r\n   {\r\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#events) { return; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const name in this.#events)\r\n         {\r\n            if (regex.test(name))\r\n            {\r\n               for (const event of this.#events[name])\r\n               {\r\n                  yield [name, event.callback, event.context, JSON.parse(JSON.stringify(event.options))];\r\n               }\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name in this.#events)\r\n         {\r\n            for (const event of this.#events[name])\r\n            {\r\n               yield [name, event.callback, event.context, JSON.parse(JSON.stringify(event.options))];\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns the current event count.\r\n    *\r\n    * @returns {number} Returns the current event count.\r\n    */\r\n   get eventCount()\r\n   {\r\n      if (!this.#events) { return 0; }\r\n\r\n      return Object.keys(this.#events).length;\r\n   }\r\n\r\n   /**\r\n    * Returns the current callback count.\r\n    *\r\n    * @returns {number} The current callback count.\r\n    */\r\n   get callbackCount()\r\n   {\r\n      if (!this.#events) { return 0; }\r\n\r\n      let count = 0;\r\n\r\n      for (const name in this.#events) { count += this.#events[name].length; }\r\n\r\n      return count;\r\n   }\r\n\r\n   /**\r\n    * Returns the options of an event name.\r\n    *\r\n    * @param {string}   name - Event name(s) to verify.\r\n    *\r\n    * @returns {import('.').EventOptionsOut} The event options.\r\n    */\r\n   getOptions(name)\r\n   {\r\n      const result = EventbusUtils.eventsAPI(EventbusUtils.getOptions, { guard: false, type: 0 }, name, void 0,\r\n       { events: this.#events });\r\n\r\n      let type = void 0;\r\n\r\n      switch (result.type)\r\n      {\r\n         case 1:\r\n            type = 'sync';\r\n            break;\r\n         case 2:\r\n            type = 'async';\r\n            break;\r\n      }\r\n\r\n      return { guard: result.guard, type };\r\n   }\r\n\r\n   /**\r\n    * Returns the trigger type of event name.\r\n    * Note: if trigger type is not set then undefined is returned for type otherwise 'sync' or 'async' is returned.\r\n    *\r\n    * @param {string}   name - Event name(s) to verify.\r\n    *\r\n    * @returns {string|undefined} The trigger type.\r\n    */\r\n   getType(name)\r\n   {\r\n      const result = EventbusUtils.eventsAPI(Eventbus.#s_GET_TYPE, { type: 0 }, name, void 0, { events: this.#events });\r\n\r\n      switch (result.type)\r\n      {\r\n         case 1:\r\n            return 'sync';\r\n         case 2:\r\n            return 'async';\r\n         default:\r\n            return void 0;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns whether an event name is guarded.\r\n    *\r\n    * @param {string|import('.').EventMap}   name - Event name(s) or event map to verify.\r\n    *\r\n    * @param {object}         [data] - Stores the output of which names are guarded.\r\n    *\r\n    * @returns {boolean} Whether the given event name is guarded.\r\n    */\r\n   isGuarded(name, data = {})\r\n   {\r\n      data.names = [];\r\n      data.guarded = false;\r\n\r\n      const result = EventbusUtils.eventsAPI(Eventbus.#s_IS_GUARDED, data, name, void 0, { events: this.#events });\r\n\r\n      return result.guarded;\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for the event names / keys of registered event listeners.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\r\n    *\r\n    * @yields {string}\r\n    */\r\n   *keys(regex = void 0)\r\n   {\r\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#events) { return; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const name in this.#events)\r\n         {\r\n            if (regex.test(name))\r\n            {\r\n               yield name;\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name in this.#events)\r\n         {\r\n            yield name;\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for the event names / keys of registered event listeners along with event options.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\r\n    *\r\n    * @returns {Generator<[string, import('.').EventOptionsOut], void, unknown>} Generator\r\n    * @yields {[string, import('.').EventOptionsOut]}\r\n    */\r\n   *keysWithOptions(regex = void 0)\r\n   {\r\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#events) { return; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const name in this.#events)\r\n         {\r\n            if (regex.test(name))\r\n            {\r\n               yield [name, this.getOptions(name)];\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name in this.#events)\r\n         {\r\n            yield [name, this.getOptions(name)];\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns the current eventbus name.\r\n    *\r\n    * @returns {string} The current eventbus name.\r\n    */\r\n   get name()\r\n   {\r\n      return this.#name;\r\n   }\r\n\r\n   /**\r\n    * Tell an object to listen to a particular event on another object. The advantage of using this form, instead of\r\n    * other.on(event, callback, object), is that listenTo allows the object to keep track of the events, and they can\r\n    * be removed all at once later on. The callback will always be called with object as context.\r\n    *\r\n    * @example\r\n    * ```js\r\n    * view.listenTo(model, 'change', view.render);\r\n    * ```\r\n    *\r\n    * @param {object}            obj - Event context\r\n    *\r\n    * @param {string|import('.').EventMap}   name - Event name(s) or event map.\r\n    *\r\n    * @param {Function|object}   callback - Event callback function or context for event map.\r\n    *\r\n    * @returns {Eventbus} This Eventbus instance.\r\n    */\r\n   listenTo(obj, name, callback)\r\n   {\r\n      if (!obj) { return this; }\r\n\r\n      const data = {};\r\n      if (Eventbus.#s_TRY_CATCH_IS_GUARDED(obj, name, data))\r\n      {\r\n         console.warn(`@typhonjs-plugin/eventbus ${EventbusUtils.getErrorName(this)}` +\r\n          `- listenTo() failed as event name(s) are guarded for target object: ${JSON.stringify(data.names)}`);\r\n         return this;\r\n      }\r\n\r\n      const id = obj._listenId || (obj._listenId = Eventbus.#s_UNIQUE_ID('l'));\r\n      const listeningTo = this._listeningTo || (this._listeningTo = {});\r\n      let listening = Eventbus.#listening = listeningTo[id];\r\n\r\n      // This object is not listening to any other events on `obj` yet.\r\n      // Set up the necessary references to track the listening callbacks.\r\n      if (!listening)\r\n      {\r\n         this._listenId || (this._listenId = Eventbus.#s_UNIQUE_ID('l'));\r\n         listening = Eventbus.#listening = listeningTo[id] = new Eventbus.#Listening(this, obj);\r\n      }\r\n\r\n      // Bind callbacks on obj.\r\n      const error = Eventbus.#s_TRY_CATCH_ON(obj, name, callback, this);\r\n      Eventbus.#listening = void 0;\r\n\r\n      if (error) { throw error; }\r\n\r\n      // If the target obj is not an Eventbus, track events manually.\r\n      if (listening.interop) { listening.on(name, callback); }\r\n\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Just like `listenTo`, but causes the bound callback to fire count times before being removed.\r\n    *\r\n    * @param {number}            count - Number of times the function will fire before being removed.\r\n    *\r\n    * @param {object}            obj - Target event context.\r\n    *\r\n    * @param {string|import('.').EventMap}   name - Event name(s) or event map.\r\n    *\r\n    * @param {Function|object}   callback - Event callback function or context for event map.\r\n    *\r\n    * @returns {Eventbus} This Eventbus instance.\r\n    */\r\n   listenToBefore(count, obj, name, callback)\r\n   {\r\n      if (!Number.isInteger(count)) { throw new TypeError(`'count' is not an integer`); }\r\n\r\n      // Map the event into a `{event: beforeWrapper}` object.\r\n      const events = EventbusUtils.eventsAPI(EventbusUtils.beforeMap, {}, name, callback, {\r\n         count,\r\n         after: this.stopListening.bind(this, obj)\r\n      });\r\n\r\n      return this.listenTo(obj, events);\r\n   }\r\n\r\n   /**\r\n    * Just like `listenTo`, but causes the bound callback to fire only once before being removed.\r\n    *\r\n    * @param {object}            obj - Target event context\r\n    *\r\n    * @param {string|import('.').EventMap}     name - Event name(s) or event map.\r\n    *\r\n    * @param {Function|object}   callback - Event callback function or context for event map.\r\n    *\r\n    * @returns {Eventbus} This Eventbus instance.\r\n    */\r\n   listenToOnce(obj, name, callback)\r\n   {\r\n      // Map the event into a `{event: beforeWrapper}` object.\r\n      const events = EventbusUtils.eventsAPI(EventbusUtils.beforeMap, {}, name, callback, {\r\n         count: 1,\r\n         after: this.stopListening.bind(this, obj)\r\n      });\r\n\r\n      return this.listenTo(obj, events);\r\n   }\r\n\r\n   /**\r\n    * Remove a previously-bound callback function from an object. If no context is specified, all the versions of\r\n    * the callback with different contexts will be removed. If no callback is specified, all callbacks for the event\r\n    * will be removed. If no event is specified, callbacks for all events will be removed.\r\n    *\r\n    * Note that calling model.off(), for example, will indeed remove all events on the model.\r\n    *\r\n    * @example\r\n    * ```js\r\n    * // Removes just the `onChange` callback.\r\n    * object.off('change', onChange);\r\n    *\r\n    * // Removes all 'change' callbacks.\r\n    * object.off('change');\r\n    *\r\n    * // Removes the `onChange` callback for all events.\r\n    * object.off(null, onChange);\r\n    *\r\n    * // Removes all callbacks for `context` for all events.\r\n    * object.off(null, null, context);\r\n    *\r\n    * // Removes all callbacks on `object`.\r\n    * object.off();\r\n    * ```\r\n    *\r\n    * @param {string|import('.').EventMap}   [name] - Event name(s) or event map.\r\n    *\r\n    * @param {Function}       [callback] - Event callback function\r\n    *\r\n    * @param {object}         [context] - Event context\r\n    *\r\n    * @returns {Eventbus} This Eventbus instance.\r\n    */\r\n   off(name, callback = void 0, context = void 0)\r\n   {\r\n      if (!this.#events) { return this; }\r\n\r\n      this.#events = EventbusUtils.eventsAPI(Eventbus.#s_OFF_API, this.#events, name, callback,\r\n       { context, listeners: this._listeners });\r\n\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a\r\n    * large number of different events on a page, the convention is to use colons to namespace them: 'poll:start', or\r\n    * 'change:selection'.\r\n    *\r\n    * To supply a context value for this when the callback is invoked, pass the optional last argument:\r\n    * `model.on('change', this.render, this)` or `model.on({change: this.render}, this)`.\r\n    *\r\n    * @example\r\n    * ```js\r\n    * // The event string may also be a space-delimited list of several events...\r\n    * book.on('change:title change:author', ...);\r\n    * ```\r\n    *\r\n    * @example\r\n    * ```js\r\n    * Callbacks bound to the special 'all' event will be triggered when any event occurs, and are passed the name of\r\n    * the event as the first argument. For example, to proxy all events from one object to another:\r\n    * proxy.on('all', (eventName) => {\r\n    *    object.trigger(eventName);\r\n    * });\r\n    * ```\r\n    *\r\n    * @example\r\n    * ```js\r\n    * All event methods also support an event map syntax, as an alternative to positional arguments:\r\n    * book.on({\r\n    *    'change:author': authorPane.update,\r\n    *    'change:title change:subtitle': titleView.update,\r\n    *    'destroy': bookView.remove\r\n    * });\r\n    * ```\r\n    *\r\n    * @param {string|import('.').EventMap}   name - Event name(s) or event map.\r\n    *\r\n    * @param {Function|object}   callback - Event callback function or context for event map.\r\n    *\r\n    * @param {object}            [context] - Event context\r\n    *\r\n    * @param {import('.').EventOptions | import('.').EventOptionsOut}         [options] - Event registration options.\r\n    *\r\n    * @returns {Eventbus} This Eventbus instance.\r\n    */\r\n   on(name, callback, context = void 0, options = {})\r\n   {\r\n      if (options == null || options.constructor !== Object)   // eslint-disable-line eqeqeq\r\n      {\r\n         throw new TypeError(`'options' must be an object literal.`);\r\n      }\r\n\r\n      const data = {};\r\n      if (this.isGuarded(name, data))\r\n      {\r\n         console.warn(`@typhonjs-plugin/eventbus ${EventbusUtils.getErrorName(this)}` +\r\n          `- on() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\r\n         return this;\r\n      }\r\n\r\n      this.#events = EventbusUtils.eventsAPI(Eventbus.#s_ON_API, this.#events || {}, name, callback, {\r\n         context,\r\n         ctx: this,\r\n         options,\r\n         listening: Eventbus.#listening\r\n      });\r\n\r\n      if (Eventbus.#listening)\r\n      {\r\n         const listeners = this._listeners || (this._listeners = {});\r\n         listeners[Eventbus.#listening.id] = Eventbus.#listening;\r\n\r\n         // Allow the listening to use a counter, instead of tracking callbacks for library interop.\r\n         Eventbus.#listening.interop = false;\r\n      }\r\n\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Just like `on`, but causes the bound callback to fire only once before being removed. Handy for saying \"the next\r\n    * time that X happens, do this\". When multiple events are passed in using the space separated syntax, the event\r\n    * will fire once for every event you passed in, not once for a combination of all events\r\n    *\r\n    * @param {string|import('.').EventMap}   name - Event name(s) or event map.\r\n    *\r\n    * @param {Function|object}   callback - Event callback function or context for event map.\r\n    *\r\n    * @param {object}            [context] - Event context.\r\n    *\r\n    * @param {import('.').EventOptions | import('.').EventOptionsOut}         [options] - Event registration options.\r\n    *\r\n    * @returns {Eventbus} This Eventbus instance.\r\n    */\r\n   once(name, callback, context = void 0, options = {})\r\n   {\r\n      const data = {};\r\n      if (this.isGuarded(name, data))\r\n      {\r\n         console.warn(`@typhonjs-plugin/eventbus ${EventbusUtils.getErrorName(this)}` +\r\n          `- once() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\r\n         return this;\r\n      }\r\n\r\n      // Map the event into a `{event: beforeWrapper}` object.\r\n      const events = EventbusUtils.eventsAPI(EventbusUtils.beforeMap, {}, name, callback,\r\n       { count: 1, after: this.off.bind(this) });\r\n\r\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\r\n\r\n      return this.on(events, callback, context, options);\r\n   }\r\n\r\n   /**\r\n    * Tell an object to stop listening to events. Either call stopListening with no arguments to have the object remove\r\n    * all of its registered callbacks ... or be more precise by telling it to remove just the events it's listening to\r\n    * on a specific object, or a specific event, or just a specific callback.\r\n    *\r\n    * @example\r\n    * ```js\r\n    * view.stopListening();\r\n    *\r\n    * view.stopListening(model);\r\n    * ```\r\n    *\r\n    * @param {object}   obj - Event context\r\n    *\r\n    * @param {string}   [name] - Event name(s)\r\n    *\r\n    * @param {Function} [callback] - Event callback function\r\n    *\r\n    * @returns {Eventbus} This Eventbus instance.\r\n    */\r\n   stopListening(obj, name = void 0, callback = void 0)\r\n   {\r\n      const listeningTo = this._listeningTo;\r\n      if (!listeningTo) { return this; }\r\n\r\n      const ids = obj ? [obj._listenId] : EventbusUtils.objectKeys(listeningTo);\r\n\r\n      for (let i = 0; i < ids.length; i++)\r\n      {\r\n         const listening = listeningTo[ids[i]];\r\n\r\n         // If listening doesn't exist, this object is not currently listening to obj. Break out early.\r\n         if (!listening) { break; }\r\n\r\n         listening.obj.off(name, callback, this);\r\n\r\n         if (listening.interop) { listening.off(name, callback); }\r\n      }\r\n\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\r\n    * passed along to the event callbacks.\r\n    *\r\n    * @param {string}   name - Event name(s)\r\n    *\r\n    * @param {...*}     args - Additional arguments passed to the event function(s).\r\n    *\r\n    * @returns {Eventbus} This Eventbus instance.\r\n    */\r\n   trigger(name, ...args)\r\n   {\r\n      if (!this.#events) { return this; }\r\n\r\n      Eventbus.#s_RESULTS_TARGET_API(Eventbus.#s_TRIGGER_API, Eventbus.#s_TRIGGER_EVENTS, this.#events, name, void 0,\r\n       args);\r\n\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\r\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\r\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\r\n    *\r\n    * @param {string}   name - Event name(s)\r\n    *\r\n    * @param {...*}     args - Additional arguments passed to the event function(s).\r\n    *\r\n    * @returns {Promise<void|*|*[]>} A Promise with any results.\r\n    */\r\n   async triggerAsync(name, ...args)\r\n   {\r\n      if (!this.#events) { return void 0; }\r\n\r\n      const result = Eventbus.#s_RESULTS_TARGET_API(Eventbus.#s_TRIGGER_API, Eventbus.#s_TRIGGER_ASYNC_EVENTS,\r\n       this.#events, name, void 0, args);\r\n\r\n      // No event callbacks were triggered.\r\n      if (result === void 0) { return void 0; }\r\n\r\n      // A single Promise has been returned; just return it.\r\n      if (!Array.isArray(result)) { return result; }\r\n\r\n      // Multiple events & callbacks have been triggered so reduce the returned array of Promises and filter all\r\n      // values from each Promise result removing any undefined values.\r\n      return Promise.all(result).then((results) =>\r\n      {\r\n         let allResults = [];\r\n\r\n         for (const pResult of results)\r\n         {\r\n            if (Array.isArray(pResult))\r\n            {\r\n               allResults = allResults.concat(pResult);\r\n            }\r\n            else if (pResult !== void 0)\r\n            {\r\n               allResults.push(pResult);\r\n            }\r\n         }\r\n\r\n         return allResults.length > 1 ? allResults : allResults.length === 1 ? allResults[0] : void 0;\r\n      });\r\n   }\r\n\r\n   /**\r\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\r\n    *\r\n    * @param {string}   name - Event name(s)\r\n    *\r\n    * @param {...*}     args - Additional arguments passed to the event function(s).\r\n    *\r\n    * @returns {Eventbus} This Eventbus instance.\r\n    */\r\n   triggerDefer(name, ...args)\r\n   {\r\n      setTimeout(() => { this.trigger(name, ...args); }, 0);\r\n\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\r\n    * value or in an array and passes it back to the callee in a synchronous manner.\r\n    *\r\n    * @param {string}   name - Event name(s).\r\n    *\r\n    * @param {...*}     args - Additional arguments passed to the event function(s).\r\n    *\r\n    * @returns {void|*|*[]} The results of the event invocation.\r\n    */\r\n   triggerSync(name, ...args)\r\n   {\r\n      if (!this.#events) { return void 0; }\r\n\r\n      return Eventbus.#s_RESULTS_TARGET_API(Eventbus.#s_TRIGGER_API, Eventbus.#s_TRIGGER_SYNC_EVENTS, this.#events,\r\n       name, void 0, args);\r\n   }\r\n\r\n   // Internal static reducers and data ------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * Generate a unique integer ID (unique within the entire client session).\r\n    *\r\n    * @type {number} - unique ID counter.\r\n    */\r\n   static #idCounter = 0;\r\n\r\n   /**\r\n    * Static listening object\r\n    *\r\n    * @type {object}\r\n    */\r\n   static #listening;\r\n\r\n   /**\r\n    * A listening class that tracks and cleans up memory bindings when all callbacks have been offed.\r\n    */\r\n   static #Listening = class\r\n   {\r\n      /**\r\n       * @type {import('.').EventbusEvents|{}}\r\n       */\r\n      #events;\r\n\r\n      /**\r\n       * @type {string}\r\n       */\r\n      #id;\r\n\r\n      /**\r\n       * @type {object}\r\n       */\r\n      #listener;\r\n\r\n      /**\r\n       * @type {object}\r\n       */\r\n      #obj;\r\n\r\n      /**\r\n       * @type {boolean}\r\n       */\r\n      #interop;\r\n\r\n      /**\r\n       * Current listening count.\r\n       *\r\n       * @type {number}\r\n       */\r\n      #count = 0;\r\n\r\n      constructor(listener, obj)\r\n      {\r\n         this.#id = listener._listenId;\r\n         this.#listener = listener;\r\n         this.#obj = obj;\r\n         this.#interop = true;\r\n      }\r\n\r\n      // Cleans up memory bindings between the listener and the target of the listener.\r\n      cleanup()\r\n      {\r\n         delete this.#listener._listeningTo[this.#obj._listenId];\r\n         if (!this.#interop) { delete this.#obj._listeners[this.#id]; }\r\n      }\r\n\r\n      get id() { return this.#id; }\r\n\r\n      get interop() { return this.#interop; }\r\n\r\n      get obj() { return this.#obj; }\r\n\r\n      incrementCount() { this.#count++; }\r\n\r\n      /**\r\n       * @see {@link Eventbus#on}\r\n       *\r\n       * @param {string|import('.').EventMap}   name - Event name(s) or event map.\r\n       *\r\n       * @param {Function|object}   callback - Event callback function or context for event map.\r\n       *\r\n       * @param {object}            [context] - Event context\r\n       *\r\n       * @returns {object} This Listening instance.\r\n       */\r\n      on(name, callback, context = void 0)\r\n      {\r\n         this.#events = EventbusUtils.eventsAPI(Eventbus.#s_ON_API, this.#events || {}, name, callback,\r\n         {\r\n            context,\r\n            ctx: this,\r\n            options: {},\r\n            listening: this\r\n         });\r\n\r\n         return this;\r\n      }\r\n\r\n      /**\r\n       * Offs a callback (or several). Uses an optimized counter if the target of the listener uses Eventbus. Otherwise,\r\n       * falls back to manual tracking to support events library interop.\r\n       *\r\n       * @param {string|import('.').EventMap}   [name] - Event name(s) or event map.\r\n       *\r\n       * @param {Function|object}   [callback] - Event callback function or context for event map.\r\n       */\r\n      off(name, callback)\r\n      {\r\n         let cleanup;\r\n\r\n         if (this.#interop)\r\n         {\r\n            this.#events = EventbusUtils.eventsAPI(Eventbus.#s_OFF_API, this.#events, name, callback, {\r\n               context: void 0,\r\n               listeners: void 0\r\n            });\r\n            cleanup = !this.#events;\r\n         }\r\n         else\r\n         {\r\n            this.#count--;\r\n            cleanup = this.#count === 0;\r\n         }\r\n\r\n         if (cleanup) { this.cleanup(); }\r\n      }\r\n\r\n      /**\r\n       * Sets interop.\r\n       *\r\n       * @param {boolean} value Value to set.\r\n       */\r\n      set interop(value)\r\n      {\r\n         /* c8 ignore next 1 */\r\n         if (typeof value !== 'boolean') { throw new TypeError(`'value' is not a boolean`); }\r\n         this.#interop = value;\r\n      }\r\n   };\r\n\r\n   /**\r\n    * The reducing API that returns the trigger type for an event. The higher type is set.\r\n    *\r\n    * @param {object}   output - The output object.\r\n    *\r\n    * @param {string}   name - Event name\r\n    *\r\n    * @param {Function} callback - Event callback\r\n    *\r\n    * @param {object}   opts - Optional parameters\r\n    *\r\n    * @returns {object} The output object.\r\n    */\r\n   static #s_GET_TYPE(output, name, callback, opts)\r\n   {\r\n      const events = opts.events;\r\n\r\n      if (events)\r\n      {\r\n         const handlers = events[name];\r\n\r\n         if (Array.isArray(handlers))\r\n         {\r\n            for (const handler of handlers)\r\n            {\r\n               if (handler.options.type > output.type)\r\n               {\r\n                  output.type = handler.options.type;\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      return output;\r\n   }\r\n\r\n   /**\r\n    * The reducing API that tests if an event name is guarded. Any event data of a give event name can have the guarded\r\n    * state set. If so the event name will be added to the output names array and `output.guarded` set to true.\r\n    *\r\n    * @param {object}   output - The output object.\r\n    *\r\n    * @param {string}   name - Event name\r\n    *\r\n    * @param {Function} callback - Event callback\r\n    *\r\n    * @param {object}   opts - Optional parameters\r\n    *\r\n    * @returns {object} The output object.\r\n    */\r\n   static #s_IS_GUARDED(output, name, callback, opts)\r\n   {\r\n      const events = opts.events;\r\n\r\n      if (events)\r\n      {\r\n         const handlers = events[name];\r\n\r\n         if (Array.isArray(handlers))\r\n         {\r\n            for (const handler of handlers)\r\n            {\r\n               if (handler.options.guard)\r\n               {\r\n                  output.names.push(name);\r\n                  output.guarded = true;\r\n                  return output;\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      return output;\r\n   }\r\n\r\n   /**\r\n    * The reducing API that removes a callback from the `events` object.\r\n    *\r\n    * @param {import('.').EventbusEvents}   events - EventbusEvents object\r\n    *\r\n    * @param {string}   name - Event name\r\n    *\r\n    * @param {Function} callback - Event callback\r\n    *\r\n    * @param {object}   opts - Optional parameters\r\n    *\r\n    * @returns {void | import('.').EventbusEvents} EventbusEvents object\r\n    */\r\n   static #s_OFF_API(events, name, callback, opts)\r\n   {\r\n      /* c8 ignore next 1 */\r\n      if (!events) { return; }\r\n\r\n      const context = opts.context, listeners = opts.listeners;\r\n      let i = 0, names;\r\n\r\n      // Delete all event listeners and `drop` events.\r\n      if (!name && !context && !callback)\r\n      {\r\n         for (names = EventbusUtils.objectKeys(listeners); i < names.length; i++)\r\n         {\r\n            listeners[names[i]].cleanup();\r\n         }\r\n         return;\r\n      }\r\n\r\n      names = name ? [name] : EventbusUtils.objectKeys(events);\r\n\r\n      for (; i < names.length; i++)\r\n      {\r\n         name = names[i];\r\n         const handlers = events[name];\r\n\r\n         // Bail out if there are no events stored.\r\n         if (!handlers) { break; }\r\n\r\n         // Find any remaining events.\r\n         const remaining = [];\r\n         for (let j = 0; j < handlers.length; j++)\r\n         {\r\n            const handler = handlers[j];\r\n            // @ts-ignore\r\n            if (callback && callback !== handler.callback && callback !== handler.callback._callback ||\r\n             context && context !== handler.context)\r\n            {\r\n               remaining.push(handler);\r\n            }\r\n            else\r\n            {\r\n               const listening = handler.listening;\r\n               if (listening) { listening.off(name, callback); }\r\n            }\r\n         }\r\n\r\n         // Replace events if there are any remaining.  Otherwise, clean up.\r\n         if (remaining.length)\r\n         {\r\n            events[name] = remaining;\r\n         }\r\n         else\r\n         {\r\n            delete events[name];\r\n         }\r\n      }\r\n\r\n      return events;\r\n   }\r\n\r\n   /**\r\n    * The reducing API that adds a callback to the `events` object.\r\n    *\r\n    * @param {import('.').EventbusEvents}   events - EventbusEvents object\r\n    *\r\n    * @param {string}   name - Event name\r\n    *\r\n    * @param {Function} callback - Event callback\r\n    *\r\n    * @param {object}   opts - Optional parameters\r\n    *\r\n    * @returns {import('.').EventbusEvents} EventbusEvents object.\r\n    */\r\n   static #s_ON_API(events, name, callback, opts)\r\n   {\r\n      if (callback)\r\n      {\r\n         const handlers = events[name] || (events[name] = []);\r\n         const context = opts.context, ctx = opts.ctx, listening = opts.listening;\r\n\r\n         // Make a copy of options.\r\n         const options = JSON.parse(JSON.stringify(opts.options));\r\n\r\n         // Ensure that guard is set.\r\n         options.guard = typeof options.guard === 'boolean' ? options.guard : false;\r\n\r\n         // Determine automatically if the callback is `async` via being defined with the `async` modifier.\r\n         if (callback instanceof EventbusUtils.AsyncFunction ||\r\n          callback instanceof EventbusUtils.AsyncGeneratorFunction)\r\n         {\r\n            options.type = 2;\r\n         }\r\n         else\r\n         {\r\n            // Ensure that type is set.\r\n            switch (options.type)\r\n            {\r\n               case 'sync':\r\n                  options.type = 1;\r\n                  break;\r\n               case 'async':\r\n                  options.type = 2;\r\n                  break;\r\n               default:\r\n                  options.type = 0;\r\n                  break;\r\n            }\r\n         }\r\n\r\n         if (listening) { listening.incrementCount(); }\r\n\r\n         handlers.push({ callback, context, ctx: context || ctx, options, listening });\r\n      }\r\n      return events;\r\n   }\r\n\r\n   /**\r\n    * Iterates over the standard `event, callback` (as well as the fancy multiple space-separated events `\"change blur\",\r\n    * callback` and event maps `{event: callback}`).\r\n    *\r\n    * @param {Function} iteratee - Trigger API\r\n    *\r\n    * @param {Function} iterateeTarget - Internal function which is dispatched to.\r\n    *\r\n    * @param {import('.').EventbusEvents | {}}   events - Array of stored event callback data.\r\n    *\r\n    * @param {string}   name - Event name\r\n    *\r\n    * @param {Function} callback - callback\r\n    *\r\n    * @param {object}   opts - Optional parameters\r\n    *\r\n    * @returns {*} The results of the callback if any.\r\n    */\r\n   static #s_RESULTS_TARGET_API(iteratee, iterateeTarget, events, name, callback, opts)\r\n   {\r\n      let results = void 0;\r\n      let i = 0, names;\r\n\r\n      // Handle the case of multiple events being triggered. The potential results of each event & callbacks must be\r\n      // processed into a single array of results.\r\n      if (name && EventbusUtils.eventSplitter.test(name))\r\n      {\r\n         // Handle space-separated event names by delegating them individually.\r\n         for (names = name.split(EventbusUtils.eventSplitter); i < names.length; i++)\r\n         {\r\n            const result = iteratee(iterateeTarget, events, names[i], callback, opts);\r\n\r\n            // Determine type of `results`; 0: undefined, 1: single value, 2: an array of values.\r\n            const resultsType = Array.isArray(results) ? 2 : results !== void 0 ? 1 : 0;\r\n\r\n            // Handle an array result depending on existing results value.\r\n            if (Array.isArray(result))\r\n            {\r\n               switch (resultsType)\r\n               {\r\n                  case 0:\r\n                     // Simply set results.\r\n                     results = result;\r\n                     break;\r\n                  case 1:\r\n                     // Create a new array from existing results then concat the new result array.\r\n                     results = [results].concat(result);\r\n                     break;\r\n                  case 2:\r\n                     // `results` is already an array so concat the new result array.\r\n                     results = results.concat(result);\r\n                     break;\r\n               }\r\n            }\r\n            else if (result !== void 0)\r\n            {\r\n               switch (resultsType)\r\n               {\r\n                  case 0:\r\n                     // Simply set results.\r\n                     results = result;\r\n                     break;\r\n                  case 1: {\r\n                     // Create a new array from existing results then push the new result value.\r\n                     const newArray = [results];\r\n                     newArray.push(result);\r\n                     results = newArray;\r\n                     break;\r\n                  }\r\n                  case 2:\r\n                     // `results` is already an array so push the new result array.\r\n                     results.push(result);\r\n                     break;\r\n               }\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         // Just single event.\r\n         results = iteratee(iterateeTarget, events, name, callback, opts);\r\n      }\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Handles triggering the appropriate event callbacks.\r\n    *\r\n    * @param {Function} iterateeTarget - Internal function which is dispatched to.\r\n    *\r\n    * @param {import('.').EventbusEvents}   objEvents - Array of stored event callback data.\r\n    *\r\n    * @param {string}   name - Event name\r\n    *\r\n    * @param {Function} callback - callback\r\n    *\r\n    * @param {*[]}      args - Arguments supplied to a trigger method.\r\n    *\r\n    * @returns {*} The results from the triggered event.\r\n    */\r\n   static #s_TRIGGER_API(iterateeTarget, objEvents, name, callback, args)\r\n   {\r\n      let result;\r\n\r\n      if (objEvents)\r\n      {\r\n         const events = objEvents[name];\r\n         let allEvents = objEvents.all;\r\n         if (events && allEvents) { allEvents = allEvents.slice(); }\r\n         if (events) { result = iterateeTarget(events, args); }\r\n         if (allEvents) { result = iterateeTarget(allEvents, [name].concat(args)); }\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\r\n    * cases speedy.\r\n    *\r\n    * @param {import('.').EventData[]} events - Array of stored event callback data.\r\n    *\r\n    * @param {*[]}         args - Event argument array\r\n    */\r\n   static #s_TRIGGER_EVENTS(events, args)\r\n   {\r\n      let ev, i = -1;\r\n      const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\r\n\r\n      switch (args.length)\r\n      {\r\n         case 0:\r\n            while (++i < l) { (ev = events[i]).callback.call(ev.ctx); }\r\n            return;\r\n         case 1:\r\n            while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1); }\r\n            return;\r\n         case 2:\r\n            while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2); }\r\n            return;\r\n         case 3:\r\n            while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); }\r\n            return;\r\n         default:\r\n            while (++i < l) { (ev = events[i]).callback.apply(ev.ctx, args); }\r\n            return;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\r\n    * cases speedy. This dispatch method uses ES6 Promises and adds any returned results to an array which is added to\r\n    * a `Promise.all` construction which passes back a Promise which waits until all Promises complete. Any target\r\n    * invoked may return a Promise or any result. This is very useful to use for any asynchronous operations.\r\n    *\r\n    * @param {import('.').EventData[]} events - Array of stored event callback data.\r\n    *\r\n    * @param {*[]}         args - Arguments supplied to `triggerAsync`.\r\n    *\r\n    * @returns {Promise<void|*|*[]>} A Promise of the results from the triggered event.\r\n    */\r\n   static async #s_TRIGGER_ASYNC_EVENTS(events, args)\r\n   {\r\n      let ev, i = -1;\r\n      const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\r\n\r\n      const results = [];\r\n\r\n      switch (args.length)\r\n      {\r\n         case 0:\r\n            while (++i < l)\r\n            {\r\n               const result = (ev = events[i]).callback.call(ev.ctx);\r\n\r\n               // If we received a valid result add it to the promises array.\r\n               if (result !== void 0) { results.push(result); }\r\n            }\r\n            break;\r\n\r\n         case 1:\r\n            while (++i < l)\r\n            {\r\n               const result = (ev = events[i]).callback.call(ev.ctx, a1);\r\n\r\n               // If we received a valid result add it to the promises array.\r\n               if (result !== void 0) { results.push(result); }\r\n            }\r\n            break;\r\n\r\n         case 2:\r\n            while (++i < l)\r\n            {\r\n               const result = (ev = events[i]).callback.call(ev.ctx, a1, a2);\r\n\r\n               // If we received a valid result add it to the promises array.\r\n               if (result !== void 0) { results.push(result); }\r\n            }\r\n            break;\r\n\r\n         case 3:\r\n            while (++i < l)\r\n            {\r\n               const result = (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\r\n\r\n               // If we received a valid result add it to the promises array.\r\n               if (result !== void 0) { results.push(result); }\r\n            }\r\n            break;\r\n\r\n         default:\r\n            while (++i < l)\r\n            {\r\n               const result = (ev = events[i]).callback.apply(ev.ctx, args);\r\n\r\n               // If we received a valid result add it to the promises array.\r\n               if (result !== void 0) { results.push(result); }\r\n            }\r\n            break;\r\n      }\r\n\r\n      // If there are multiple results then use Promise.all otherwise Promise.resolve. Filter out any undefined results.\r\n      return results.length > 1 ? Promise.all(results).then((values) =>\r\n      {\r\n         const filtered = values.filter((entry) => entry !== void 0);\r\n         switch (filtered.length)\r\n         {\r\n            case 0: return void 0;\r\n            case 1: return filtered[0];\r\n            default: return filtered;\r\n         }\r\n      }) : results.length === 1 ? results[0] : void 0;\r\n   }\r\n\r\n   /**\r\n    * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\r\n    * cases speedy. This dispatch method synchronously passes back a single value or an array with all results returned\r\n    * by any invoked targets.\r\n    *\r\n    * @param {import('.').EventData[]} events - Array of stored event callback data.\r\n    *\r\n    * @param {*[]}         args - Arguments supplied to `triggerSync`.\r\n    *\r\n    * @returns {void|*|*[]} The results from the triggered event.\r\n    */\r\n   static #s_TRIGGER_SYNC_EVENTS(events, args)\r\n   {\r\n      let ev, i = -1;\r\n      const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\r\n\r\n      const results = [];\r\n\r\n      switch (args.length)\r\n      {\r\n         case 0:\r\n            while (++i < l)\r\n            {\r\n               const result = (ev = events[i]).callback.call(ev.ctx);\r\n\r\n               // If we received a valid result return immediately.\r\n               if (result !== void 0) { results.push(result); }\r\n            }\r\n            break;\r\n         case 1:\r\n            while (++i < l)\r\n            {\r\n               const result = (ev = events[i]).callback.call(ev.ctx, a1);\r\n\r\n               // If we received a valid result return immediately.\r\n               if (result !== void 0) { results.push(result); }\r\n            }\r\n            break;\r\n         case 2:\r\n            while (++i < l)\r\n            {\r\n               const result = (ev = events[i]).callback.call(ev.ctx, a1, a2);\r\n\r\n               // If we received a valid result return immediately.\r\n               if (result !== void 0) { results.push(result); }\r\n            }\r\n            break;\r\n         case 3:\r\n            while (++i < l)\r\n            {\r\n               const result = (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\r\n\r\n               // If we received a valid result return immediately.\r\n               if (result !== void 0) { results.push(result); }\r\n            }\r\n            break;\r\n         default:\r\n            while (++i < l)\r\n            {\r\n               const result = (ev = events[i]).callback.apply(ev.ctx, args);\r\n\r\n               // If we received a valid result return immediately.\r\n               if (result !== void 0) { results.push(result); }\r\n            }\r\n            break;\r\n      }\r\n\r\n      // Return the results array if there are more than one or just a single result.\r\n      return results.length > 1 ? results : results.length === 1 ? results[0] : void 0;\r\n   }\r\n\r\n   /**\r\n    * A try-catch guarded function. Used when attempting to invoke `isGuarded` from another eventbus / context via\r\n    * `listenTo`.\r\n    *\r\n    * @param {object}         obj - Event target / context\r\n    *\r\n    * @param {string|import('.').EventMap}   name - Event name(s) or event map.\r\n    *\r\n    * @param {object}         data - Output data.\r\n    *\r\n    * @returns {boolean} Any error if thrown.\r\n    */\r\n   static #s_TRY_CATCH_IS_GUARDED(obj, name, data = {})\r\n   {\r\n      let guarded = false;\r\n\r\n      try\r\n      {\r\n         const result = obj.isGuarded(name, data);\r\n         if (typeof result === 'boolean') { guarded = result; }\r\n      }\r\n      catch (err)\r\n      {\r\n         guarded = false;\r\n         data.names = [];\r\n         data.guarded = false;\r\n      }\r\n\r\n      return guarded;\r\n   }\r\n\r\n   /**\r\n    * A try-catch guarded #on function, to prevent poisoning the static `Eventbus.#listening` variable. Used when\r\n    * attempting to invoke `on` from another eventbus / context via `listenTo`.\r\n    *\r\n    * @param {object}            obj - Event target / context\r\n    *\r\n    * @param {string|import('.').EventMap}   name - Event name(s) or event map.\r\n    *\r\n    * @param {Function|object}   callback - Event callback function or context for event map.\r\n    *\r\n    * @param {object}            [context] - Event context\r\n    *\r\n    * @returns {Error} Any error if thrown.\r\n    */\r\n   static #s_TRY_CATCH_ON(obj, name, callback, context)\r\n   {\r\n      let error;\r\n\r\n      try\r\n      {\r\n         obj.on(name, callback, context);\r\n      }\r\n      catch (err)\r\n      {\r\n         error = err;\r\n      }\r\n\r\n      return error;\r\n   }\r\n\r\n   /**\r\n    * Creates a new unique ID with a given prefix\r\n    *\r\n    * @param {string}   prefix - An optional prefix to add to unique ID.\r\n    *\r\n    * @returns {string} A new unique ID with a given prefix.\r\n    */\r\n   static #s_UNIQUE_ID(prefix = '')\r\n   {\r\n      const id = `${++Eventbus.#idCounter}`;\r\n      return prefix ? `${prefix}${id}` /* c8 ignore next */ : id;\r\n   }\r\n}\n\n/**\r\n * EventbusProxy provides a protected proxy of another Eventbus instance.\r\n *\r\n * The main use case of EventbusProxy is to allow indirect access to an eventbus. This is handy when it comes to\r\n * managing the event lifecycle for a plugin system. When a plugin is added it could receive a callback, perhaps named\r\n * `onPluginLoaded`, which contains an EventbusProxy instance rather than the direct eventbus. This EventbusProxy\r\n * instance is associated in the management system controlling plugin lifecycle. When a plugin is removed / unloaded the\r\n * management system can automatically unregister all events for the plugin without requiring the plugin author doing it\r\n * correctly if they had full control. IE This allows to plugin system to guarantee no dangling listeners.\r\n *\r\n * EventbusProxy provides the on / off, before, once, and trigger methods with the same signatures as found in\r\n * Eventbus. However, the proxy tracks all added event bindings which is used to proxy between the target\r\n * eventbus which is passed in from the constructor. All registration methods (on / off / once) proxy. In addition,\r\n * there is a `destroy` method which will unregister all of proxied events and remove references to the managed\r\n * eventbus. Any further usage of a destroyed EventbusProxy instance results in a ReferenceError thrown.\r\n *\r\n * Finally, the EventbusProxy only allows events registered through it to be turned off providing a buffer between\r\n * any consumers such that they can not turn off other registrations made on the eventbus or other proxy instances.\r\n */\r\nclass EventbusProxy\r\n{\r\n   /**\r\n    * Stores the target eventbus.\r\n    *\r\n    * @type {import('.').Eventbus}\r\n    */\r\n   #eventbus;\r\n\r\n   /**\r\n    * Stores all proxied event bindings.\r\n    *\r\n    * @type {import('.').EventbusEvents}\r\n    */\r\n   #events;\r\n\r\n   /**\r\n    * Creates the event proxy with an existing instance of Eventbus.\r\n    *\r\n    * @param {import('.').Eventbus}   eventbus - The target eventbus instance.\r\n    */\r\n   constructor(eventbus)\r\n   {\r\n      this.#eventbus = eventbus;\r\n\r\n      Object.seal(this);\r\n   }\r\n\r\n   /**\r\n    * Just like `on`, but causes the bound callback to fire several times up to the count specified before being\r\n    * removed. When multiple events are passed in using the space separated syntax, the event\r\n    * will fire count times for every event you passed in, not once for a combination of all events.\r\n    *\r\n    * @param {number}            count - Number of times the function will fire before being removed.\r\n    *\r\n    * @param {string|import('.').EventMap}   name - Event name(s) or event map.\r\n    *\r\n    * @param {Function|object}   callback - Event callback function or context for event map.\r\n    *\r\n    * @param {object}            [context] - Event context\r\n    *\r\n    * @param {import('.').EventOptions | import('.').EventOptionsOut}   [options] - Event registration options.\r\n    *\r\n    * @returns {EventbusProxy} This EventbusProxy instance.\r\n    */\r\n   before(count, name, callback, context = void 0, options = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n      if (!Number.isInteger(count)) { throw new TypeError(`'count' is not an integer`); }\r\n\r\n      const data = {};\r\n      if (this.#eventbus.isGuarded(name, data))\r\n      {\r\n         console.warn(`@typhonjs-plugin/eventbus ${EventbusUtils.getErrorName(this)}` +\r\n          `- before() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\r\n         return this;\r\n      }\r\n\r\n      // Map the event into a `{event: beforeWrapper}` object.\r\n      const events = EventbusUtils.eventsAPI(EventbusUtils.beforeMap, {}, name, callback,\r\n       { count, after: this.off.bind(this) });\r\n\r\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\r\n\r\n      return this.on(events, callback, context, options);\r\n   }\r\n\r\n   /**\r\n    * Creates an EventbusProxy wrapping the backing Eventbus instance. An EventbusProxy proxies events allowing all\r\n    * listeners added to be easily removed from the wrapped Eventbus.\r\n    *\r\n    * @returns {EventbusProxy} A new EventbusProxy for this eventbus.\r\n    */\r\n   createProxy()\r\n   {\r\n      return new EventbusProxy(this.#eventbus);\r\n   }\r\n\r\n   /**\r\n    * Unregisters all proxied events from the target eventbus and removes any local references. All subsequent calls\r\n    * after `destroy` has been called result in a ReferenceError thrown.\r\n    */\r\n   destroy()\r\n   {\r\n      if (this.#eventbus !== null)\r\n      {\r\n         this.off();\r\n      }\r\n\r\n      this.#events = void 0;\r\n\r\n      this.#eventbus = null;\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for all events from the proxied eventbus yielding an array with event name, callback function,\r\n    * and event context.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\r\n    *\r\n    * @returns {Generator<[string, Function, object, import('.').EventOptionsOut], void, unknown>} Generator\r\n    * @yields {[string, Function, object, import('.').EventOptionsOut]}\r\n    */\r\n   *entries(regex = void 0)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      for (const entry of this.#eventbus.entries(regex))\r\n      {\r\n         yield entry;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns the current proxied eventbus event count.\r\n    *\r\n    * @returns {number} Returns the current proxied event count.\r\n    */\r\n   get eventCount()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      return this.#eventbus.eventCount;\r\n   }\r\n\r\n   /**\r\n    * Returns the current proxied eventbus callback count.\r\n    *\r\n    * @returns {number} Returns the current proxied callback count.\r\n    */\r\n   get callbackCount()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      return this.#eventbus.callbackCount;\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for the event names / keys of proxied eventbus event listeners.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\r\n    *\r\n    * @yields {string}\r\n    */\r\n   *keys(regex = void 0)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      for (const entry of this.#eventbus.keys(regex))\r\n      {\r\n         yield entry;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for the event names / keys of registered event listeners along with event options.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\r\n    *\r\n    * @returns {Generator<[string, import('.').EventOptionsOut], void, unknown>} Generator\r\n    * @yields {[string, import('.').EventOptionsOut]}\r\n    */\r\n   *keysWithOptions(regex = void 0)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      for (const entry of this.#eventbus.keysWithOptions(regex))\r\n      {\r\n         yield entry;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns whether this EventbusProxy has already been destroyed.\r\n    *\r\n    * @returns {boolean} Is destroyed state.\r\n    */\r\n   get isDestroyed()\r\n   {\r\n      return this.#eventbus === null;\r\n   }\r\n\r\n   /**\r\n    * Returns the target eventbus name.\r\n    *\r\n    * @returns {string} The target eventbus name.\r\n    */\r\n   get name()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      return `proxy-${this.#eventbus.name}`;\r\n   }\r\n\r\n   /**\r\n    * Returns the current proxied event count.\r\n    *\r\n    * @returns {number} Returns the current proxied event count.\r\n    */\r\n   get proxyEventCount()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      if (!this.#events) { return 0; }\r\n\r\n      return Object.keys(this.#events).length;\r\n   }\r\n\r\n   /**\r\n    * Returns the current proxied callback count.\r\n    *\r\n    * @returns {number} Returns the current proxied callback count.\r\n    */\r\n   get proxyCallbackCount()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      if (!this.#events) { return 0; }\r\n\r\n      let count = 0;\r\n\r\n      for (const name in this.#events) { count += this.#events[name].length; }\r\n\r\n      return count;\r\n   }\r\n\r\n   /**\r\n    * Returns the options of an event name.\r\n    *\r\n    * @param {string}   name - Event name(s) to verify.\r\n    *\r\n    * @returns {import('.').EventOptionsOut} The event options.\r\n    */\r\n   getOptions(name)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      return this.#eventbus.getOptions(name);\r\n   }\r\n\r\n   /**\r\n    * Returns the trigger type of event name.\r\n    * Note: if trigger type is not set then undefined is returned for type otherwise 'sync' or 'async' is returned.\r\n    *\r\n    * @param {string}   name - Event name(s) to verify.\r\n    *\r\n    * @returns {string|undefined} The trigger type.\r\n    */\r\n   getType(name)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      return this.#eventbus.getType(name);\r\n   }\r\n\r\n   /**\r\n    * Returns whether an event name is guarded.\r\n    *\r\n    * @param {string|import('.').EventMap}  name - Event name(s) or event map to verify.\r\n    *\r\n    * @param {object}         [data] - Stores the output of which names are guarded.\r\n    *\r\n    * @returns {boolean} Whether the given event name is guarded.\r\n    */\r\n   isGuarded(name, data = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      return this.#eventbus.isGuarded(name, data);\r\n   }\r\n\r\n   /**\r\n    * Remove a previously-bound proxied event binding.\r\n    *\r\n    * Please see {@link Eventbus#off}.\r\n    *\r\n    * @param {string|import('.').EventMap}  [name] - Event name(s) or event map.\r\n    *\r\n    * @param {Function}       [callback] - Event callback function\r\n    *\r\n    * @param {object}         [context] - Event context\r\n    *\r\n    * @returns {EventbusProxy} This EventbusProxy\r\n    */\r\n   off(name = void 0, callback = void 0, context = void 0)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      this.#events = EventbusUtils.eventsAPI(EventbusProxy.#s_OFF_API, this.#events || {}, name, callback, {\r\n         context,\r\n         eventbus: this.#eventbus,\r\n      });\r\n\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a\r\n    * large number of different events on a page, the convention is to use colons to namespace them: `poll:start`, or\r\n    * `change:selection`.\r\n    *\r\n    * Please see {@link Eventbus#on}.\r\n    *\r\n    * @param {string|import('.').EventMap}   name - Event name(s) or event map.\r\n    *\r\n    * @param {Function|object}   callback - Event callback function or context for event map.\r\n    *\r\n    * @param {object}            [context] - Event context.\r\n    *\r\n    * @param {import('.').EventOptions | import('.').EventOptionsOut}   [options] - Event registration options.\r\n    *\r\n    * @returns {EventbusProxy} This EventbusProxy\r\n    */\r\n   on(name, callback, context = void 0, options = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      if (options == null || options.constructor !== Object)   // eslint-disable-line eqeqeq\r\n      {\r\n         throw new TypeError(`'options' must be an object literal.`);\r\n      }\r\n\r\n      const data = {};\r\n      if (this.#eventbus.isGuarded(name, data))\r\n      {\r\n         console.warn(`@typhonjs-plugin/eventbus ${EventbusUtils.getErrorName(this)}` +\r\n          `- on() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\r\n         return this;\r\n      }\r\n\r\n      // Hang onto the options as s_ON_API sets the context we need to pass to the eventbus in `opts.ctx`.\r\n      const opts = { context, ctx: this, options };\r\n\r\n      this.#events = EventbusUtils.eventsAPI(EventbusProxy.#s_ON_API, this.#events || {}, name, callback, opts);\r\n\r\n      this.#eventbus.on(name, callback, opts.ctx, options);\r\n\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Just like `on`, but causes the bound callback to fire only once before being removed. Handy for saying \"the next\r\n    * time that X happens, do this\". When multiple events are passed in using the space separated syntax, the event\r\n    * will fire once for every event you passed in, not once for a combination of all events\r\n    *\r\n    * @param {string|import('.').EventMap}   name - Event name(s) or event map.\r\n    *\r\n    * @param {Function|object}   callback - Event callback function or context for event map.\r\n    *\r\n    * @param {object}            context - Event context\r\n    *\r\n    * @param {import('.').EventOptions | import('.').EventOptionsOut}   [options] - Event registration options.\r\n    *\r\n    * @returns {EventbusProxy} This EventbusProxy instance.\r\n    */\r\n   once(name, callback, context = void 0, options = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      const data = {};\r\n      if (this.#eventbus.isGuarded(name, data))\r\n      {\r\n         console.warn(`@typhonjs-plugin/eventbus ${EventbusUtils.getErrorName(this)}` +\r\n          `- once() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\r\n         return this;\r\n      }\r\n\r\n      // Map the event into a `{event: beforeWrapper}` object.\r\n      const events = EventbusUtils.eventsAPI(EventbusUtils.beforeMap, {}, name, callback,\r\n       { count: 1, after: this.off.bind(this) });\r\n\r\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\r\n\r\n      return this.on(events, callback, context, options);\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for all stored locally proxied events yielding an array with event name, callback\r\n    * function, and event context.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\r\n    *\r\n    * @returns {Generator<[string, Function, object, import('.').EventOptionsOut], void, unknown>} Generator\r\n    * @yields {[string, Function, object, import('.').EventOptionsOut]}\r\n    */\r\n   *proxyEntries(regex = void 0)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#events) { return; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const name in this.#events)\r\n         {\r\n            if (regex.test(name))\r\n            {\r\n               for (const event of this.#events[name])\r\n               {\r\n                  yield [name, event.callback, event.context, JSON.parse(JSON.stringify(event.options))];\r\n               }\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name in this.#events)\r\n         {\r\n            for (const event of this.#events[name])\r\n            {\r\n               yield [name, event.callback, event.context, JSON.parse(JSON.stringify(event.options))];\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for the event names / keys of the locally proxied event names.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\r\n    *\r\n    * @yields {string}\r\n    */\r\n   *proxyKeys(regex = void 0)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#events) { return; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const name in this.#events)\r\n         {\r\n            if (regex.test(name))\r\n            {\r\n               yield name;\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name in this.#events)\r\n         {\r\n            yield name;\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for the event names / keys of the locally proxied event names with event options.\r\n    *\r\n    * Note: The event options returned will respect all the event options from a registered event on the main\r\n    * eventbus if applicable.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\r\n    *\r\n    * @returns {Generator<[string, import('.').EventOptionsOut], void, unknown>} Generator\r\n    * @yields {[string, import('.').EventOptionsOut]}\r\n    */\r\n   *proxyKeysWithOptions(regex = void 0)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (regex)\r\n      {\r\n         for (const name in this.#events)\r\n         {\r\n            if (regex.test(name))\r\n            {\r\n               yield [name, this.#eventbus.getOptions(name)];\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name in this.#events)\r\n         {\r\n            yield [name, this.#eventbus.getOptions(name)];\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\r\n    * passed along to the event callbacks.\r\n    *\r\n    * @param {string}   name - Event name(s)\r\n    *\r\n    * @param {...*}     args - Additional arguments passed to the event function(s).\r\n    *\r\n    * @returns {EventbusProxy} This EventbusProxy.\r\n    */\r\n   trigger(name, ...args)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      this.#eventbus.trigger(name, ...args);\r\n\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\r\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\r\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\r\n    *\r\n    * @param {string}   name - Event name(s)\r\n    *\r\n    * @param {...*}     args - Additional arguments passed to the event function(s).\r\n    *\r\n    * @returns {Promise<void|*|*[]>} A Promise returning any results.\r\n    */\r\n   triggerAsync(name, ...args)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      return this.#eventbus.triggerAsync(name, ...args);\r\n   }\r\n\r\n   /**\r\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\r\n    *\r\n    * @param {string}   name - Event name(s)\r\n    *\r\n    * @param {...*}     args - Additional arguments passed to the event function(s).\r\n    *\r\n    * @returns {EventbusProxy} This EventbusProxy.\r\n    */\r\n   triggerDefer(name, ...args)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      this.#eventbus.triggerDefer(name, ...args);\r\n\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\r\n    * value or in an array and passes it back to the callee in a synchronous manner.\r\n    *\r\n    * @param {string}   name - Event name(s)\r\n    *\r\n    * @param {...*}     args - Additional arguments passed to the event function(s).\r\n    *\r\n    * @returns {void|*|*[]} An Array of returned results.\r\n    */\r\n   triggerSync(name, ...args)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\r\n\r\n      return this.#eventbus.triggerSync(name, ...args);\r\n   }\r\n\r\n   // Internal reducer API -------------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * The reducing API that removes a callback from the `events` object. And delegates invoking off to the eventbus\r\n    * reference.\r\n    *\r\n    * @param {import('.').EventbusEvents}   events - EventbusEvents object\r\n    *\r\n    * @param {string}   name - Event name\r\n    *\r\n    * @param {Function} callback - Event callback\r\n    *\r\n    * @param {object}   opts - Optional parameters\r\n    *\r\n    * @returns {void | import('.').EventbusEvents} EventbusEvents object\r\n    */\r\n   static #s_OFF_API(events, name, callback, opts)\r\n   {\r\n      /* c8 ignore next 1 */\r\n      if (!events) { return; }\r\n\r\n      const context = opts.context;\r\n      const eventbus = opts.eventbus;\r\n\r\n      const names = name ? [name] : EventbusUtils.objectKeys(events);\r\n\r\n      for (let i = 0; i < names.length; i++)\r\n      {\r\n         name = names[i];\r\n         const handlers = events[name];\r\n\r\n         // Bail out if there are no events stored.\r\n         if (!handlers) { break; }\r\n\r\n         // Find any remaining events.\r\n         const remaining = [];\r\n         for (let j = 0; j < handlers.length; j++)\r\n         {\r\n            const handler = handlers[j];\r\n\r\n            // @ts-ignore\r\n            if ((callback && callback !== handler.callback && callback !== handler.callback._callback) ||\r\n             (context && context !== handler.context))\r\n            {\r\n               remaining.push(handler);\r\n               continue;\r\n            }\r\n\r\n            // Must explicitly remove the event by the stored full set of name, handler, context to ensure\r\n            // non-proxied event registrations are not removed.\r\n            /* c8 ignore next 1 */ // @ts-ignore\r\n            eventbus.off(name, handler.callback || handler.callback._callback, handler.context || handler.ctx);\r\n         }\r\n\r\n         // Replace events if there are any remaining.  Otherwise, clean up.\r\n         if (remaining.length)\r\n         {\r\n            events[name] = remaining;\r\n         }\r\n         else\r\n         {\r\n            // eventbus.off(name, callback, context);\r\n            delete events[name];\r\n         }\r\n      }\r\n\r\n      return events;\r\n   }\r\n\r\n   /**\r\n    * The reducing API that adds a callback to the `events` object.\r\n    *\r\n    * @param {import('.').EventbusEvents}   events - EventbusEvents object\r\n    *\r\n    * @param {string}   name - Event name\r\n    *\r\n    * @param {Function} callback - Event callback\r\n    *\r\n    * @param {object}   opts - Optional parameters\r\n    *\r\n    * @returns {import('.').EventbusEvents} EventbusEvents object.\r\n    */\r\n   static #s_ON_API(events, name, callback, opts)\r\n   {\r\n      if (callback)\r\n      {\r\n         const handlers = events[name] || (events[name] = []);\r\n         const context = opts.context, ctx = opts.ctx;\r\n\r\n         // Make a copy of options.\r\n         const options = JSON.parse(JSON.stringify(opts.options));\r\n\r\n         // Ensure that guard is set.\r\n         options.guard = options.guard !== void 0 && typeof options.guard === 'boolean' ? options.guard : false;\r\n\r\n         // Determine automatically if the callback is `async` via being defined with the `async` modifier.\r\n         if (callback instanceof EventbusUtils.AsyncFunction ||\r\n          callback instanceof EventbusUtils.AsyncGeneratorFunction)\r\n         {\r\n            options.type = 2;\r\n         }\r\n         else\r\n         {\r\n            // Ensure that type is set.\r\n            switch (options.type)\r\n            {\r\n               case 'sync':\r\n                  options.type = 1;\r\n                  break;\r\n               case 'async':\r\n                  options.type = 2;\r\n                  break;\r\n               default:\r\n                  options.type = 0;\r\n                  break;\r\n            }\r\n         }\r\n\r\n         // Set opts `ctx` as this is what we send to the eventbus.\r\n         opts.ctx = context || ctx;\r\n\r\n         handlers.push({ callback, context, ctx: opts.ctx, options });\r\n      }\r\n\r\n      return events;\r\n   }\r\n}\n\n/**\r\n * EventbusSecure provides a secure wrapper around another Eventbus instance.\r\n *\r\n * The main use case of EventbusSecure is to provide a secure eventbus window for public consumption. Only\r\n * events can be triggered, but not registered / unregistered.\r\n *\r\n * You must use the initialize method passing in an existing Eventbus instance as the eventbus reference is private.\r\n * In order to secure the eventbus from unwanted access there is no way to access the eventbus reference externally from\r\n * the EventbusSecure instance. The initialize method returns an {@link EventbusSecureObj} object which\r\n * contains two functions to control the secure eventbus externally; `destroy` and `setEventbus`. Expose to end\r\n * consumers just the `eventbusSecure` instance.\r\n */\r\nclass EventbusSecure\r\n{\r\n   /**\r\n    * Stores the target eventbus.\r\n    *\r\n    * @type {import('.').Eventbus | import('.').EventbusProxy}\r\n    */\r\n   #eventbus;\r\n\r\n   /**\r\n    * Stores a potentially alternate name instead of returning the wrapped Eventbus instance name.\r\n    *\r\n    * @type {string}\r\n    */\r\n   #name;\r\n\r\n   /**\r\n    * Creates the EventbusSecure instance with an existing instance of Eventbus. An object / EventbusSecureObj is\r\n    * returned with an EventbusSecure reference and two functions for controlling the underlying Eventbus reference.\r\n    *\r\n    * `destroy()` will destroy the underlying Eventbus reference.\r\n    * `setEventbus(<eventbus>)` will set the underlying reference.\r\n    *\r\n    * @param {import('.').Eventbus | import('.').EventbusProxy}  eventbus - The target eventbus instance.\r\n    *\r\n    * @param {string}                  [name] - If a name is provided this will be used instead of eventbus name.\r\n    *\r\n    * @returns {import('.').EventbusSecureObj} The control object which contains an EventbusSecure reference and\r\n    *          control functions.\r\n    */\r\n   static initialize(eventbus, name = void 0)\r\n   {\r\n      if (name !== void 0 && typeof name !== 'string') { throw new TypeError(`'name' is not a string.`); }\r\n\r\n      const eventbusSecure = new EventbusSecure();\r\n      eventbusSecure.#eventbus = eventbus;\r\n      eventbusSecure.#name = name === void 0 ? eventbus.name : name;\r\n      Object.seal(eventbusSecure);\r\n\r\n      return {\r\n         destroy: function()\r\n         {\r\n            if (!eventbusSecure.isDestroyed)\r\n            {\r\n               eventbusSecure.#eventbus = null;\r\n\r\n               if (this) { this.eventbusSecure = void 0; }\r\n            }\r\n         },\r\n\r\n         /**\r\n          * @param {import('.').Eventbus | import('.').EventbusProxy}   eventbus - Target eventbus.\r\n          *\r\n          * @param {string}   [name] - Eventbus name.\r\n          */\r\n         setEventbus: function(eventbus, name = void 0)\r\n         {\r\n            if (name !== void 0 && typeof name !== 'string') { throw new TypeError(`'name' is not a string.`); }\r\n\r\n            if (!eventbusSecure.isDestroyed)\r\n            {\r\n               // Adopt the new eventbus name as the current name set matches the wrapped eventbus.\r\n               if (name === void 0 && eventbusSecure.#name === eventbusSecure.#eventbus.name)\r\n               {\r\n                  eventbusSecure.#name = eventbus.name;\r\n               }\r\n               else if (name !== void 0)\r\n               {\r\n                  eventbusSecure.#name = name;\r\n               }\r\n\r\n               eventbusSecure.#eventbus = eventbus;\r\n            }\r\n         },\r\n\r\n         eventbusSecure\r\n      };\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for the event names / keys of secured eventbus event listeners.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\r\n    *\r\n    * @yields {string}\r\n    */\r\n   *keys(regex = void 0)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\r\n\r\n      for (const entry of this.#eventbus.keys(regex))\r\n      {\r\n         yield entry;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for the event names / keys of registered event listeners along with event options.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\r\n    *\r\n    * @returns {Generator<[string, import('.').EventOptionsOut], void, unknown>} Generator\r\n    * @yields {[string, import('.').EventOptionsOut]}\r\n    */\r\n   *keysWithOptions(regex = void 0)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\r\n\r\n      for (const entry of this.#eventbus.keysWithOptions(regex))\r\n      {\r\n         yield entry;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns whether this instance has already been destroyed.\r\n    *\r\n    * @returns {boolean} Is destroyed state.\r\n    */\r\n   get isDestroyed()\r\n   {\r\n      return this.#eventbus === null;\r\n   }\r\n\r\n   /**\r\n    * Returns the name associated with this instance.\r\n    *\r\n    * @returns {string} The target eventbus name.\r\n    */\r\n   get name()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\r\n\r\n      return this.#name;\r\n   }\r\n\r\n   /**\r\n    * Returns the options of an event name.\r\n    *\r\n    * @param {string}   name - Event name(s) to verify.\r\n    *\r\n    * @returns {import('.').EventOptionsOut} The event options.\r\n    */\r\n   getOptions(name)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\r\n\r\n      return this.#eventbus.getOptions(name);\r\n   }\r\n\r\n   /**\r\n    * Returns the trigger type of event name.\r\n    * Note: if trigger type is not set then undefined is returned for type otherwise 'sync' or 'async' is returned.\r\n    *\r\n    * @param {string}   name - Event name(s) to verify.\r\n    *\r\n    * @returns {string|undefined} The trigger type.\r\n    */\r\n   getType(name)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\r\n\r\n      return this.#eventbus.getType(name);\r\n   }\r\n\r\n   /**\r\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\r\n    * passed along to the event callbacks.\r\n    *\r\n    * @param {string}   name - Event name(s)\r\n    *\r\n    * @param {...*}     args - Additional arguments passed to the event function(s).\r\n    *\r\n    * @returns {EventbusSecure} This instance.\r\n    */\r\n   trigger(name, ...args)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\r\n\r\n      this.#eventbus.trigger(name, ...args);\r\n\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\r\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\r\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\r\n    *\r\n    * @param {string}   name - Event name(s)\r\n    *\r\n    * @param {...*}     args - Additional arguments passed to the event function(s).\r\n    *\r\n    * @returns {Promise<void|*|*[]>} A Promise to returning any results.\r\n    */\r\n   triggerAsync(name, ...args)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\r\n\r\n      return this.#eventbus.triggerAsync(name, ...args);\r\n   }\r\n\r\n   /**\r\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\r\n    *\r\n    * @param {string}   name - Event name(s)\r\n    *\r\n    * @param {...*}     args - Additional arguments passed to the event function(s).\r\n    *\r\n    * @returns {EventbusSecure} This EventbusProxy.\r\n    */\r\n   triggerDefer(name, ...args)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\r\n\r\n      this.#eventbus.triggerDefer(name, ...args);\r\n\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\r\n    * value or in an array and passes it back to the callee in a synchronous manner.\r\n    *\r\n    * @param {string}   name - Event name(s)\r\n    *\r\n    * @param {...*}     args - Additional arguments passed to the event function(s).\r\n    *\r\n    * @returns {void|*|*[]} An Array of returned results.\r\n    */\r\n   triggerSync(name, ...args)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\r\n\r\n      return this.#eventbus.triggerSync(name, ...args);\r\n   }\r\n}\n\nexport { Eventbus, EventbusProxy, EventbusSecure };\n//# sourceMappingURL=index.js.map\n","import { Eventbus, EventbusProxy, EventbusSecure } from '@typhonjs-plugin/manager/eventbus';\n\n/**\r\n * Provides a custom error for Node to combine CJS and ESM module not found errors.\r\n */\r\nclass ModuleLoadError extends Error\r\n{\r\n   /**\r\n    * @param {object} options - Options object.\r\n    *\r\n    * @param {string} options.message - Error message.\r\n    *\r\n    * @param {string} options.code - Error code.\r\n    */\r\n   constructor({ message, code })\r\n   {\r\n      super(`[${code}] ${message}`);\r\n      this.name = 'ModuleLoadError';\r\n      this.code = code;\r\n   }\r\n}\n\n/**\r\n * URL matching RegExp\r\n *\r\n * @type {RegExp}\r\n */\r\nconst s_URL_REGEX = /^(https?:\\/\\/|file:\\/\\/)/;\r\n\r\nclass ModuleLoader\r\n{\r\n   /**\r\n    * @template M, E\r\n    *\r\n    * Loads an ES Module in the browser passing back an object containing info about the loading process.\r\n    *\r\n    * @param {object}      options - Options object.\r\n    *\r\n    * @param {string|URL}  options.modulepath - A module name, file path, or URL.\r\n    *\r\n    * @param {(M) => E}    [options.resolveModule] - An optional function which resolves the import to set `instance`.\r\n    *\r\n    * @returns {Promise<ModuleLoaderObj<M, E>>} The module / instance and data about the loading process.\r\n    */\r\n   static async load({ modulepath, resolveModule = void 0 })\r\n   {\r\n      if (!(modulepath instanceof URL) && typeof modulepath !== 'string')\r\n      {\r\n         throw new TypeError(`'modulepath' is not a string or URL`);\r\n      }\r\n\r\n      if (resolveModule !== void 0 && typeof resolveModule !== 'function')\r\n      {\r\n         throw new TypeError(`'resolveModule' is not a function`);\r\n      }\r\n\r\n      const loadpath = modulepath instanceof URL ? modulepath.toString() : modulepath;\r\n\r\n      const type = `import-${modulepath instanceof URL ||\r\n      (typeof modulepath === 'string' && modulepath.match(s_URL_REGEX)) ? 'url' : 'path'}`;\r\n\r\n      try\r\n      {\r\n         const module = await import(modulepath);\r\n\r\n         const instance = resolveModule !== void 0 ? resolveModule(module) : module;\r\n\r\n         return { filepath: loadpath, instance, isESM: true, loadpath, module, modulepath, type };\r\n      }\r\n      catch (error)\r\n      {\r\n         // In case the browser version of ModuleLoader is used on Node... The CJS and ESM loaders of Node have\r\n         // different error codes. Collect both of these as one error with clear stack trace from ModuleLoader.\r\n         /* istanbul ignore next */\r\n         if (error.code === 'MODULE_NOT_FOUND' || error.code === 'ERR_MODULE_NOT_FOUND')\r\n         {\r\n            throw new ModuleLoadError({\r\n               message: `import() failed to load ${loadpath}`,\r\n               code: 'ERR_MODULE_NOT_FOUND'\r\n            });\r\n         }\r\n\r\n         throw error;\r\n      }\r\n   }\r\n}\n\n/**\r\n * Defines a class holding the data associated with a plugin including its instance.\r\n */\r\nclass PluginEntry\r\n{\r\n   /**\r\n    * Data describing the plugin, manager, and optional module data.\r\n    *\r\n    * @type {import('.').PluginData}\r\n    */\r\n   #data;\r\n\r\n   /**\r\n    * The plugin enabled state.\r\n    *\r\n    * @type {boolean}\r\n    */\r\n   #enabled;\r\n\r\n   /**\r\n    * The plugin name.\r\n    *\r\n    * @type {string}\r\n    */\r\n   #name;\r\n\r\n   /**\r\n    * Any stored import.meta data.\r\n    *\r\n    * @type {object}\r\n    */\r\n   #importmeta;\r\n\r\n   /**\r\n    * The loaded plugin instance.\r\n    *\r\n    * @type {object}\r\n    */\r\n   #instance;\r\n\r\n   /**\r\n    * An EventbusProxy associated with the plugin wrapping the plugin manager eventbus.\r\n    *\r\n    * @type {import('#eventbus').EventbusProxy}\r\n    */\r\n   #eventbusProxy;\r\n\r\n   /**\r\n    * Stores the proxied event names, callback functions, context and guarded state when this plugin is disabled.\r\n    *\r\n    * @type {Array<[string, Function, object, import('#eventbus').EventOptionsOut]>}\r\n    */\r\n   #events;\r\n\r\n   /**\r\n    * Instantiates a PluginEntry.\r\n    *\r\n    * @param {string}      name - The plugin name.\r\n    *\r\n    * @param {import('.').PluginData}  data - Describes the plugin, manager, and optional module data.\r\n    *\r\n    * @param {object}      instance - The loaded plugin instance.\r\n    *\r\n    * @param {import('#eventbus').EventbusProxy}  eventbusProxy - The EventbusProxy associated with the plugin wrapping\r\n    *        the plugin manager eventbus.\r\n    */\r\n   constructor(name, data, instance, eventbusProxy = void 0)\r\n   {\r\n      this.#data = data;\r\n\r\n      this.#enabled = true;\r\n\r\n      this.#name = name;\r\n\r\n      this.#instance = instance;\r\n\r\n      this.#eventbusProxy = eventbusProxy;\r\n   }\r\n\r\n   /**\r\n    * Get plugin data.\r\n    *\r\n    * @returns {import('.').PluginData} The associated PluginData.\r\n    */\r\n   get data() { return this.#data; }\r\n\r\n   /**\r\n    * Get enabled.\r\n    *\r\n    * @returns {boolean} Current enabled state.\r\n    */\r\n   get enabled() { return this.#enabled; }\r\n\r\n   /**\r\n    * Get any stored import.meta object.\r\n    *\r\n    * @returns {undefined|object} Any set import.meta info.\r\n    */\r\n   get importmeta() { return this.#importmeta; }\r\n\r\n   /**\r\n    * Reset will cleanup most resources for remove / reload. 'remove' should manually destroy #eventbusProxy.\r\n    */\r\n   reset()\r\n   {\r\n      try\r\n      {\r\n         this.#events = void 0;\r\n         this.#importmeta = void 0;\r\n\r\n         // Automatically remove any potential reference to a stored event proxy instance.\r\n         delete this.#instance._eventbus;\r\n      }\r\n      catch (err) { /* noop */ }\r\n   }\r\n\r\n   /**\r\n    * Set enabled.\r\n    *\r\n    * @param {boolean} enabled - New enabled state.\r\n    */\r\n   set enabled(enabled)\r\n   {\r\n      this.#enabled = enabled;\r\n\r\n      // If enabled and there are stored events then turn them on with the eventbus proxy.\r\n      if (enabled)\r\n      {\r\n         if (this.#eventbusProxy !== void 0 && Array.isArray(this.#events))\r\n         {\r\n            for (const event of this.#events)\r\n            {\r\n               this.#eventbusProxy.on(...event);\r\n            }\r\n\r\n            this.#events = void 0;\r\n         }\r\n      }\r\n      else // Store any proxied events and unregister the proxied events.\r\n      {\r\n         if (this.#eventbusProxy !== void 0)\r\n         {\r\n            this.#events = Array.from(this.#eventbusProxy.proxyEntries());\r\n            this.#eventbusProxy.off();\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Get associated EventbusProxy.\r\n    *\r\n    * @returns {import('#eventbus').EventbusProxy} Associated EventbusProxy.\r\n    */\r\n   get eventbusProxy() { return this.#eventbusProxy; }\r\n\r\n   /**\r\n    * Get plugin instance.\r\n    *\r\n    * @returns {object} The plugin instance.\r\n    */\r\n   get instance() { return this.#instance; }\r\n\r\n   /**\r\n    * Get plugin name.\r\n    *\r\n    * @returns {string} Plugin name.\r\n    */\r\n   get name() { return this.#name; }\r\n\r\n\r\n   /**\r\n    * Set associated EventbusProxy.\r\n    *\r\n    * @param {import('#eventbus').EventbusProxy} eventbusProxy - EventbusProxy instance to associate.\r\n    */\r\n   set eventbusProxy(eventbusProxy) { this.#eventbusProxy = eventbusProxy; }\r\n\r\n   /**\r\n    * Set any associated import.meta data.\r\n    *\r\n    * @param {object} importmeta - import.meta data.\r\n    */\r\n   set importmeta(importmeta) { this.#importmeta = importmeta; }\r\n\r\n   /**\r\n    * Set plugin instance.\r\n    *\r\n    * @param {object} instance - The plugin instance.\r\n    */\r\n   set instance(instance) { this.#instance = instance; }\r\n}\n\n/**\r\n * Provides common object manipulation utilities including depth traversal, obtaining accessors, safely setting values /\r\n * equality tests, and validation.\r\n */\r\n\r\n/**\r\n * @typedef {object} ValidationEntry - Provides data for a validation check.\r\n *\r\n * @property {string}               [type] - Optionally tests with a typeof check.\r\n *\r\n * @property {Array<*>|Function|Set<*>}  [expected] - Optional array, function, or set of expected values to test\r\n * against.\r\n *\r\n * @property {string}               [message] - Optional message to include.\r\n *\r\n * @property {boolean}              [required=true] - When false if the accessor is missing validation is skipped.\r\n *\r\n * @property {boolean}              [error=true] - When true and error is thrown otherwise a boolean is returned.\r\n */\r\n\r\n/**\r\n * Freezes all entries traversed that are objects including entries in arrays.\r\n *\r\n * @param {object|Array}   data - An object or array.\r\n *\r\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\r\n *\r\n * @returns {object|Array} The frozen object.\r\n */\r\nfunction deepFreeze(data, skipFreezeKeys = [])\r\n{\r\n   /* istanbul ignore if */\r\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\r\n\r\n   /* istanbul ignore if */\r\n   if (!Array.isArray(skipFreezeKeys)) { throw new TypeError(`'skipFreezeKeys' is not an 'array'.`); }\r\n\r\n   return _deepFreeze(data, skipFreezeKeys);\r\n}\r\n\r\n/**\r\n * Tests for whether an object is iterable.\r\n *\r\n * @param {*} value - Any value.\r\n *\r\n * @returns {boolean} Whether object is iterable.\r\n */\r\nfunction isIterable(value)\r\n{\r\n   if (value === null || value === void 0 || typeof value !== 'object') { return false; }\r\n\r\n   return typeof value[Symbol.iterator] === 'function';\r\n}\r\n\r\n/**\r\n * Tests for whether object is not null and a typeof object.\r\n *\r\n * @param {*} value - Any value.\r\n *\r\n * @returns {boolean} Is it an object.\r\n */\r\nfunction isObject(value)\r\n{\r\n   return value !== null && typeof value === 'object';\r\n}\r\n\r\n// Module private ---------------------------------------------------------------------------------------------------\r\n\r\n/**\r\n * Private implementation of depth traversal.\r\n *\r\n * @param {object|Array}   data - An object or array.\r\n *\r\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\r\n *\r\n * @returns {*} The frozen object.\r\n * @ignore\r\n * @private\r\n */\r\nfunction _deepFreeze(data, skipFreezeKeys)\r\n{\r\n   if (Array.isArray(data))\r\n   {\r\n      for (let cntr = 0; cntr < data.length; cntr++) { _deepFreeze(data[cntr], skipFreezeKeys); }\r\n   }\r\n   else if (typeof data === 'object')\r\n   {\r\n      for (const key in data)\r\n      {\r\n         // eslint-disable-next-line no-prototype-builtins\r\n         if (data.hasOwnProperty(key) && !skipFreezeKeys.includes(key)) { _deepFreeze(data[key], skipFreezeKeys); }\r\n      }\r\n   }\r\n\r\n   return Object.freeze(data);\r\n}\n\n/**\r\n * PluginEvent - Provides the data / event passed to all invoked methods in\r\n * {@link PluginInvokeSupport#invokeSyncEvent}. The `event.data` field is returned to the caller. Before returning\r\n * though additional the following additional metadata is attached:\r\n *\r\n * (number)    `$$plugin_invoke_count` - The count of plugins invoked.\r\n *\r\n * (string[])  `$$plugin_invoke_names` - The names of plugins invoked.\r\n */\r\nclass PluginInvokeEvent\r\n{\r\n   /**\r\n    * Initializes PluginEvent.\r\n    *\r\n    * @param {object} copyProps - Event data to copy.\r\n    *\r\n    * @param {object} passthruProps - Event data to pass through.\r\n    */\r\n   constructor(copyProps = {}, passthruProps = {})\r\n   {\r\n      /**\r\n       * Provides the unified event data assigning any pass through data to the copied data supplied. Invoked functions\r\n       * may add to or modify this data.\r\n       *\r\n       * @type {import('../../').PluginEventData}\r\n       */\r\n      this.data = Object.assign(JSON.parse(JSON.stringify(copyProps)), passthruProps);\r\n\r\n      /**\r\n       * Unique data available in each plugin invoked.\r\n       *\r\n       * @type {import('#eventbus').EventbusProxy} - The active EventbusProxy for that particular plugin.\r\n       */\r\n      this.eventbus = null;\r\n\r\n      /**\r\n       * Unique data available in each plugin invoked.\r\n       *\r\n       * @type {string} - The active plugin name.\r\n       */\r\n      this.pluginName = '';\r\n\r\n      /**\r\n       * Unique data available in each plugin invoked.\r\n       *\r\n       * @type {object} - The active plugin options.\r\n       */\r\n      this.pluginOptions = '';\r\n   }\r\n}\n\n/**\r\n * Private implementation to invoke asynchronous events. This allows internal calls in PluginManager for\r\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\r\n *\r\n * This dispatch method asynchronously passes to and returns from any invoked targets a PluginEvent. Any invoked plugin\r\n * may return a Promise which is awaited upon by `Promise.all` before returning the PluginEvent data via a Promise.\r\n *\r\n * @param {object}                     opts - Options object.\r\n *\r\n * @param {string}                     opts.method - Method name to invoke.\r\n *\r\n * @param {import('../../').PluginManager}              opts.manager - A plugin manager instance.\r\n *\r\n * @param {object}                     [opts.copyProps] - Properties that are copied.\r\n *\r\n * @param {object}                     [opts.passthruProps] - Properties that are passed through.\r\n *\r\n * @param {string|Iterable<string>}    [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n *\r\n * @param {object}                     [opts.options] - Defines options for throwing exceptions. Turned off by default.\r\n *\r\n * @param {boolean}                    [opts.errorCheck=true] - If false optional error checking is disabled.\r\n *\r\n * @returns {Promise<import('../../').PluginEventData>} The PluginEvent data.\r\n */\r\nasync function invokeAsyncEvent({ method, manager, copyProps = {}, passthruProps = {}, plugins = void 0,\r\n options = void 0, errorCheck = true })\r\n{\r\n   if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\r\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\r\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\r\n\r\n   if (options === void 0) { options = manager.getOptions(); }\r\n   if (plugins === void 0) { plugins = manager.getPluginMapKeys(); }\r\n\r\n   if (typeof plugins !== 'string' && !isIterable(plugins))\r\n   {\r\n      throw new TypeError(`'plugins' is not a string or iterable.`);\r\n   }\r\n\r\n   // Track how many plugins were invoked.\r\n   let pluginInvokeCount = 0;\r\n   const pluginInvokeNames = [];\r\n\r\n   // Track if a plugin method is invoked\r\n   let hasMethod = false;\r\n   let hasPlugin = false;\r\n\r\n   // Create plugin event.\r\n   const ev = new PluginInvokeEvent(copyProps, passthruProps);\r\n\r\n   const results = [];\r\n\r\n   if (typeof plugins === 'string')\r\n   {\r\n      const entry = manager.getPluginEntry(plugins);\r\n\r\n      if (entry !== void 0 && entry.enabled && entry.instance)\r\n      {\r\n         hasPlugin = true;\r\n\r\n         if (typeof entry.instance[method] === 'function')\r\n         {\r\n            ev.eventbus = entry.eventbusProxy;\r\n            ev.pluginName = entry.name;\r\n            ev.pluginOptions = entry.data.plugin.options;\r\n\r\n            const result = entry.instance[method](ev);\r\n\r\n            if (typeof result !== 'undefined' && result !== null) { results.push(result); }\r\n\r\n            hasMethod = true;\r\n            pluginInvokeCount++;\r\n            pluginInvokeNames.push(entry.name);\r\n         }\r\n      }\r\n   }\r\n   else\r\n   {\r\n      for (const name of plugins)\r\n      {\r\n         const entry = manager.getPluginEntry(name);\r\n\r\n         if (entry !== void 0 && entry.enabled && entry.instance)\r\n         {\r\n            hasPlugin = true;\r\n\r\n            if (typeof entry.instance[method] === 'function')\r\n            {\r\n               ev.eventbus = entry.eventbusProxy;\r\n               ev.pluginName = entry.name;\r\n               ev.pluginOptions = entry.data.plugin.options;\r\n\r\n               const result = entry.instance[method](ev);\r\n\r\n               if (typeof result !== 'undefined' && result !== null) { results.push(result); }\r\n\r\n               hasMethod = true;\r\n               pluginInvokeCount++;\r\n               pluginInvokeNames.push(entry.name);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   if (errorCheck && options.throwNoPlugin && !hasPlugin)\r\n   {\r\n      throw new Error(`PluginManager failed to find any target plugins.`);\r\n   }\r\n\r\n   if (errorCheck && options.throwNoMethod && !hasMethod)\r\n   {\r\n      throw new Error(`PluginManager failed to invoke '${method}'.`);\r\n   }\r\n\r\n   // Add meta data for plugin invoke count.\r\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\r\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\r\n\r\n   await Promise.all(results);\r\n\r\n   return ev.data;\r\n}\n\n/**\r\n * Private implementation to invoke synchronous events. This allows internal calls in PluginManager for\r\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\r\n *\r\n * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\r\n *\r\n * @param {object}                     opts - Options object.\r\n *\r\n * @param {string}                     opts.method - Method name to invoke.\r\n *\r\n * @param {import('../../').PluginManager}              opts.manager - A plugin manager instance.\r\n *\r\n * @param {object}                     [opts.copyProps] - Properties that are copied.\r\n *\r\n * @param {object}                     [opts.passthruProps] - Properties that are passed through.\r\n *\r\n * @param {string|Iterable<string>}    [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n *\r\n * @param {object}                     [opts.options] - Defines options for throwing exceptions. Turned off by default.\r\n *\r\n * @param {boolean}                    [opts.errorCheck=true] - If false optional error checking is disabled.\r\n *\r\n * @returns {import('../../').PluginEventData} The PluginEvent data.\r\n */\r\nfunction invokeSyncEvent({ method, manager, copyProps = {}, passthruProps = {}, plugins = void 0,\r\n options = void 0, errorCheck = true })\r\n{\r\n   if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\r\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\r\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\r\n\r\n   if (options === void 0) { options = manager.getOptions(); }\r\n   if (plugins === void 0) { plugins = manager.getPluginMapKeys(); }\r\n\r\n   if (typeof plugins !== 'string' && !isIterable(plugins))\r\n   {\r\n      throw new TypeError(`'plugins' is not a string or iterable.`);\r\n   }\r\n\r\n   // Track how many plugins were invoked.\r\n   let pluginInvokeCount = 0;\r\n   const pluginInvokeNames = [];\r\n\r\n   // Track if a plugin method is invoked\r\n   let hasMethod = false;\r\n   let hasPlugin = false;\r\n\r\n   // Create plugin event.\r\n   const ev = new PluginInvokeEvent(copyProps, passthruProps);\r\n\r\n   if (typeof plugins === 'string')\r\n   {\r\n      const entry = manager.getPluginEntry(plugins);\r\n\r\n      if (entry !== void 0 && entry.enabled && entry.instance)\r\n      {\r\n         hasPlugin = true;\r\n\r\n         if (typeof entry.instance[method] === 'function')\r\n         {\r\n            ev.eventbus = entry.eventbusProxy;\r\n            ev.pluginName = entry.name;\r\n            ev.pluginOptions = entry.data.plugin.options;\r\n\r\n            entry.instance[method](ev);\r\n\r\n            hasMethod = true;\r\n            pluginInvokeCount++;\r\n            pluginInvokeNames.push(entry.name);\r\n         }\r\n      }\r\n   }\r\n   else\r\n   {\r\n      for (const name of plugins)\r\n      {\r\n         const entry = manager.getPluginEntry(name);\r\n\r\n         if (entry !== void 0 && entry.enabled && entry.instance)\r\n         {\r\n            hasPlugin = true;\r\n\r\n            if (typeof entry.instance[method] === 'function')\r\n            {\r\n               ev.eventbus = entry.eventbusProxy;\r\n               ev.pluginName = entry.name;\r\n               ev.pluginOptions = entry.data.plugin.options;\r\n\r\n               entry.instance[method](ev);\r\n\r\n               hasMethod = true;\r\n               pluginInvokeCount++;\r\n               pluginInvokeNames.push(entry.name);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   if (errorCheck && options.throwNoPlugin && !hasPlugin)\r\n   {\r\n      throw new Error(`PluginManager failed to find any target plugins.`);\r\n   }\r\n\r\n   if (errorCheck && options.throwNoMethod && !hasMethod)\r\n   {\r\n      throw new Error(`PluginManager failed to invoke '${method}'.`);\r\n   }\r\n\r\n   // Add meta data for plugin invoke count.\r\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\r\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\r\n\r\n   return ev.data;\r\n}\n\n/**\r\n * @typedef {import('../../interfaces').PluginSupportImpl} MyInterface\r\n */\r\n\r\n/**\r\n * PluginInvokeSupport adds direct method invocation support to PluginManager via the eventbus and alternately through\r\n * a wrapped instance of PluginManager depending on the use case.\r\n *\r\n * There are two types of invocation methods the first spreads an array of arguments to the invoked method. The second\r\n * constructs a {@link PluginInvokeEvent} to pass to the method with a single parameter.\r\n *\r\n * TODO: more info and wiki link\r\n *\r\n * When added to a PluginManager through constructor initialization the following events are registered on the plugin\r\n * manager eventbus:\r\n *\r\n * `plugins:async:invoke` - {@link PluginInvokeSupport#invokeAsync}\r\n *\r\n * `plugins:async:invoke:event` - {@link PluginInvokeSupport#invokeAsyncEvent}\r\n *\r\n * `plugins:get:method:names` - {@link PluginInvokeSupport#getMethodNames}\r\n *\r\n * `plugins:has:method` - {@link PluginInvokeSupport#hasMethod}\r\n *\r\n * `plugins:invoke` - {@link PluginInvokeSupport#invoke}\r\n *\r\n * `plugins:sync:invoke` - {@link PluginInvokeSupport#invokeSync}\r\n *\r\n * `plugins:sync:invoke:event` - {@link PluginInvokeSupport#invokeSyncEvent}\r\n *\r\n * @example\r\n * ```js\r\n * // One can also indirectly invoke any method of the plugin.\r\n * // Any plugin with a method named `aCoolMethod` is invoked.\r\n * eventbus.triggerSync('plugins:invoke:sync:event', { method: 'aCoolMethod' });\r\n *\r\n * // A specific invocation just for the 'an-npm-plugin-enabled-module'\r\n * eventbus.triggerSync('plugins:invoke:sync:event', {\r\n *    method: 'aCoolMethod',\r\n *    plugins: 'an-npm-plugin-enabled-module'\r\n * });\r\n *\r\n * // There are two other properties `copyProps` and `passthruProps` which can be set with object data to _copy_ or\r\n * // _pass through_ to the invoked method.\r\n * ```\r\n *\r\n * @implements {MyInterface}\r\n */\r\nclass PluginInvokeSupport\r\n{\r\n   /**\r\n    * @type {import('../..').PluginManager}\r\n    */\r\n   #pluginManager = null;\r\n\r\n   /**\r\n    * Create PluginInvokeSupport\r\n    *\r\n    * @param {import('../..').PluginManager} pluginManager - The plugin manager to associate.\r\n    */\r\n   constructor(pluginManager)\r\n   {\r\n      this.#pluginManager = pluginManager;\r\n   }\r\n\r\n   /**\r\n    * Returns whether the associated plugin manager has been destroyed.\r\n    *\r\n    * @returns {boolean} Returns whether the plugin manager has been destroyed.\r\n    */\r\n   get isDestroyed()\r\n   {\r\n      return this.#pluginManager === null || this.#pluginManager.isDestroyed;\r\n   }\r\n\r\n   /**\r\n    * Returns the associated plugin manager options.\r\n    *\r\n    * @returns {import('../../').PluginManagerOptions} The associated plugin manager options.\r\n    */\r\n   get options()\r\n   {\r\n      /* c8 ignore next 1 */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.#pluginManager.getOptions();\r\n   }\r\n\r\n   /**\r\n    * Gets the associated plugin manager.\r\n    *\r\n    * @returns {import('../../').PluginManager} The associated plugin manager\r\n    */\r\n   get pluginManager()\r\n   {\r\n      /* c8 ignore next 1 */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.#pluginManager;\r\n   }\r\n\r\n   /**\r\n    * Destroys all managed plugins after unloading them.\r\n    *\r\n    * @param {object}     opts - An options object.\r\n    *\r\n    * @param {import('#eventbus').Eventbus}   opts.eventbus - The eventbus to disassociate.\r\n    *\r\n    * @param {string}     opts.eventPrepend - The current event prepend.\r\n    */\r\n   async destroy({ eventbus, eventPrepend })\r\n   {\r\n      if (eventbus !== null && eventbus !== void 0)\r\n      {\r\n         eventbus.off(`${eventPrepend}:async:invoke`, this.invokeAsync, this);\r\n         eventbus.off(`${eventPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\r\n         eventbus.off(`${eventPrepend}:get:method:names`, this.getMethodNames, this);\r\n         eventbus.off(`${eventPrepend}:has:method`, this.hasMethod, this);\r\n         eventbus.off(`${eventPrepend}:invoke`, this.invoke, this);\r\n         eventbus.off(`${eventPrepend}:sync:invoke`, this.invokeSync, this);\r\n         eventbus.off(`${eventPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\r\n      }\r\n\r\n      this.#pluginManager = null;\r\n   }\r\n\r\n   /**\r\n    * Returns method names for a specific plugin, list of plugins, or all plugins. The enabled state can be specified\r\n    * along with sorting methods by plugin name.\r\n    *\r\n    * @param {object}                  [opts] - Options object. If undefined all plugin data is returned.\r\n    *\r\n    * @param {boolean}                 [opts.enabled] - If enabled is a boolean it will return plugin methods names\r\n    *                                                   given the respective enabled state.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names.\r\n    *\r\n    * @returns {string[]} A list of method names\r\n    */\r\n   getMethodNames({ enabled = void 0, plugins = [] } = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (enabled !== void 0 && typeof enabled !== 'boolean')\r\n      {\r\n         throw new TypeError(`'enabled' is not a boolean.`);\r\n      }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Create an array from a single plugin name.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         plugins = [plugins];\r\n      }\r\n\r\n      const anyEnabledState = enabled === void 0;\r\n\r\n      const results = {};\r\n\r\n      let count = 0;\r\n\r\n      for (const name of plugins)\r\n      {\r\n         const entry = this.pluginManager.getPluginEntry(name);\r\n\r\n         if (entry !== void 0 && entry.instance && (anyEnabledState || entry.enabled === enabled))\r\n         {\r\n            for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\r\n            {\r\n               // Skip any names that are not a function or are the constructor.\r\n               if (typeof entry.instance[name] === 'function' && name !== 'constructor') { results[name] = true; }\r\n            }\r\n         }\r\n\r\n         count++;\r\n      }\r\n\r\n      // Iterable plugins had no entries so return all plugin data.\r\n      if (count === 0)\r\n      {\r\n         for (const entry of this.pluginManager.getPluginMapValues())\r\n         {\r\n            if (entry.instance && (anyEnabledState || entry.enabled === enabled))\r\n            {\r\n               for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\r\n               {\r\n                  // Skip any names that are not a function or are the constructor.\r\n                  if (typeof entry.instance[name] === 'function' && name !== 'constructor') { results[name] = true; }\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      return Object.keys(results).sort();\r\n   }\r\n\r\n   /**\r\n    * Checks if the provided method name exists across all plugins or specific plugins if defined.\r\n    *\r\n    * @param {object}                  opts - Options object.\r\n    *\r\n    * @param {string}                  opts.method - Method name to test.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to check for method. If\r\n    *                                                   undefined all plugins must contain the method.\r\n    *\r\n    * @returns {boolean} - True method is found.\r\n    */\r\n   hasMethod({ method, plugins = [] })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof method !== 'string')\r\n      {\r\n         throw new TypeError(`'method' is not a string.`);\r\n      }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Return a single boolean enabled result for a single plugin if found.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const entry = this.pluginManager.getPluginEntry(plugins);\r\n         return entry !== void 0 && typeof entry.instance[method] === 'function';\r\n      }\r\n\r\n      let count = 0;\r\n\r\n      for (const name of plugins)\r\n      {\r\n         const entry = this.pluginManager.getPluginEntry(name);\r\n\r\n         if (entry !== void 0 && typeof entry.instance[method] !== 'function') { return false; }\r\n\r\n         count++;\r\n      }\r\n\r\n      // Iterable plugins had no entries so check all plugin data.\r\n      if (count === 0)\r\n      {\r\n         for (const entry of this.pluginManager.getPluginMapValues())\r\n         {\r\n            if (typeof entry.instance[method] !== 'function') { return false; }\r\n         }\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   /**\r\n    * This dispatch method simply invokes any plugin targets for the given method name.\r\n    *\r\n    * @param {object}   opts - Options object.\r\n    *\r\n    * @param {string}   opts.method - Method name to invoke.\r\n    *\r\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n    */\r\n   invoke({ method, args = void 0, plugins = void 0 })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\r\n\r\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\r\n\r\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Track if a plugin method is invoked.\r\n      let hasMethod = false;\r\n      let hasPlugin = false;\r\n\r\n      const isArgsArray = Array.isArray(args);\r\n\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const entry = this.pluginManager.getPluginEntry(plugins);\r\n\r\n         if (entry !== void 0 && entry.enabled && entry.instance)\r\n         {\r\n            hasPlugin = true;\r\n\r\n            if (typeof entry.instance[method] === 'function')\r\n            {\r\n               isArgsArray ? entry.instance[method](...args) : entry.instance[method]();\r\n\r\n               hasMethod = true;\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name of plugins)\r\n         {\r\n            const entry = this.pluginManager.getPluginEntry(name);\r\n\r\n            if (entry !== void 0 && entry.enabled && entry.instance)\r\n            {\r\n               hasPlugin = true;\r\n\r\n               if (typeof entry.instance[method] === 'function')\r\n               {\r\n                  isArgsArray ? entry.instance[method](...args) : entry.instance[method]();\r\n\r\n                  hasMethod = true;\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      if (this.options.throwNoPlugin && !hasPlugin)\r\n      {\r\n         throw new Error(`PluginManager failed to find any target plugins.`);\r\n      }\r\n\r\n      if (this.options.throwNoMethod && !hasMethod)\r\n      {\r\n         throw new Error(`PluginManager failed to invoke '${method}'.`);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * This dispatch method is asynchronous and adds any returned results to an array which is resolved via Promise.all\r\n    * Any target invoked may return a Promise or any result.\r\n    *\r\n    * @param {object}   opts - Options object.\r\n    *\r\n    * @param {string}   opts.method - Method name to invoke.\r\n    *\r\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n    *\r\n    * @returns {Promise<*|*[]>} A single result or array of results.\r\n    */\r\n   async invokeAsync({ method, args = void 0, plugins = void 0 })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\r\n\r\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\r\n\r\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Track if a plugin method is invoked.\r\n      let hasMethod = false;\r\n      let hasPlugin = false;\r\n\r\n      // Capture results.\r\n      let result = void 0;\r\n      const results = [];\r\n\r\n      const isArgsArray = Array.isArray(args);\r\n\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const plugin = this.pluginManager.getPluginEntry(plugins);\r\n\r\n         if (plugin !== void 0 && plugin.enabled && plugin.instance)\r\n         {\r\n            hasPlugin = true;\r\n\r\n            if (typeof plugin.instance[method] === 'function')\r\n            {\r\n               result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\r\n\r\n               // If we received a valid result push it to the results.\r\n               if (result !== void 0) { results.push(result); }\r\n\r\n               hasMethod = true;\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name of plugins)\r\n         {\r\n            const plugin = this.pluginManager.getPluginEntry(name);\r\n\r\n            if (plugin !== void 0 && plugin.enabled && plugin.instance)\r\n            {\r\n               hasPlugin = true;\r\n\r\n               if (typeof plugin.instance[method] === 'function')\r\n               {\r\n                  result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\r\n\r\n                  // If we received a valid result push it to the results.\r\n                  if (result !== void 0) { results.push(result); }\r\n\r\n                  hasMethod = true;\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      if (this.options.throwNoPlugin && !hasPlugin)\r\n      {\r\n         throw new Error(`PluginManager failed to find any target plugins.`);\r\n      }\r\n\r\n      if (this.options.throwNoMethod && !hasMethod)\r\n      {\r\n          throw new Error(`PluginManager failed to invoke '${method}'.`);\r\n      }\r\n\r\n      // If there are multiple results then use Promise.all otherwise Promise.resolve.\r\n      return results.length > 1 ? Promise.all(results).then((values) =>\r\n      {\r\n         const filtered = values.filter((entry) => entry !== void 0);\r\n         switch (filtered.length)\r\n         {\r\n            case 0: return void 0;\r\n            case 1: return filtered[0];\r\n            default: return filtered;\r\n         }\r\n      }) : result;\r\n   }\r\n\r\n   /**\r\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\r\n    *\r\n    * @param {object}   opts - Options object.\r\n    *\r\n    * @param {string}   opts.method - Method name to invoke.\r\n    *\r\n    * @param {object}   [opts.copyProps] - Properties that are copied.\r\n    *\r\n    * @param {object}   [opts.passthruProps] - Properties that are passed through.\r\n    *\r\n    * @param {string | Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n    *\r\n    * @returns {Promise<import('../../').PluginEventData>} The PluginEvent data.\r\n    */\r\n   async invokeAsyncEvent({ method, copyProps = {}, passthruProps = {}, plugins = void 0 })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      // Invokes the private internal async events method.\r\n      return invokeAsyncEvent({ method, manager: this.pluginManager, copyProps, passthruProps, plugins });\r\n   }\r\n\r\n   /**\r\n    * This dispatch method synchronously passes back a single value or an array with all results returned by any\r\n    * invoked targets.\r\n    *\r\n    * @param {object}   opts - Options object.\r\n    *\r\n    * @param {string}   opts.method - Method name to invoke.\r\n    *\r\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n    *\r\n    * @returns {*|*[]} A single result or array of results.\r\n    */\r\n   invokeSync({ method, args = void 0, plugins = void 0 })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\r\n\r\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\r\n\r\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Track if a plugin method is invoked.\r\n      let hasMethod = false;\r\n      let hasPlugin = false;\r\n\r\n      // Capture results.\r\n      let result = void 0;\r\n      const results = [];\r\n\r\n      const isArgsArray = Array.isArray(args);\r\n\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const plugin = this.pluginManager.getPluginEntry(plugins);\r\n\r\n         if (plugin !== void 0 && plugin.enabled && plugin.instance)\r\n         {\r\n            hasPlugin = true;\r\n\r\n            if (typeof plugin.instance[method] === 'function')\r\n            {\r\n               result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\r\n\r\n               // If we received a valid result push it to the results.\r\n               if (result !== void 0) { results.push(result); }\r\n\r\n               hasMethod = true;\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name of plugins)\r\n         {\r\n            const plugin = this.pluginManager.getPluginEntry(name);\r\n\r\n            if (plugin !== void 0 && plugin.enabled && plugin.instance)\r\n            {\r\n               hasPlugin = true;\r\n\r\n               if (typeof plugin.instance[method] === 'function')\r\n               {\r\n                  result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\r\n\r\n                  // If we received a valid result push it to the results.\r\n                  if (result !== void 0) { results.push(result); }\r\n\r\n                  hasMethod = true;\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      if (this.options.throwNoPlugin && !hasPlugin)\r\n      {\r\n         throw new Error(`PluginManager failed to find any target plugins.`);\r\n      }\r\n\r\n      if (this.options.throwNoMethod && !hasMethod)\r\n      {\r\n         throw new Error(`PluginManager failed to invoke '${method}'.`);\r\n      }\r\n\r\n      // Return the results array if there are more than one or just a single result.\r\n      return results.length > 1 ? results : result;\r\n   }\r\n\r\n   /**\r\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\r\n    *\r\n    * @param {object}            opts - Options object.\r\n    *\r\n    * @param {string}            opts.method - Method name to invoke.\r\n    *\r\n    * @param {object}            [opts.copyProps] - Properties that are copied.\r\n    *\r\n    * @param {object}            [opts.passthruProps] - Properties that are passed through.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n    *\r\n    * @returns {import('../../').PluginEventData} The PluginEvent data.\r\n    */\r\n   invokeSyncEvent({ method, copyProps = {}, passthruProps = {}, plugins = void 0 })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      // Invokes the private internal sync events method.\r\n      return invokeSyncEvent({ method, manager: this.pluginManager, copyProps, passthruProps, plugins });\r\n   }\r\n\r\n   /**\r\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\r\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\r\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\r\n    *\r\n    * @param {object}     opts - An options object.\r\n    *\r\n    * @param {import('#eventbus').Eventbus}   opts.oldEventbus - The old eventbus to disassociate.\r\n    *\r\n    * @param {import('#eventbus').Eventbus}   opts.newEventbus - The new eventbus to associate.\r\n    *\r\n    * @param {string}     opts.oldPrepend - The old event prepend.\r\n    *\r\n    * @param {string}     opts.newPrepend - The new event prepend.\r\n    */\r\n   setEventbus({ oldEventbus, newEventbus, oldPrepend, newPrepend })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (oldEventbus !== null && oldEventbus !== void 0)\r\n      {\r\n         oldEventbus.off(`${oldPrepend}:async:invoke`, this.invokeAsync, this);\r\n         oldEventbus.off(`${oldPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\r\n         oldEventbus.off(`${oldPrepend}:get:method:names`, this.getMethodNames, this);\r\n         oldEventbus.off(`${oldPrepend}:has:method`, this.hasMethod, this);\r\n         oldEventbus.off(`${oldPrepend}:invoke`, this.invoke, this);\r\n         oldEventbus.off(`${oldPrepend}:sync:invoke`, this.invokeSync, this);\r\n         oldEventbus.off(`${oldPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\r\n      }\r\n\r\n      if (newEventbus !== null && newEventbus !== void 0)\r\n      {\r\n         newEventbus.on(`${newPrepend}:async:invoke`, this.invokeAsync, this, { guard: true });\r\n         newEventbus.on(`${newPrepend}:async:invoke:event`, this.invokeAsyncEvent, this, { guard: true });\r\n         newEventbus.on(`${newPrepend}:get:method:names`, this.getMethodNames, this, { guard: true });\r\n         newEventbus.on(`${newPrepend}:has:method`, this.hasMethod, this, { guard: true });\r\n         newEventbus.on(`${newPrepend}:invoke`, this.invoke, this, { guard: true });\r\n         newEventbus.on(`${newPrepend}:sync:invoke`, this.invokeSync, this, { guard: true });\r\n         newEventbus.on(`${newPrepend}:sync:invoke:event`, this.invokeSyncEvent, this, { guard: true });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Set optional parameters.\r\n    *\r\n    * @param {import('../../').PluginManagerOptions} options Defines optional parameters to set.\r\n    */\r\n   setOptions(options)  // eslint-disable-line no-unused-vars\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n   }\r\n}\r\n\r\n// Module Private ----------------------------------------------------------------------------------------------------\r\n\r\n/**\r\n * Walks an objects inheritance tree collecting property names stopping before `Object` is reached.\r\n *\r\n * @param {object}   obj - object to walks.\r\n *\r\n * @returns {string[]} A list of property names.\r\n * @ignore\r\n */\r\nconst s_GET_ALL_PROPERTY_NAMES = (obj) =>\r\n{\r\n   const props = [];\r\n\r\n   do\r\n   {\r\n      Object.getOwnPropertyNames(obj).forEach((prop) => { if (props.indexOf(prop) === -1) { props.push(prop); } });\r\n      obj = Object.getPrototypeOf(obj);\r\n   } while (obj !== void 0 && obj !== null && !(obj === Object.prototype));\r\n\r\n   return props;\r\n};\n\nconst s_REGEX_ESCAPE_RELATIVE = /^([.]{1,2}[\\\\|/])+/g;\r\nconst s_REGEX_ESCAPE_FORWARD = /[\\\\]/g;\r\nconst s_REGEX_STRING_URL = /^(https?|file):/g;\r\n\r\n/**\r\n * Creates an escaped path which is suitable for use in RegExp construction.\r\n *\r\n * Note: This function will throw if a malformed URL string is the target. In AbstractPluginManager this function\r\n * is used after the module has been loaded / is a good target.\r\n *\r\n * @param {string|URL}  target - Target full / relative path or URL to escape.\r\n *\r\n * @returns {string} The escaped target.\r\n */\r\nfunction escapeTarget(target)\r\n{\r\n   if (typeof target !== 'string' && !(target instanceof URL))\r\n   {\r\n      throw new TypeError(`'target' is not a string or URL.`);\r\n   }\r\n\r\n   /** @type {string} */\r\n   let targetEscaped = typeof target === 'string' ? target : void 0;\r\n\r\n   if (target instanceof URL)\r\n   {\r\n      targetEscaped = target.pathname;\r\n   }\r\n   else if (target.match(s_REGEX_STRING_URL))\r\n   {\r\n      targetEscaped = new URL(target).pathname;\r\n   }\r\n\r\n   targetEscaped = targetEscaped.replace(s_REGEX_ESCAPE_RELATIVE, '');\r\n   targetEscaped = targetEscaped.replace(s_REGEX_ESCAPE_FORWARD, '\\\\\\\\');\r\n\r\n   return targetEscaped;\r\n}\n\n/**\r\n * Performs validation of a PluginConfig.\r\n *\r\n * @param {import('..').PluginConfig}   pluginConfig A PluginConfig to validate.\r\n *\r\n * @returns {boolean} True if the given PluginConfig is valid.\r\n */\r\nfunction isValidConfig(pluginConfig)\r\n{\r\n   if (typeof pluginConfig !== 'object') { return false; }\r\n\r\n   if (typeof pluginConfig.name !== 'string') { return false; }\r\n\r\n   if (typeof pluginConfig.target !== 'undefined' && typeof pluginConfig.target !== 'string' &&\r\n    !(pluginConfig.target instanceof URL))\r\n   {\r\n      return false;\r\n   }\r\n\r\n   if (typeof pluginConfig.options !== 'undefined' && typeof pluginConfig.options !== 'object') { return false; }\r\n\r\n   return true;\r\n}\n\n/**\r\n * Resolves a dynamically imported module for PluginManager. This function is passed to `@typhonjs-utils/loader-module`.\r\n *\r\n * @param {object}   module - The imported module.\r\n *\r\n * @returns {*} The export most likely to match a valid plugin.\r\n */\r\nfunction resolveModule(module)\r\n{\r\n   // If the module has a named export for `onPluginLoad` then take the module.\r\n   if (typeof module.onPluginLoad === 'function')\r\n   {\r\n      return module;\r\n   }\r\n   // Then potentially resolve any default export / static class.\r\n   else if (module.default)\r\n   {\r\n      return module.default;\r\n   }\r\n   // Finally resolve as just the module.\r\n   else\r\n   {\r\n      return module;\r\n   }\r\n}\n\n/**\r\n * Provides a lightweight plugin manager for Node / NPM & the browser with eventbus integration for plugins in a safe\r\n * and protected manner across NPM modules, local files, and preloaded object instances. This pattern facilitates\r\n * message passing between modules versus direct dependencies / method invocation.\r\n *\r\n * A default eventbus will be created, but you may also pass in an eventbus from `@typhonjs-plugin/eventbus` and the\r\n * plugin manager will register by default under these event categories:\r\n *\r\n * `plugins:async:add` - {@link PluginManager#add}\r\n *\r\n * `plugins:async:add:all` - {@link PluginManager#addAll}\r\n *\r\n * `plugins:async:destroy:manager` - {@link PluginManager#destroy}\r\n *\r\n * `plugins:async:remove` - {@link PluginManager#remove}\r\n *\r\n * `plugins:async:remove:all` - {@link PluginManager#removeAll}\r\n *\r\n * `plugins:get:enabled` - {@link PluginManager#getEnabled}\r\n *\r\n * `plugins:get:options` - {@link PluginManager#getOptions}\r\n *\r\n * `plugins:get:plugin:by:event` - {@link PluginManager#getPluginByEvent}\r\n *\r\n * `plugins:get:plugin:data` - {@link PluginManager#getPluginData}\r\n *\r\n * `plugins:get:plugin:events` - {@link PluginManager#getPluginEvents}\r\n *\r\n * `plugins:get:plugin:names` - {@link PluginManager#getPluginNames}\r\n *\r\n * `plugins:has:plugin` - {@link PluginManager#hasPlugins}\r\n *\r\n * `plugins:is:valid:config` - {@link PluginManager#isValidConfig}\r\n *\r\n * `plugins:set:enabled` - {@link PluginManager#setEnabled}\r\n *\r\n * `plugins:set:options` - {@link PluginManager#setOptions}\r\n *\r\n * Automatically when a plugin is loaded and unloaded respective functions `onPluginLoad` and `onPluginUnload` will\r\n * be attempted to be invoked on the plugin. This is an opportunity for the plugin to receive any associated eventbus\r\n * and wire itself into it. It should be noted that a protected proxy around the eventbus is passed to the plugins\r\n * such that when the plugin is removed automatically all events registered on the eventbus are cleaned up without\r\n * a plugin author needing to do this manually in the `onPluginUnload` callback. This solves any dangling event binding\r\n * issues.\r\n *\r\n * By supporting ES Modules / CommonJS in Node and ES Modules in the browser the plugin manager is by nature\r\n * asynchronous for the core methods of adding / removing plugins and destroying the manager. The lifecycle methods\r\n * `onPluginLoad` and `onPluginUnload` will be awaited on such that if a plugin returns a Promise or is an async method\r\n * then it will complete before execution continues.\r\n *\r\n * It is recommended to interact with the plugin manager eventbus through an eventbus proxy. The\r\n * `createEventbusProxy` method will return a proxy to the default or currently set eventbus.\r\n *\r\n * It should be noted that this module re-exports `@typhonjs-plugin/eventbus` which is available as named exports via\r\n * the `eventbus` subpath export:\r\n * ```js\r\n * // Main Eventbus implementations:\r\n * import { Eventbus, EventbusProxy, EventbusSecure } from '@typhonjs-plugin/manager/eventbus';\r\n *\r\n * // Consistent bus instances useful for testing and broad accessibility:\r\n * import { mainEventbus, pluginEventbus, testEventbus } from '@typhonjs-plugin/manager/eventbus/buses';\r\n * ```\r\n *\r\n * This reexport is for convenience as it provides one single distribution for Node & browser usage.\r\n *\r\n * If external eventbus functionality is enabled by passing in an eventbus in the constructor of PluginManager it is\r\n * important especially if using an existing process / global level eventbus instance from either this module or\r\n * `@typhonjs-plugin/eventbus` to call {@link PluginManager#destroy} to clean up all plugin eventbus resources and the\r\n * plugin manager event bindings; this is primarily a testing concern when running repeated tests over a reused\r\n * eventbus.\r\n *\r\n * For more information on Eventbus functionality please see:\r\n *\r\n * @see https://www.npmjs.com/package/@typhonjs-plugin/eventbus\r\n *\r\n * The PluginManager instance can be extended through runtime composition by passing in _classes_ that implement\r\n * {@link PluginSupportImpl}. One such implementation is available {@link PluginInvokeSupport} which enables directly\r\n * invoking methods of all or specific plugins. Please see the documentation for PluginInvokeSupport for more details.\r\n *\r\n * Several abbreviated examples follow. Please see the wiki for more details:\r\n * TODO: add wiki link\r\n *\r\n * @example\r\n * import PluginManager from '@typhonjs-plugin/manager';\r\n *\r\n * const pluginManager = new PluginManager();\r\n *\r\n * await pluginManager.add({ name: 'an-npm-plugin-enabled-module' });\r\n * await pluginManager.add({ name: 'my-local-module', target: './myModule.js' });\r\n *\r\n * const eventbus = pluginManager.createEventbusProxy();\r\n *\r\n * // Let's say an-npm-plugin-enabled-module responds to 'cool:event' which returns 'true'.\r\n * // Let's say my-local-module responds to 'hot:event' which returns 'false'.\r\n * // Both of the plugin / modules will have 'onPluginLoaded' invoked with a proxy to the eventbus and any plugin\r\n * // options defined.\r\n *\r\n * // One can then use the eventbus functionality to invoke associated module / plugin methods even retrieving results.\r\n * assert(eventbus.triggerSync('cool:event') === true);\r\n * assert(eventbus.triggerSync('hot:event') === false);\r\n */\r\nclass PluginManager\r\n{\r\n   /**\r\n    * Stores the associated eventbus.\r\n    *\r\n    * @type {import('#manager/eventbus').Eventbus}\r\n    */\r\n   #eventbus = null;\r\n\r\n   /**\r\n    * Stores any EventbusProxy instances created, so that they may be automatically destroyed.\r\n    *\r\n    * @type {import('#manager/eventbus').EventbusProxy[]}\r\n    */\r\n   #eventbusProxies = [];\r\n\r\n   /**\r\n    * Stores any EventbusSecure instances created, so that they may be automatically destroyed.\r\n    *\r\n    * @type {import('#manager/eventbus').EventbusSecureObj[]}\r\n    */\r\n   #eventbusSecure = [];\r\n\r\n   /**\r\n    * Defines various options for the plugin manager. By default plugins are enabled, no event invoke, and no\r\n    * event set options are enabled; the latter two preventing invoke dispatch methods functioning on the eventbus\r\n    * along with not being able to set the plugin manager options by the eventbus. These must be explicitly turned\r\n    * off.\r\n    *\r\n    * @type {import('.').PluginManagerOptions}\r\n    */\r\n   #options =\r\n   {\r\n      noEventAdd: false,\r\n      noEventDestroy: true,\r\n      noEventRemoval: false,\r\n      noEventSetEnabled: true,\r\n      noEventSetOptions: true,\r\n      throwNoMethod: false,\r\n      throwNoPlugin: false\r\n   };\r\n\r\n   /**\r\n    * Stores the plugins currently being loaded by plugin name. During the add process this is important to track\r\n    * in cases when PluginManager is being used incorrectly in a non-async / await manner.\r\n    *\r\n    * @type {Set<string>}\r\n    */\r\n   #pluginAddSet = new Set();\r\n\r\n   /**\r\n    * Stores the plugins by name with an associated PluginEntry.\r\n    *\r\n    * @type {Map<string, import('./PluginEntry.js').PluginEntry>}\r\n    */\r\n   #pluginMap = new Map();\r\n\r\n   /**\r\n    * Provides an array of PluginSupportImpl interfaces to extend the plugin manager through the eventbus API.\r\n    *\r\n    * @type {import('./interfaces').PluginSupportImpl[]}\r\n    */\r\n   #pluginSupport = [];\r\n\r\n   /**\r\n    * Instantiates PluginManager\r\n    *\r\n    * @param {object}   [options] - Provides various configuration options:\r\n    *\r\n    * @param {import('#manager/eventbus').Eventbus} [options.eventbus] - An instance of '@typhonjs-plugin/eventbus'\r\n    *        used as the plugin eventbus. If not provided a default eventbus is created.\r\n    *\r\n    * @param {string}   [options.eventPrepend='plugin'] - A customized name to prepend PluginManager events on the\r\n    *                                                     eventbus.\r\n    *\r\n    * @param {import('.').PluginManagerOptions}  [options.manager] - The plugin manager options.\r\n    *\r\n    * @param {(\r\n    *    import('./interfaces').PluginSupportConstructor |\r\n    *    Iterable<import('./interfaces').PluginSupportConstructor>\r\n    * )} [options.PluginSupport] - Optional classes to pass in which extends the plugin manager. A default\r\n    * implementation is available: {@link PluginInvokeSupport}\r\n    */\r\n   constructor(options = {})\r\n   {\r\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\r\n\r\n      if (options.eventbus !== void 0 && !isObject(options.eventbus))\r\n      {\r\n         throw new TypeError(`'options.eventbus' is not an Eventbus.`);\r\n      }\r\n\r\n      if (options.eventPrepend !== void 0 && typeof options.eventPrepend !== 'string')\r\n      {\r\n         throw new TypeError(`'options.eventPrepend' is not a string.`);\r\n      }\r\n\r\n      if (options.manager !== void 0 && !isObject(options.manager))\r\n      {\r\n         throw new TypeError(`'options.manager' is not an object.`);\r\n      }\r\n\r\n      if (options.PluginSupport !== void 0 && typeof options.PluginSupport !== 'function' &&\r\n       !isIterable(options.PluginSupport))\r\n      {\r\n         throw new TypeError(\r\n          `'options.PluginSupport' must be a constructor function or iterable of such matching PluginSupportImpl.`);\r\n      }\r\n\r\n      // Instantiate any PluginSupport classes\r\n      if (isIterable(options.PluginSupport) && Symbol.iterator in options.PluginSupport)\r\n      {\r\n         for (const PluginSupport of options.PluginSupport)\r\n         {\r\n            this.#pluginSupport.push(new PluginSupport(this));\r\n         }\r\n      }\r\n      else if (options.PluginSupport !== void 0 && !(Symbol.iterator in options.PluginSupport))\r\n      {\r\n         const PluginSupport = options.PluginSupport;\r\n         this.#pluginSupport.push(new PluginSupport(this));\r\n      }\r\n\r\n      this.setOptions(options.manager || {});\r\n\r\n      this.setEventbus({\r\n         eventbus: options.eventbus !== void 0 ? options.eventbus : new Eventbus(),\r\n         eventPrepend: options.eventPrepend\r\n      });\r\n   }\r\n\r\n   /**\r\n    * Adds a plugin by the given configuration parameters. A plugin `name` is always required. If no other options\r\n    * are provided then the `name` doubles as the NPM module / local file to load. The loading first checks for an\r\n    * existing `instance` to use as the plugin. Then the `target` is chosen as the NPM module / local file to load.\r\n    * By passing in `options` this will be stored and accessible to the plugin during all callbacks.\r\n    *\r\n    * @param {import('.').PluginConfig}   pluginConfig - Defines the plugin to load.\r\n    *\r\n    * @param {object}         [moduleData] - Optional object hash to associate with plugin.\r\n    *\r\n    * @returns {Promise<import('.').PluginData>} The PluginData that represents the plugin added.\r\n    */\r\n   async add(pluginConfig, moduleData)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof pluginConfig !== 'object') { throw new TypeError(`'pluginConfig' is not an object.`); }\r\n\r\n      if (typeof pluginConfig.name !== 'string')\r\n      {\r\n         throw new TypeError(\r\n          `'pluginConfig.name' is not a string for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\r\n      }\r\n\r\n      if (pluginConfig.target !== void 0 && typeof pluginConfig.target !== 'string' &&\r\n       !(pluginConfig.target instanceof URL))\r\n      {\r\n         throw new TypeError(\r\n          `'pluginConfig.target' is not a string or URL for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\r\n      }\r\n\r\n      if (pluginConfig.options !== void 0 && typeof pluginConfig.options !== 'object')\r\n      {\r\n         throw new TypeError(\r\n          `'pluginConfig.options' is not an object for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\r\n      }\r\n\r\n      if (moduleData !== void 0 && typeof moduleData !== 'object')\r\n      {\r\n         throw new TypeError(`'moduleData' is not an object for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\r\n      }\r\n\r\n      // If a plugin with the same name already exists post a warning and exit early.\r\n      if (this.#pluginMap.has(pluginConfig.name))\r\n      {\r\n         throw new Error(`A plugin already exists with name: ${pluginConfig.name} for entry:\\n${\r\n          JSON.stringify(pluginConfig, null, 3)}`);\r\n      }\r\n\r\n      // If a plugin with the same name is also being currently loaded post a warning and exit early. This is the case\r\n      // when add is used without await and multiple plugins w/ the same name are being dynamically imported.\r\n      if (this.#pluginAddSet.has(pluginConfig.name))\r\n      {\r\n         throw new Error(`A plugin is already being loaded with name: ${pluginConfig.name} for entry:\\n${\r\n          JSON.stringify(pluginConfig, null, 3)}`);\r\n      }\r\n\r\n      this.#pluginAddSet.add(pluginConfig.name);\r\n\r\n      let instance, target, type;\r\n\r\n      // Use an existing instance of a plugin; a static class is assumed when instance is a function.\r\n      if (typeof pluginConfig.instance === 'object' || typeof pluginConfig.instance === 'function')\r\n      {\r\n         instance = pluginConfig.instance;\r\n\r\n         target = pluginConfig.name;\r\n\r\n         type = 'instance';\r\n      }\r\n      else\r\n      {\r\n         // If a target is defined use it instead of the name.\r\n         target = pluginConfig.target || pluginConfig.name;\r\n\r\n         try\r\n         {\r\n            const result = await ModuleLoader.load({ modulepath: target, resolveModule });\r\n\r\n            // Please note that a plugin or other logger must be setup on the associated eventbus.\r\n            if (this.#eventbus !== null)\r\n            {\r\n               this.#eventbus.trigger('log:debug',\r\n                `@typhonjs-plugin/manager - ${result.isESM ? 'import' : 'require'}: ${result.loadpath}`);\r\n            }\r\n\r\n            instance = result.instance;\r\n            type = result.type;\r\n         }\r\n         catch (err)\r\n         {\r\n            // Remove tracking of given plugin config name.\r\n            this.#pluginAddSet.delete(pluginConfig.name);\r\n\r\n            throw new Error(`@typhonjs-plugin/manager - Could not load target: ${target}\\n\\nPluginConfig:\\n` +\r\n             `${JSON.stringify(pluginConfig, null, 3)}\\n\\n${err}`);\r\n         }\r\n      }\r\n\r\n      // Convert any URL target a string.\r\n      if (target instanceof URL)\r\n      {\r\n         target = target.toString();\r\n      }\r\n\r\n      /**\r\n       * Create an object hash with data describing the plugin, manager, and any extra module data.\r\n       *\r\n       * @type {import('.').PluginData}\r\n       */\r\n      const pluginData = JSON.parse(JSON.stringify(\r\n      {\r\n         manager:\r\n         {\r\n            eventPrepend: this._eventPrepend,\r\n            scopedName: `${this._eventPrepend}:${pluginConfig.name}`\r\n         },\r\n\r\n         module: moduleData || {},\r\n\r\n         plugin:\r\n         {\r\n            name: pluginConfig.name,\r\n            target,\r\n            targetEscaped: escapeTarget(target),\r\n            type,\r\n            options: pluginConfig.options || {}\r\n         }\r\n      }));\r\n\r\n      deepFreeze(pluginData, ['manager']);\r\n\r\n      const eventbusProxy = this.#eventbus !== null && this.#eventbus !== void 0 ?\r\n       new EventbusProxy(this.#eventbus) /* c8 ignore next */ : void 0;\r\n\r\n      const entry = new PluginEntry(pluginConfig.name, pluginData, instance, eventbusProxy);\r\n\r\n      this.#pluginMap.set(pluginConfig.name, entry);\r\n      this.#pluginAddSet.delete(pluginConfig.name);\r\n\r\n      // Invokes the private internal async events method which allows skipping of error checking.\r\n      const invokeData = await invokeAsyncEvent({\r\n         method: 'onPluginLoad',\r\n         manager: this,\r\n         plugins: pluginConfig.name,\r\n         errorCheck: false\r\n      });\r\n\r\n      if (typeof invokeData.importmeta === 'object')\r\n      {\r\n         entry.importmeta = invokeData.importmeta;\r\n\r\n         // Until we get a Snowpack HMR spec environment for testing ignore this block.\r\n         /* c8 ignore next 7 */\r\n         if (typeof invokeData.importmeta.hot === 'object' && typeof invokeData.importmeta.hot.accept === 'function')\r\n         {\r\n            invokeData.importmeta.hot.accept(({ module }) =>\r\n            {\r\n               this.reload({ plugin: pluginConfig.name, instance: resolveModule(module) });\r\n            });\r\n         }\r\n      }\r\n\r\n      // Invoke `typhonjs:plugin:manager:plugin:added` allowing external code to react to plugin addition.\r\n      if (this.#eventbus)\r\n      {\r\n         await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:added`, pluginData);\r\n      }\r\n\r\n      return pluginData;\r\n   }\r\n\r\n   /**\r\n    * Initializes multiple plugins in a single call.\r\n    *\r\n    * @param {Iterable<import('.').PluginConfig>}   pluginConfigs - An iterable list of plugin config object hash entries.\r\n    *\r\n    * @param {object}                   [moduleData] - Optional object hash to associate with all plugins.\r\n    *\r\n    * @returns {Promise<import('.').PluginData[]>} An array of PluginData objects of all added plugins.\r\n    */\r\n   async addAll(pluginConfigs, moduleData)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (!isIterable(pluginConfigs)) { throw new TypeError(`'pluginConfigs' is not iterable.`); }\r\n\r\n      const pluginsData = [];\r\n\r\n      for (const pluginConfig of pluginConfigs)\r\n      {\r\n         const result = await this.add(pluginConfig, moduleData);\r\n\r\n         if (result) { pluginsData.push(result); }\r\n      }\r\n\r\n      return pluginsData;\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\r\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\r\n    *\r\n    * @param {import('.').PluginConfig}   pluginConfig - Defines the plugin to load.\r\n    *\r\n    * @param {object}         [moduleData] - Optional object hash to associate with all plugins.\r\n    *\r\n    * @returns {Promise<import('.').PluginData>} The PluginData that represents the plugin added.\r\n    * @private\r\n    */\r\n   async _addEventbus(pluginConfig, moduleData)\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return !this.#options.noEventAdd ? this.add(pluginConfig, moduleData) : void 0;\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\r\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\r\n    *\r\n    * @param {Iterable<import('.').PluginConfig>}  pluginConfigs - An iterable list of plugin config object hash entries.\r\n    *\r\n    * @param {object}                  [moduleData] - Optional object hash to associate with all plugins.\r\n    *\r\n    * @returns {Promise<import('.').PluginData[]>} An array of PluginData objects of all added plugins.\r\n    * @private\r\n    */\r\n   async _addAllEventbus(pluginConfigs, moduleData)\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return !this.#options.noEventAdd ? this.addAll(pluginConfigs, moduleData) : [];\r\n   }\r\n\r\n   /**\r\n    * If an eventbus is assigned to this plugin manager then a new EventbusProxy wrapping this eventbus is returned.\r\n    * It is added to `this.#eventbusProxies` so †hat the instances are destroyed when the plugin manager is destroyed.\r\n    *\r\n    * @returns {import('#manager/eventbus').EventbusProxy} A proxy for the currently set Eventbus.\r\n    */\r\n   createEventbusProxy()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      /* c8 ignore next */\r\n      if (this.#eventbus === null) { throw new ReferenceError('No eventbus assigned to plugin manager.'); }\r\n\r\n      const eventbusProxy = new EventbusProxy(this.#eventbus);\r\n\r\n      // Store proxy to make sure it is destroyed when the plugin manager is destroyed.\r\n      this.#eventbusProxies.push(eventbusProxy);\r\n\r\n      return eventbusProxy;\r\n   }\r\n\r\n   /**\r\n    * If an eventbus is assigned to this plugin manager then a new EventbusSecure wrapping this eventbus is returned.\r\n    * It is added to `this.#eventbusSecure` so †hat the instances are destroyed when the plugin manager is destroyed.\r\n    *\r\n    * @param {string}   [name] - Optional name for the EventbusSecure instance.\r\n    *\r\n    * @returns {import('#manager/eventbus').EventbusSecure} A secure wrapper for the currently set Eventbus.\r\n    */\r\n   createEventbusSecure(name = void 0)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      /* c8 ignore next */\r\n      if (this.#eventbus === null) { throw new ReferenceError('No eventbus assigned to plugin manager.'); }\r\n\r\n      const eventbusSecureObj = EventbusSecure.initialize(this.#eventbus, name);\r\n\r\n      // Store EventbusSecure object to make sure it is destroyed when the plugin manager is destroyed.\r\n      this.#eventbusSecure.push(eventbusSecureObj);\r\n\r\n      return eventbusSecureObj.eventbusSecure;\r\n   }\r\n\r\n   /**\r\n    * Destroys all managed plugins after unloading them.\r\n    *\r\n    * @returns {Promise<import('.').DataOutPluginRemoved[]>} A list of plugin names and removal success state.\r\n    */\r\n   async destroy()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      // Remove all plugins; this will invoke onPluginUnload.\r\n      const results = await this.removeAll();\r\n\r\n      // Destroy any EventbusSecure instances created.\r\n      for (const eventbusSecureObj of this.#eventbusSecure)\r\n      {\r\n         eventbusSecureObj.destroy();\r\n      }\r\n\r\n      this.#eventbusSecure = [];\r\n\r\n      // Destroy any EventbusProxy instances created.\r\n      for (const eventbusProxy of this.#eventbusProxies)\r\n      {\r\n         eventbusProxy.destroy();\r\n      }\r\n\r\n      this.#eventbusProxies = [];\r\n\r\n      if (this.#eventbus !== null && this.#eventbus !== void 0)\r\n      {\r\n         this.#eventbus.off(`${this._eventPrepend}:async:add`, this._addEventbus, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:async:add:all`, this._addAllEventbus, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:async:destroy:manager`, this._destroyEventbus, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:async:remove`, this._removeEventbus, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:async:remove:all`, this._removeAllEventbus, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:get:enabled`, this.getEnabled, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:data`, this.getPluginData, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:events`, this.getPluginEvents, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:names`, this.getPluginNames, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:get:options`, this.getOptions, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:has:plugin`, this.hasPlugins, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:is:valid:config`, this.isValidConfig, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:set:enabled`, this._setEnabledEventbus, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:set:options`, this._setOptionsEventbus, this);\r\n      }\r\n\r\n      for (const pluginSupport of this.#pluginSupport)\r\n      {\r\n         await pluginSupport.destroy({ eventbus: this.#eventbus, eventPrepend: this._eventPrepend });\r\n      }\r\n\r\n      this.#pluginSupport = [];\r\n      this.#pluginMap = null;\r\n      this.#eventbus = null;\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent plugin manager destruction if optional `noEventDestroy` is\r\n    * enabled. This disables the ability for the plugin manager to be destroyed via events preventing any external\r\n    * code removing plugins in this manner.\r\n    *\r\n    * @private\r\n    * @returns {Promise<import('.').DataOutPluginRemoved[]>} A list of plugin names and removal success state.\r\n    */\r\n   async _destroyEventbus()\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return !this.#options.noEventDestroy ? this.destroy() : [];\r\n   }\r\n\r\n   /**\r\n    * Returns whether this plugin manager has been destroyed.\r\n    *\r\n    * @returns {boolean} Returns whether this plugin manager has been destroyed.\r\n    */\r\n   get isDestroyed()\r\n   {\r\n      return this.#pluginMap === null || this.#pluginMap === void 0;\r\n   }\r\n\r\n   /**\r\n    * Returns the enabled state of a plugin, a list of plugins, or all plugins.\r\n    *\r\n    * @param {object}                  [opts] - Options object. If undefined all plugin enabled state is returned.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to get state.\r\n    *\r\n    * @returns {boolean|import('.').DataOutPluginEnabled[]} Enabled state for single plugin or array of results for multiple\r\n    *                                                plugins.\r\n    */\r\n   getEnabled({ plugins = [] } = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Return a single boolean enabled result for a single plugin if found.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const entry = this.#pluginMap.get(plugins);\r\n         return entry !== void 0 && entry.enabled;\r\n      }\r\n\r\n      const results = [];\r\n\r\n      let count = 0;\r\n\r\n      for (const plugin of plugins)\r\n      {\r\n         const entry = this.#pluginMap.get(plugin);\r\n         const loaded = entry !== void 0;\r\n         results.push({ plugin, enabled: loaded && entry.enabled, loaded });\r\n         count++;\r\n      }\r\n\r\n      // Iterable plugins had no entries so return all plugin data.\r\n      if (count === 0)\r\n      {\r\n         for (const [plugin, entry] of this.#pluginMap.entries())\r\n         {\r\n            const loaded = entry !== void 0;\r\n            results.push({ plugin, enabled: loaded && entry.enabled, loaded });\r\n         }\r\n      }\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Returns any associated eventbus.\r\n    *\r\n    * @returns {import('#manager/eventbus').EventBus} The associated eventbus.\r\n    */\r\n   getEventbus()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.#eventbus;\r\n   }\r\n\r\n   /**\r\n    * Returns a copy of the plugin manager options.\r\n    *\r\n    * @returns {import('.').PluginManagerOptions} A copy of the plugin manager options.\r\n    */\r\n   getOptions()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return JSON.parse(JSON.stringify(this.#options));\r\n   }\r\n\r\n   /**\r\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\r\n    *\r\n    * @param {object}          opts - Options object.\r\n    *\r\n    * @param {string|RegExp}   opts.event - Event name or RegExp to match event names.\r\n    *\r\n    * @returns {string[] | import('.').DataOutPluginEvents[]} Event binding names registered from the plugin.\r\n    */\r\n   getPluginByEvent({ event })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof event !== 'string' && !(event instanceof RegExp))\r\n      {\r\n         throw new TypeError(`'event' is not a string or RegExp.`);\r\n      }\r\n\r\n      const pluginEvents = this.getPluginEvents();\r\n\r\n      const results = [];\r\n\r\n      if (typeof event === 'string')\r\n      {\r\n         for (const entry of pluginEvents)\r\n         {\r\n            if (entry.events.includes(event)) { results.push(entry.plugin); }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const entry of pluginEvents)\r\n         {\r\n            for (const eventEntry of entry.events)\r\n            {\r\n               if (event.test(eventEntry))\r\n               {\r\n                  results.push(entry.plugin);\r\n                  break;\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Gets the plugin data for a plugin, list of plugins, or all plugins.\r\n    *\r\n    * @param {object}                  [opts] - Options object. If undefined all plugin data is returned.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to get plugin data.\r\n    *\r\n    * @returns {import('.').PluginData | import('.').PluginData[] | undefined} The plugin data for a plugin or list of plugins.\r\n    */\r\n   getPluginData({ plugins = [] } = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Return a PluginData result for a single plugin if found.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const entry = this.#pluginMap.get(plugins);\r\n         return entry !== void 0 ? JSON.parse(JSON.stringify(entry.data)) : void 0;\r\n      }\r\n\r\n      const results = [];\r\n\r\n      let count = 0;\r\n\r\n      for (const name of plugins)\r\n      {\r\n         const entry = this.#pluginMap.get(name);\r\n\r\n         if (entry !== void 0)\r\n         {\r\n            results.push(JSON.parse(JSON.stringify(entry.data)));\r\n         }\r\n         count++;\r\n      }\r\n\r\n      // Iterable plugins had no entries so return all plugin data.\r\n      if (count === 0)\r\n      {\r\n         for (const entry of this.#pluginMap.values())\r\n         {\r\n            if (entry !== void 0)\r\n            {\r\n               results.push(JSON.parse(JSON.stringify(entry.data)));\r\n            }\r\n         }\r\n      }\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Gets a PluginEntry instance for the given plugin name. This method is primarily for {@link PluginSupportImpl}\r\n    * classes.\r\n    *\r\n    * @param {string} plugin - The plugin name to get.\r\n    *\r\n    * @returns {import('./PluginEntry.js').PluginEntry} The PluginEntry for the given plugin name.\r\n    */\r\n   getPluginEntry(plugin)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.#pluginMap.get(plugin);\r\n   }\r\n\r\n   /**\r\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\r\n    *\r\n    * @param {object}                     [opts] - Options object. If undefined all plugin data is returned.\r\n    *\r\n    * @param {string | Iterable<string>}  [opts.plugins] - Plugin name or iterable list of names to get plugin data.\r\n    *\r\n    * @returns {import('.').DataOutPluginEvents[]} Event binding names registered from the plugin.\r\n    */\r\n   getPluginEvents({ plugins = [] } = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Return a PluginData result for a single plugin if found.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const entry = this.#pluginMap.get(plugins);\r\n         return entry !== void 0 && entry.eventbusProxy ? [{\r\n            plugin: plugins,\r\n            events: Array.from(entry.eventbusProxy.proxyKeys()).sort()\r\n         }] /* c8 ignore next */ : [];\r\n      }\r\n\r\n      /** @type {import('.').DataOutPluginEvents[]} */\r\n      const results = [];\r\n\r\n      let count = 0;\r\n\r\n      for (const plugin of plugins)\r\n      {\r\n         const entry = this.#pluginMap.get(plugin);\r\n\r\n         if (entry !== void 0)\r\n         {\r\n            results.push({\r\n               plugin,\r\n               events: entry.eventbusProxy ?\r\n                Array.from(entry.eventbusProxy.proxyKeys()).sort() /* c8 ignore next */ : []\r\n            });\r\n         }\r\n         count++;\r\n      }\r\n\r\n      // Iterable plugins had no entries so return all plugin data.\r\n      if (count === 0)\r\n      {\r\n         for (const entry of this.#pluginMap.values())\r\n         {\r\n            if (entry !== void 0)\r\n            {\r\n               results.push({\r\n                  plugin: entry.name,\r\n                  events: entry.eventbusProxy ?\r\n                   Array.from(entry.eventbusProxy.proxyKeys()).sort() /* c8 ignore next */ : []\r\n               });\r\n            }\r\n         }\r\n      }\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable of plugin map keys (plugin names). This method is primarily for {@link PluginSupportImpl}\r\n    * classes.\r\n    *\r\n    * @returns {Iterable<string>} An iterable of plugin map keys.\r\n    */\r\n   getPluginMapKeys()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.#pluginMap.keys();\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable of plugin map keys (plugin names). This method is primarily for {@link PluginSupportImpl}\r\n    * classes.\r\n    *\r\n    * @returns {Iterable<PluginEntry>} An iterable of plugin map keys.\r\n    */\r\n   getPluginMapValues()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.#pluginMap.values();\r\n   }\r\n\r\n   /**\r\n    * Returns all plugin names or if enabled is set then return plugins matching the enabled state.\r\n    *\r\n    * @param {object}  [opts] - Options object. If undefined all plugin names are returned regardless of enabled state.\r\n    *\r\n    * @param {boolean} [opts.enabled] - If enabled is a boolean it will return plugins given their enabled state.\r\n    *\r\n    * @returns {string[]} A list of plugin names optionally by enabled state.\r\n    */\r\n   getPluginNames({ enabled = void 0 } = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (enabled !== void 0 && typeof enabled !== 'boolean')\r\n      {\r\n         throw new TypeError(`'enabled' is not a boolean.`);\r\n      }\r\n\r\n      const anyEnabledState = enabled === void 0;\r\n\r\n      const results = [];\r\n\r\n      for (const entry of this.#pluginMap.values())\r\n      {\r\n         if (anyEnabledState || entry.enabled === enabled) { results.push(entry.name); }\r\n      }\r\n\r\n      return results.sort();\r\n   }\r\n\r\n   /**\r\n    * Returns true if there is a plugin loaded with the given plugin name(s). If no options are provided then\r\n    * the result will be if any plugins are loaded.\r\n    *\r\n    * @param {object}                  [opts] - Options object. If undefined returns whether there are any plugins.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to check existence.\r\n    *\r\n    * @returns {boolean} True if given plugin(s) exist.\r\n    */\r\n   hasPlugins({ plugins = [] } = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Return whether a single plugin exists.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         return this.#pluginMap.has(plugins);\r\n      }\r\n\r\n      let count = 0;\r\n\r\n      // Return whether all plugins specified exist.\r\n      for (const name of plugins)\r\n      {\r\n         if (!this.#pluginMap.has(name)) { return false; }\r\n\r\n         count++;\r\n      }\r\n\r\n      // Iterable plugins had no entries so simply check size of the map.\r\n      if (count === 0)\r\n      {\r\n         return this.#pluginMap.size !== 0;\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   /**\r\n    * Performs validation of a PluginConfig.\r\n    *\r\n    * @param {import('.').PluginConfig}   pluginConfig - A PluginConfig to validate.\r\n    *\r\n    * @returns {boolean} True if the given PluginConfig is valid.\r\n    */\r\n   isValidConfig(pluginConfig)\r\n   {\r\n      return isValidConfig(pluginConfig);\r\n   }\r\n\r\n   /**\r\n    * Unloads / reloads the plugin invoking `onPluginUnload` / then `onPluginReload`\r\n    *\r\n    * @param {object}   opts - Options object.\r\n    *\r\n    * @param {string}   opts.plugin - Plugin name to reload.\r\n    *\r\n    * @param {object}   [opts.instance] - Optional instance to replace.\r\n    *\r\n    * @param {boolean}  [opts.silent] - Does not trigger any reload notification on the eventbus.\r\n    *\r\n    * @returns {Promise<boolean>} Result of reload attempt.\r\n    */\r\n   async reload({ plugin, instance = void 0, silent = false })\r\n   {\r\n      if (typeof plugin !== 'string') { throw new TypeError(`'plugin' is not a string.`); }\r\n      if (instance !== void 0 && typeof instance !== 'object') { throw new TypeError(`'instance' is not an object.`); }\r\n      if (typeof silent !== 'boolean') { throw new TypeError(`'silent' is not a boolean.`); }\r\n\r\n      const entry = this.#pluginMap.get(plugin);\r\n\r\n      if (entry === void 0) { return false; }\r\n\r\n      // Store any state to load into new plugin instance.\r\n      let state = void 0;\r\n\r\n      let error = void 0;\r\n\r\n      try\r\n      {\r\n         // Invokes the private internal async events method which allows skipping of error checking.\r\n         const unloadData = await invokeAsyncEvent({\r\n            method: 'onPluginUnload',\r\n            manager: this,\r\n            plugins: plugin,\r\n            errorCheck: false\r\n         });\r\n\r\n         state = unloadData.state;\r\n      }\r\n      catch (err)\r\n      {\r\n         error = err;\r\n      }\r\n\r\n      // Automatically clean up most resources.\r\n      entry.reset();\r\n\r\n      if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.off(); }\r\n\r\n      if (typeof instance === 'object')\r\n      {\r\n         entry.instance = instance;\r\n      }\r\n\r\n      // Invokes the private internal async events method which allows skipping of error checking.\r\n      const invokeData = await invokeAsyncEvent({\r\n         method: 'onPluginLoad',\r\n         manager: this,\r\n         plugins: plugin,\r\n         passthruProps: { state },\r\n         errorCheck: false\r\n      });\r\n\r\n      // Invoke `typhonjs:plugin:manager:plugin:reloaded` allowing external code to react to plugin reload.\r\n      try\r\n      {\r\n         if (this.#eventbus && !silent)\r\n         {\r\n            await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:reloaded`,\r\n             JSON.parse(JSON.stringify(entry.data)));\r\n         }\r\n      }\r\n      catch (err)\r\n      {\r\n         // Only track this error if no previous error exists from onPluginUnload invocation.\r\n         if (error === void 0) { error = err; }\r\n      }\r\n\r\n      if (typeof invokeData.importmeta === 'object')\r\n      {\r\n         entry.importmeta = invokeData.importmeta;\r\n\r\n         // Until we get a Snowpack HMR spec environment for testing ignore this block.\r\n         /* c8 ignore next 7 */\r\n         if (typeof invokeData.importmeta.hot === 'object' && typeof invokeData.importmeta.hot.accept === 'function')\r\n         {\r\n            invokeData.importmeta.hot.accept(({ module }) =>\r\n            {\r\n               this.reload({ plugin, instance: resolveModule(module) });\r\n            });\r\n         }\r\n      }\r\n\r\n      // Throw any error raised first from any onPluginUnload invocation then the\r\n      // `typhonjs:plugin:manager:plugin:reloaded` event.\r\n      if (error) { throw error; }\r\n\r\n      return true;\r\n  }\r\n\r\n   /**\r\n    * Removes a plugin by name or all names in an iterable list unloading them and clearing any event bindings\r\n    * automatically.\r\n    *\r\n    * @param {object}                  opts - Options object.\r\n    *\r\n    * @param {string|Iterable<string>} opts.plugins - Plugin name or iterable list of names to remove.\r\n    *\r\n    * @returns {Promise<import('.').DataOutPluginRemoved[]>} A list of plugin names and removal success state.\r\n    */\r\n   async remove({ plugins })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      const removeEntry = async (entry) =>\r\n      {\r\n         const errors = [];\r\n\r\n         const pluginName = entry.name;\r\n\r\n         try\r\n         {\r\n            // Invokes the private internal async events method which allows skipping of error checking.\r\n            await invokeAsyncEvent({ method: 'onPluginUnload', manager: this, plugins: pluginName, errorCheck: false });\r\n         }\r\n         catch (err)\r\n         {\r\n            errors.push(err);\r\n         }\r\n\r\n         entry.reset();\r\n\r\n         if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\r\n\r\n         this.#pluginMap.delete(pluginName);\r\n\r\n         // Invoke `typhonjs:plugin:manager:plugin:removed` allowing external code to react to plugin removed.\r\n         try\r\n         {\r\n            if (this.#eventbus)\r\n            {\r\n               await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:removed`,\r\n                JSON.parse(JSON.stringify(entry.data)));\r\n            }\r\n         }\r\n         catch (err)\r\n         {\r\n            errors.push(err);\r\n         }\r\n\r\n         return { plugin: pluginName, success: errors.length === 0, errors };\r\n      };\r\n\r\n      const results = [];\r\n\r\n      // Return a single boolean enabled result for a single plugin if found.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const entry = this.#pluginMap.get(plugins);\r\n\r\n         if (entry !== void 0)\r\n         {\r\n            results.push(await removeEntry(entry));\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name of plugins)\r\n         {\r\n            const entry = this.#pluginMap.get(name);\r\n\r\n            if (entry !== void 0)\r\n            {\r\n               results.push(await removeEntry(entry));\r\n            }\r\n         }\r\n      }\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Removes all plugins after unloading them and clearing any event bindings automatically.\r\n    *\r\n    * @returns {Promise.<import('.').DataOutPluginRemoved[]>} A list of plugin names and removal success state.\r\n    */\r\n   async removeAll()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.remove({ plugins: Array.from(this.#pluginMap.keys()) });\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\r\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\r\n    *\r\n    * @param {object}                  opts - Options object\r\n    *\r\n    * @param {string|Iterable<string>} opts.plugins - Plugin name or iterable list of names to remove.\r\n    *\r\n    * @returns {Promise<import('.').DataOutPluginRemoved[]>} A list of plugin names and removal success state.\r\n    * @private\r\n    */\r\n   async _removeEventbus(opts)\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return !this.#options.noEventRemoval ? this.remove(opts) : [];\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\r\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\r\n    *\r\n    * @returns {Promise.<import('.').DataOutPluginRemoved[]>} A list of plugin names and removal success state.\r\n    * @private\r\n    */\r\n   async _removeAllEventbus()\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return !this.#options.noEventRemoval ? this.removeAll() : [];\r\n   }\r\n\r\n   /**\r\n    * Sets the enabled state of a plugin, a list of plugins, or all plugins.\r\n    *\r\n    * @param {object}            opts - Options object.\r\n    *\r\n    * @param {boolean}           opts.enabled - The enabled state.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to set state.\r\n    */\r\n   setEnabled({ enabled, plugins = [] })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      if (typeof enabled !== 'boolean') { throw new TypeError(`'enabled' is not a boolean.`); }\r\n\r\n      const setEntryEnabled = (entry) =>\r\n      {\r\n         if (entry !== void 0)\r\n         {\r\n            entry.enabled = enabled;\r\n\r\n            // Invoke `typhonjs:plugin:manager:plugin:enabled` allowing external code to react to plugin enabled state.\r\n            if (this.#eventbus)\r\n            {\r\n               this.#eventbus.trigger(`typhonjs:plugin:manager:plugin:enabled`, Object.assign({\r\n                  enabled\r\n               }, JSON.parse(JSON.stringify(entry.data))));\r\n            }\r\n         }\r\n      };\r\n\r\n      // Set enabled state for a single plugin if found.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         setEntryEnabled(this.#pluginMap.get(plugins));\r\n      }\r\n\r\n      let count = 0;\r\n\r\n      // First attempt to iterate through plugins.\r\n      for (const name of plugins)\r\n      {\r\n         setEntryEnabled(this.#pluginMap.get(name));\r\n         count++;\r\n      }\r\n\r\n      // If plugins is empty then set all plugins enabled state.\r\n      if (count === 0)\r\n      {\r\n         for (const entry of this.#pluginMap.values())\r\n         {\r\n            setEntryEnabled(entry);\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent setEnabled if optional `noEventSetEnabled` is true. This\r\n    * disables the ability for setting plugin enabled state via events preventing any external code from setting state.\r\n    *\r\n    * @param {object}   opts - Options object.\r\n    *\r\n    * @private\r\n    */\r\n   _setEnabledEventbus(opts)\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (!this.#options.noEventSetEnabled) { this.setEnabled(opts); }\r\n   }\r\n\r\n   /**\r\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\r\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\r\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\r\n    *\r\n    * @param {object}     opts - An options object.\r\n    *\r\n    * @param {import('#manager/eventbus').Eventbus}   opts.eventbus - The new eventbus to associate.\r\n    *\r\n    * @param {string}     [opts.eventPrepend='plugins'] - An optional string to prepend to all of the event\r\n    *                                                     binding targets.\r\n    */\r\n   async setEventbus({ eventbus, eventPrepend = 'plugins' })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (!isObject(eventbus)) { throw new TypeError(`'eventbus' is not an Eventbus.`); }\r\n      if (typeof eventPrepend !== 'string') { throw new TypeError(`'eventPrepend' is not a string.`); }\r\n\r\n      // Early escape if the eventbus is the same as the current eventbus.\r\n      if (eventbus === this.#eventbus) { return; }\r\n\r\n      const oldPrepend = this._eventPrepend;\r\n\r\n      /**\r\n       * Stores the prepend string for eventbus registration.\r\n       *\r\n       * @type {string}\r\n       * @private\r\n       */\r\n      this._eventPrepend = eventPrepend;\r\n\r\n      // Unload and reload any existing plugins from the old eventbus to the target eventbus.\r\n      if (this.#pluginMap.size > 0)\r\n      {\r\n         // Invokes the private internal async events method which allows skipping of error checking.\r\n         await invokeAsyncEvent({ method: 'onPluginUnload', manager: this, errorCheck: false });\r\n\r\n         for (const entry of this.#pluginMap.values())\r\n         {\r\n            try\r\n            {\r\n               // Automatically remove any potential reference to a stored event proxy instance.\r\n               delete entry.instance._eventbus;\r\n            }\r\n            /* c8 ignore next */\r\n            catch (err) { /* nop */ }\r\n\r\n            entry.data.manager.eventPrepend = eventPrepend;\r\n            entry.data.manager.scopedName = `${eventPrepend}:${entry.name}`;\r\n\r\n            if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\r\n\r\n            entry.eventbusProxy = new EventbusProxy(eventbus);\r\n\r\n            // Invokes the private internal async events method which allows skipping of error checking.\r\n            if (entry.enabled)\r\n            {\r\n               await invokeAsyncEvent({\r\n                  method: 'onPluginLoad',\r\n                  manager: this,\r\n                  plugins: entry.name,\r\n                  errorCheck: false\r\n               });\r\n            }\r\n         }\r\n      }\r\n\r\n      if (this.#eventbus !== null)\r\n      {\r\n         this.#eventbus.off(`${oldPrepend}:async:add`, this._addEventbus, this);\r\n         this.#eventbus.off(`${oldPrepend}:async:add:all`, this._addAllEventbus, this);\r\n         this.#eventbus.off(`${oldPrepend}:async:destroy:manager`, this._destroyEventbus, this);\r\n         this.#eventbus.off(`${oldPrepend}:async:remove`, this._removeEventbus, this);\r\n         this.#eventbus.off(`${oldPrepend}:async:remove:all`, this._removeAllEventbus, this);\r\n         this.#eventbus.off(`${oldPrepend}:get:enabled`, this.getEnabled, this);\r\n         this.#eventbus.off(`${oldPrepend}:get:options`, this.getOptions, this);\r\n         this.#eventbus.off(`${oldPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\r\n         this.#eventbus.off(`${oldPrepend}:get:plugin:data`, this.getPluginData, this);\r\n         this.#eventbus.off(`${oldPrepend}:get:plugin:events`, this.getPluginEvents, this);\r\n         this.#eventbus.off(`${oldPrepend}:get:plugin:names`, this.getPluginNames, this);\r\n         this.#eventbus.off(`${oldPrepend}:has:plugin`, this.hasPlugins, this);\r\n         this.#eventbus.off(`${oldPrepend}:is:valid:config`, this.isValidConfig, this);\r\n         this.#eventbus.off(`${oldPrepend}:set:enabled`, this._setEnabledEventbus, this);\r\n         this.#eventbus.off(`${oldPrepend}:set:options`, this._setOptionsEventbus, this);\r\n      }\r\n\r\n      eventbus.on(`${eventPrepend}:async:add`, this._addEventbus, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:async:add:all`, this._addAllEventbus, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:async:destroy:manager`, this._destroyEventbus, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:async:remove`, this._removeEventbus, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:async:remove:all`, this._removeAllEventbus, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:get:enabled`, this.getEnabled, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:get:options`, this.getOptions, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:get:plugin:by:event`, this.getPluginByEvent, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:get:plugin:data`, this.getPluginData, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:get:plugin:events`, this.getPluginEvents, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:get:plugin:names`, this.getPluginNames, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:has:plugin`, this.hasPlugins, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:is:valid:config`, this.isValidConfig, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:set:enabled`, this._setEnabledEventbus, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:set:options`, this._setOptionsEventbus, this, { guard: true });\r\n\r\n      for (const pluginSupport of this.#pluginSupport)\r\n      {\r\n         pluginSupport.setEventbus({\r\n            oldEventbus: this.#eventbus,\r\n            newEventbus: eventbus,\r\n            oldPrepend,\r\n            newPrepend: eventPrepend\r\n         });\r\n      }\r\n\r\n      // Set the new eventbus for any EventbusSecure instances created.\r\n      for (const eventbusSecureObj of this.#eventbusSecure)\r\n      {\r\n         eventbusSecureObj.setEventbus(eventbus);\r\n      }\r\n\r\n      this.#eventbus = eventbus;\r\n   }\r\n\r\n   /**\r\n    * Set optional parameters.\r\n    *\r\n    * @param {import('.').PluginManagerOptions} options - Defines optional parameters to set.\r\n    */\r\n   setOptions(options)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\r\n\r\n      if (typeof options.noEventAdd === 'boolean') { this.#options.noEventAdd = options.noEventAdd; }\r\n\r\n      if (typeof options.noEventDestroy === 'boolean') { this.#options.noEventDestroy = options.noEventDestroy; }\r\n\r\n      if (typeof options.noEventRemoval === 'boolean') { this.#options.noEventRemoval = options.noEventRemoval; }\r\n\r\n      if (typeof options.noEventSetEnabled === 'boolean')\r\n      {\r\n         this.#options.noEventSetEnabled = options.noEventSetEnabled;\r\n      }\r\n\r\n      if (typeof options.noEventSetOptions === 'boolean')\r\n      {\r\n         this.#options.noEventSetOptions = options.noEventSetOptions;\r\n      }\r\n\r\n      if (typeof options.throwNoMethod === 'boolean') { this.#options.throwNoMethod = options.throwNoMethod; }\r\n\r\n      if (typeof options.throwNoPlugin === 'boolean') { this.#options.throwNoPlugin = options.throwNoPlugin; }\r\n\r\n      for (const pluginSupport of this.#pluginSupport)\r\n      {\r\n         pluginSupport.setOptions(options);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent plugin manager options being set if optional `noEventSetOptions`\r\n    * is enabled. This disables the ability for the plugin manager options to be set via events preventing any external\r\n    * code modifying options.\r\n    *\r\n    * @param {import('.').PluginManagerOptions} options - Defines optional parameters to set.\r\n    *\r\n    * @private\r\n    */\r\n   _setOptionsEventbus(options)\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (!this.#options.noEventSetOptions) { this.setOptions(options); }\r\n   }\r\n}\n\nexport { PluginInvokeEvent, PluginInvokeSupport, PluginManager, escapeTarget, isValidConfig };\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA,MAAM,aAAa;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,aAAa,wBAAwB,iBAAiB,EAAE,CAAC,WAAW,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,sBAAsB,wBAAwB,mBAAmB,EAAE,CAAC,WAAW,CAAC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,aAAa,GAAG,KAAK,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,SAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI;AAC1D,GAAG;AACH,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC;AACvB,MAAM,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ;AAC1C,MAAM;AACN;AACA,SAAS,IAAI,QAAQ,KAAK,KAAK,CAAC,IAAI,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,EAAE;AAC9G,SAAS,KAAK,KAAK,GAAG,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;AAC3E,SAAS;AACT,YAAY,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAC/F,UAAU;AACV,OAAO;AACP,WAAW,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;AACzF,MAAM;AACN;AACA,SAAS,KAAK,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;AACpF,SAAS;AACT,YAAY,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AAChE,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN;AACA,SAAS,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AACzD,OAAO;AACP,MAAM,OAAO,MAAM,CAAC;AACpB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,YAAY,CAAC,QAAQ;AAC/B,GAAG;AACH,MAAM,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;AACjC,MAAM,OAAO,IAAI,KAAK,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;AAC7C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI;AACjD,GAAG;AACH,MAAM,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACjC;AACA,MAAM,IAAI,MAAM;AAChB,MAAM;AACN,SAAS,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AACvC;AACA,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC;AACpC,SAAS;AACT,YAAY,KAAK,MAAM,OAAO,IAAI,QAAQ;AAC1C,YAAY;AACZ,eAAe,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK;AACxC,eAAe;AACf,kBAAkB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;AACtC,gBAAgB;AAChB;AACA,eAAe,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI;AACrD,eAAe;AACf,kBAAkB,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;AACrD,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM,OAAO,MAAM,CAAC;AACpB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,UAAU,CAAC,MAAM;AAC3B,GAAG;AACH,MAAM,OAAO,MAAM,KAAK,IAAI,IAAI,OAAO,MAAM,KAAK,QAAQ,GAAG,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACtF,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI;AAC7C,GAAG;AACH,MAAM,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AAC/B,MAAM,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACnC;AACA,MAAM,IAAI,QAAQ;AAClB,MAAM;AACN;AACA,SAAS,MAAM,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,SAAS,CAAC,KAAK,EAAE;AAC1E,SAAS;AACT,YAAY,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACnD,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;AACnD;AACA;AACA,SAAS,aAAa,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC5C,OAAO;AACP,MAAM,OAAO,GAAG,CAAC;AACjB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK;AACxC,GAAG;AACH,MAAM,IAAI,MAAM,CAAC;AACjB;AACA,MAAM,OAAO,SAAS,GAAG,IAAI;AAC7B,MAAM;AACN,SAAS,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,EAAE,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE;AAChE;AACA,SAAS,IAAI,KAAK,IAAI,CAAC;AACvB,SAAS;AACT,YAAY,IAAI,KAAK,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE;AACnD,YAAY,KAAK,GAAG,KAAK,CAAC,CAAC;AAC3B,YAAY,MAAM,GAAG,KAAK,CAAC,CAAC;AAC5B,UAAU;AACV;AACA,SAAS,OAAO,MAAM,CAAC;AACvB,OAAO,CAAC;AACR,IAAI;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAM,QAAQ;AACd;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,KAAK,GAAG,EAAE,CAAC;AACd;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,CAAC;AACX;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC,IAAI,GAAG,EAAE;AACxB,GAAG;AACH,MAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,EAAE;AACtF;AACA,MAAM,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC;AACjC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE,OAAO,GAAG,EAAE;AAC/D,GAAG;AACH,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE;AACzF;AACA,MAAM,MAAM,IAAI,GAAG,EAAE,CAAC;AACtB,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;AACpC,MAAM;AACN,SAAS,OAAO,CAAC,IAAI,CAAC,CAAC,0BAA0B,EAAE,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AACrF,UAAU,CAAC,gDAAgD,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3F,SAAS,OAAO,IAAI,CAAC;AACrB,OAAO;AACP;AACA;AACA,MAAM,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ;AACxF,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC9C;AACA,MAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,KAAK,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,CAAC,CAAC,EAAE,EAAE,QAAQ,GAAG,KAAK,CAAC,CAAC,EAAE;AACtG;AACA,MAAM,OAAO,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACzD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;AAC1B,GAAG;AACH,MAAM,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,MAAM,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE;AACpC;AACA,MAAM,IAAI,KAAK;AACf,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO;AACxC,SAAS;AACT,YAAY,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAChC,YAAY;AACZ,eAAe,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AACrD,eAAe;AACf,kBAAkB,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACzG,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO;AACxC,SAAS;AACT,YAAY,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AAClD,YAAY;AACZ,eAAe,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACtG,aAAa;AACb,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,UAAU;AACjB,GAAG;AACH,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC,EAAE;AACtC;AACA,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;AAC9C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,aAAa;AACpB,GAAG;AACH,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC,EAAE;AACtC;AACA,MAAM,IAAI,KAAK,GAAG,CAAC,CAAC;AACpB;AACA,MAAM,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE;AAC9E;AACA,MAAM,OAAO,KAAK,CAAC;AACnB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU,CAAC,IAAI;AAClB,GAAG;AACH,MAAM,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC;AAC9G,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AACjC;AACA,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC;AACxB;AACA,MAAM,QAAQ,MAAM,CAAC,IAAI;AACzB;AACA,SAAS,KAAK,CAAC;AACf,YAAY,IAAI,GAAG,MAAM,CAAC;AAC1B,YAAY,MAAM;AAClB,SAAS,KAAK,CAAC;AACf,YAAY,IAAI,GAAG,OAAO,CAAC;AAC3B,YAAY,MAAM;AAClB,OAAO;AACP;AACA,MAAM,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC;AAC3C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,CAAC,IAAI;AACf,GAAG;AACH,MAAM,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AACxH;AACA,MAAM,QAAQ,MAAM,CAAC,IAAI;AACzB;AACA,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,MAAM,CAAC;AAC1B,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,OAAO,CAAC;AAC3B,SAAS;AACT,YAAY,OAAO,KAAK,CAAC,CAAC;AAC1B,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,SAAS,CAAC,IAAI,EAAE,IAAI,GAAG,EAAE;AAC5B,GAAG;AACH,MAAM,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AACtB,MAAM,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AAC3B;AACA,MAAM,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AACnH;AACA,MAAM,OAAO,MAAM,CAAC,OAAO,CAAC;AAC5B,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB,GAAG;AACH,MAAM,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,MAAM,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE;AACpC;AACA,MAAM,IAAI,KAAK;AACf,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO;AACxC,SAAS;AACT,YAAY,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAChC,YAAY;AACZ,eAAe,MAAM,IAAI,CAAC;AAC1B,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO;AACxC,SAAS;AACT,YAAY,MAAM,IAAI,CAAC;AACvB,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,eAAe,CAAC,KAAK,GAAG,KAAK,CAAC;AAClC,GAAG;AACH,MAAM,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,MAAM,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE;AACpC;AACA,MAAM,IAAI,KAAK;AACf,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO;AACxC,SAAS;AACT,YAAY,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAChC,YAAY;AACZ,eAAe,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AACnD,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO;AACxC,SAAS;AACT,YAAY,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAChD,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,IAAI;AACX,GAAG;AACH,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC;AACxB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ;AAC/B,GAAG;AACH,MAAM,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,IAAI,CAAC,EAAE;AAChC;AACA,MAAM,MAAM,IAAI,GAAG,EAAE,CAAC;AACtB,MAAM,IAAI,QAAQ,CAAC,uBAAuB,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;AAC3D,MAAM;AACN,SAAS,OAAO,CAAC,IAAI,CAAC,CAAC,0BAA0B,EAAE,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AACrF,UAAU,CAAC,oEAAoE,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/G,SAAS,OAAO,IAAI,CAAC;AACrB,OAAO;AACP;AACA,MAAM,MAAM,EAAE,GAAG,GAAG,CAAC,SAAS,KAAK,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/E,MAAM,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC,CAAC;AACxE,MAAM,IAAI,SAAS,GAAG,QAAQ,CAAC,UAAU,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;AAC5D;AACA;AACA;AACA,MAAM,IAAI,CAAC,SAAS;AACpB,MAAM;AACN,SAAS,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;AACzE,SAAS,SAAS,GAAG,QAAQ,CAAC,UAAU,GAAG,WAAW,CAAC,EAAE,CAAC,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AAChG,OAAO;AACP;AACA;AACA,MAAM,MAAM,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AACxE,MAAM,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC;AACnC;AACA,MAAM,IAAI,KAAK,EAAE,EAAE,MAAM,KAAK,CAAC,EAAE;AACjC;AACA;AACA,MAAM,IAAI,SAAS,CAAC,OAAO,EAAE,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,EAAE;AAC9D;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,cAAc,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ;AAC5C,GAAG;AACH,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE;AACzF;AACA;AACA,MAAM,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;AAC1F,SAAS,KAAK;AACd,SAAS,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC;AAClD,OAAO,CAAC,CAAC;AACT;AACA,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AACxC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ;AACnC,GAAG;AACH;AACA,MAAM,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;AAC1F,SAAS,KAAK,EAAE,CAAC;AACjB,SAAS,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC;AAClD,OAAO,CAAC,CAAC;AACT;AACA,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AACxC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,GAAG,CAAC,IAAI,EAAE,QAAQ,GAAG,KAAK,CAAC,EAAE,OAAO,GAAG,KAAK,CAAC;AAChD,GAAG;AACH,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,IAAI,CAAC,EAAE;AACzC;AACA,MAAM,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ;AAC9F,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;AAChD;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE,OAAO,GAAG,EAAE;AACpD,GAAG;AACH,MAAM,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,WAAW,KAAK,MAAM;AAC3D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC;AACrE,OAAO;AACP;AACA,MAAM,MAAM,IAAI,GAAG,EAAE,CAAC;AACtB,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;AACpC,MAAM;AACN,SAAS,OAAO,CAAC,IAAI,CAAC,CAAC,0BAA0B,EAAE,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AACrF,UAAU,CAAC,4CAA4C,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACvF,SAAS,OAAO,IAAI,CAAC;AACrB,OAAO;AACP;AACA,MAAM,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;AACrG,SAAS,OAAO;AAChB,SAAS,GAAG,EAAE,IAAI;AAClB,SAAS,OAAO;AAChB,SAAS,SAAS,EAAE,QAAQ,CAAC,UAAU;AACvC,OAAO,CAAC,CAAC;AACT;AACA,MAAM,IAAI,QAAQ,CAAC,UAAU;AAC7B,MAAM;AACN,SAAS,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,CAAC;AACrE,SAAS,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC;AACjE;AACA;AACA,SAAS,QAAQ,CAAC,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC;AAC7C,OAAO;AACP;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE,OAAO,GAAG,EAAE;AACtD,GAAG;AACH,MAAM,MAAM,IAAI,GAAG,EAAE,CAAC;AACtB,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;AACpC,MAAM;AACN,SAAS,OAAO,CAAC,IAAI,CAAC,CAAC,0BAA0B,EAAE,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AACrF,UAAU,CAAC,8CAA8C,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACzF,SAAS,OAAO,IAAI,CAAC;AACrB,OAAO;AACP;AACA;AACA,MAAM,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ;AACxF,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACjD;AACA,MAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,KAAK,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,CAAC,CAAC,EAAE,EAAE,QAAQ,GAAG,KAAK,CAAC,CAAC,EAAE;AACtG;AACA,MAAM,OAAO,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACzD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,aAAa,CAAC,GAAG,EAAE,IAAI,GAAG,KAAK,CAAC,EAAE,QAAQ,GAAG,KAAK,CAAC;AACtD,GAAG;AACH,MAAM,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;AAC5C,MAAM,IAAI,CAAC,WAAW,EAAE,EAAE,OAAO,IAAI,CAAC,EAAE;AACxC;AACA,MAAM,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;AAChF;AACA,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE;AACzC,MAAM;AACN,SAAS,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C;AACA;AACA,SAAS,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE;AACnC;AACA,SAAS,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AACjD;AACA,SAAS,IAAI,SAAS,CAAC,OAAO,EAAE,EAAE,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,EAAE;AAClE,OAAO;AACP;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,CAAC,IAAI,EAAE,GAAG,IAAI;AACxB,GAAG;AACH,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,IAAI,CAAC,EAAE;AACzC;AACA,MAAM,QAAQ,CAAC,qBAAqB,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC;AACpH,OAAO,IAAI,CAAC,CAAC;AACb;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI;AACnC,GAAG;AACH,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE;AAC3C;AACA,MAAM,MAAM,MAAM,GAAG,QAAQ,CAAC,qBAAqB,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,uBAAuB;AAC7G,OAAO,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;AACzC;AACA;AACA,MAAM,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE;AAC/C;AACA;AACA,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,MAAM,CAAC,EAAE;AACpD;AACA;AACA;AACA,MAAM,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO;AAC9C,MAAM;AACN,SAAS,IAAI,UAAU,GAAG,EAAE,CAAC;AAC7B;AACA,SAAS,KAAK,MAAM,OAAO,IAAI,OAAO;AACtC,SAAS;AACT,YAAY,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;AACtC,YAAY;AACZ,eAAe,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACvD,aAAa;AACb,iBAAiB,IAAI,OAAO,KAAK,KAAK,CAAC;AACvC,YAAY;AACZ,eAAe,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACxC,aAAa;AACb,UAAU;AACV;AACA,SAAS,OAAO,UAAU,CAAC,MAAM,GAAG,CAAC,GAAG,UAAU,GAAG,UAAU,CAAC,MAAM,KAAK,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;AACtG,OAAO,CAAC,CAAC;AACT,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI;AAC7B,GAAG;AACH,MAAM,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC5D;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC,IAAI,EAAE,GAAG,IAAI;AAC5B,GAAG;AACH,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE;AAC3C;AACA,MAAM,OAAO,QAAQ,CAAC,qBAAqB,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,sBAAsB,EAAE,IAAI,CAAC,OAAO;AAClH,OAAO,IAAI,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;AAC3B,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,UAAU,GAAG,CAAC,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,UAAU,CAAC;AACrB;AACA;AACA;AACA;AACA,GAAG,OAAO,UAAU,GAAG;AACvB,GAAG;AACH;AACA;AACA;AACA,MAAM,OAAO,CAAC;AACd;AACA;AACA;AACA;AACA,MAAM,GAAG,CAAC;AACV;AACA;AACA;AACA;AACA,MAAM,SAAS,CAAC;AAChB;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC;AACX;AACA;AACA;AACA;AACA,MAAM,QAAQ,CAAC;AACf;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,MAAM,GAAG,CAAC,CAAC;AACjB;AACA,MAAM,WAAW,CAAC,QAAQ,EAAE,GAAG;AAC/B,MAAM;AACN,SAAS,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC;AACvC,SAAS,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AACnC,SAAS,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;AACzB,SAAS,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9B,OAAO;AACP;AACA;AACA,MAAM,OAAO;AACb,MAAM;AACN,SAAS,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACjE,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;AACvE,OAAO;AACP;AACA,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE;AACnC;AACA,MAAM,IAAI,OAAO,GAAG,EAAE,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;AAC7C;AACA,MAAM,IAAI,GAAG,GAAG,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;AACrC;AACA,MAAM,cAAc,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,GAAG,KAAK,CAAC;AACzC,MAAM;AACN,SAAS,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ;AACtG,SAAS;AACT,YAAY,OAAO;AACnB,YAAY,GAAG,EAAE,IAAI;AACrB,YAAY,OAAO,EAAE,EAAE;AACvB,YAAY,SAAS,EAAE,IAAI;AAC3B,UAAU,CAAC,CAAC;AACZ;AACA,SAAS,OAAO,IAAI,CAAC;AACrB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,GAAG,CAAC,IAAI,EAAE,QAAQ;AACxB,MAAM;AACN,SAAS,IAAI,OAAO,CAAC;AACrB;AACA,SAAS,IAAI,IAAI,CAAC,QAAQ;AAC1B,SAAS;AACT,YAAY,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE;AACtG,eAAe,OAAO,EAAE,KAAK,CAAC;AAC9B,eAAe,SAAS,EAAE,KAAK,CAAC;AAChC,aAAa,CAAC,CAAC;AACf,YAAY,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;AACpC,UAAU;AACV;AACA,SAAS;AACT,YAAY,IAAI,CAAC,MAAM,EAAE,CAAC;AAC1B,YAAY,OAAO,GAAG,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;AACxC,UAAU;AACV;AACA,SAAS,IAAI,OAAO,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE;AACzC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,OAAO,CAAC,KAAK;AACvB,MAAM;AACN;AACA,SAAS,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE;AAC7F,SAAS,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC/B,OAAO;AACP,IAAI,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI;AAClD,GAAG;AACH,MAAM,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACjC;AACA,MAAM,IAAI,MAAM;AAChB,MAAM;AACN,SAAS,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AACvC;AACA,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC;AACpC,SAAS;AACT,YAAY,KAAK,MAAM,OAAO,IAAI,QAAQ;AAC1C,YAAY;AACZ,eAAe,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI;AACrD,eAAe;AACf,kBAAkB,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;AACrD,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM,OAAO,MAAM,CAAC;AACpB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI;AACpD,GAAG;AACH,MAAM,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACjC;AACA,MAAM,IAAI,MAAM;AAChB,MAAM;AACN,SAAS,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AACvC;AACA,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC;AACpC,SAAS;AACT,YAAY,KAAK,MAAM,OAAO,IAAI,QAAQ;AAC1C,YAAY;AACZ,eAAe,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK;AACxC,eAAe;AACf,kBAAkB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1C,kBAAkB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AACxC,kBAAkB,OAAO,MAAM,CAAC;AAChC,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM,OAAO,MAAM,CAAC;AACpB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI;AACjD,GAAG;AACH;AACA,MAAM,IAAI,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE;AAC9B;AACA,MAAM,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAC/D,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC;AACvB;AACA;AACA,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,QAAQ;AACxC,MAAM;AACN,SAAS,KAAK,KAAK,GAAG,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;AAChF,SAAS;AACT,YAAY,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;AAC1C,UAAU;AACV,SAAS,OAAO;AAChB,OAAO;AACP;AACA,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAC/D;AACA,MAAM,OAAO,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;AAClC,MAAM;AACN,SAAS,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACzB,SAAS,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AACvC;AACA;AACA,SAAS,IAAI,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE;AAClC;AACA;AACA,SAAS,MAAM,SAAS,GAAG,EAAE,CAAC;AAC9B,SAAS,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE;AACjD,SAAS;AACT,YAAY,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACxC;AACA,YAAY,IAAI,QAAQ,IAAI,QAAQ,KAAK,OAAO,CAAC,QAAQ,IAAI,QAAQ,KAAK,OAAO,CAAC,QAAQ,CAAC,SAAS;AACpG,aAAa,OAAO,IAAI,OAAO,KAAK,OAAO,CAAC,OAAO;AACnD,YAAY;AACZ,eAAe,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACvC,aAAa;AACb;AACA,YAAY;AACZ,eAAe,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;AACnD,eAAe,IAAI,SAAS,EAAE,EAAE,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,EAAE;AAChE,aAAa;AACb,UAAU;AACV;AACA;AACA,SAAS,IAAI,SAAS,CAAC,MAAM;AAC7B,SAAS;AACT,YAAY,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;AACrC,UAAU;AACV;AACA,SAAS;AACT,YAAY,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;AAChC,UAAU;AACV,OAAO;AACP;AACA,MAAM,OAAO,MAAM,CAAC;AACpB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI;AAChD,GAAG;AACH,MAAM,IAAI,QAAQ;AAClB,MAAM;AACN,SAAS,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;AAC9D,SAAS,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAClF;AACA;AACA,SAAS,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AAClE;AACA;AACA,SAAS,OAAO,CAAC,KAAK,GAAG,OAAO,OAAO,CAAC,KAAK,KAAK,SAAS,GAAG,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;AACpF;AACA;AACA,SAAS,IAAI,QAAQ,YAAY,aAAa,CAAC,aAAa;AAC5D,UAAU,QAAQ,YAAY,aAAa,CAAC,sBAAsB;AAClE,SAAS;AACT,YAAY,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;AAC7B,UAAU;AACV;AACA,SAAS;AACT;AACA,YAAY,QAAQ,OAAO,CAAC,IAAI;AAChC;AACA,eAAe,KAAK,MAAM;AAC1B,kBAAkB,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;AACnC,kBAAkB,MAAM;AACxB,eAAe,KAAK,OAAO;AAC3B,kBAAkB,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;AACnC,kBAAkB,MAAM;AACxB,eAAe;AACf,kBAAkB,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;AACnC,kBAAkB,MAAM;AACxB,aAAa;AACb,UAAU;AACV;AACA,SAAS,IAAI,SAAS,EAAE,EAAE,SAAS,CAAC,cAAc,EAAE,CAAC,EAAE;AACvD;AACA,SAAS,QAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,IAAI,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;AACvF,OAAO;AACP,MAAM,OAAO,MAAM,CAAC;AACpB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,qBAAqB,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI;AACtF,GAAG;AACH,MAAM,IAAI,OAAO,GAAG,KAAK,CAAC,CAAC;AAC3B,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC;AACvB;AACA;AACA;AACA,MAAM,IAAI,IAAI,IAAI,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;AACxD,MAAM;AACN;AACA,SAAS,KAAK,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;AACpF,SAAS;AACT,YAAY,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AACtF;AACA;AACA,YAAY,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACxF;AACA;AACA,YAAY,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;AACrC,YAAY;AACZ,eAAe,QAAQ,WAAW;AAClC;AACA,kBAAkB,KAAK,CAAC;AACxB;AACA,qBAAqB,OAAO,GAAG,MAAM,CAAC;AACtC,qBAAqB,MAAM;AAC3B,kBAAkB,KAAK,CAAC;AACxB;AACA,qBAAqB,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACxD,qBAAqB,MAAM;AAC3B,kBAAkB,KAAK,CAAC;AACxB;AACA,qBAAqB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACtD,qBAAqB,MAAM;AAC3B,gBAAgB;AAChB,aAAa;AACb,iBAAiB,IAAI,MAAM,KAAK,KAAK,CAAC;AACtC,YAAY;AACZ,eAAe,QAAQ,WAAW;AAClC;AACA,kBAAkB,KAAK,CAAC;AACxB;AACA,qBAAqB,OAAO,GAAG,MAAM,CAAC;AACtC,qBAAqB,MAAM;AAC3B,kBAAkB,KAAK,CAAC,EAAE;AAC1B;AACA,qBAAqB,MAAM,QAAQ,GAAG,CAAC,OAAO,CAAC,CAAC;AAChD,qBAAqB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC3C,qBAAqB,OAAO,GAAG,QAAQ,CAAC;AACxC,qBAAqB,MAAM;AAC3B,mBAAmB;AACnB,kBAAkB,KAAK,CAAC;AACxB;AACA,qBAAqB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC1C,qBAAqB,MAAM;AAC3B,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN;AACA,SAAS,OAAO,GAAG,QAAQ,CAAC,cAAc,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AAC1E,OAAO;AACP;AACA,MAAM,OAAO,OAAO,CAAC;AACrB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,cAAc,CAAC,cAAc,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI;AACxE,GAAG;AACH,MAAM,IAAI,MAAM,CAAC;AACjB;AACA,MAAM,IAAI,SAAS;AACnB,MAAM;AACN,SAAS,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AACxC,SAAS,IAAI,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC;AACvC,SAAS,IAAI,MAAM,IAAI,SAAS,EAAE,EAAE,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE;AACpE,SAAS,IAAI,MAAM,EAAE,EAAE,MAAM,GAAG,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAAE;AAC/D,SAAS,IAAI,SAAS,EAAE,EAAE,MAAM,GAAG,cAAc,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;AACpF,OAAO;AACP;AACA,MAAM,OAAO,MAAM,CAAC;AACpB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,iBAAiB,CAAC,MAAM,EAAE,IAAI;AACxC,GAAG;AACH,MAAM,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AACrB,MAAM,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;AACxE;AACA,MAAM,QAAQ,IAAI,CAAC,MAAM;AACzB;AACA,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;AACvE,YAAY,OAAO;AACnB,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE;AAC3E,YAAY,OAAO;AACnB,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE;AAC/E,YAAY,OAAO;AACnB,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE;AACnF,YAAY,OAAO;AACnB,SAAS;AACT,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,EAAE;AAC9E,YAAY,OAAO;AACnB,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,aAAa,uBAAuB,CAAC,MAAM,EAAE,IAAI;AACpD,GAAG;AACH,MAAM,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AACrB,MAAM,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;AACxE;AACA,MAAM,MAAM,OAAO,GAAG,EAAE,CAAC;AACzB;AACA,MAAM,QAAQ,IAAI,CAAC,MAAM;AACzB;AACA,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC;AAC1B,YAAY;AACZ,eAAe,MAAM,MAAM,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACrE;AACA;AACA,eAAe,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC/D,aAAa;AACb,YAAY,MAAM;AAClB;AACA,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC;AAC1B,YAAY;AACZ,eAAe,MAAM,MAAM,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACzE;AACA;AACA,eAAe,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC/D,aAAa;AACb,YAAY,MAAM;AAClB;AACA,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC;AAC1B,YAAY;AACZ,eAAe,MAAM,MAAM,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC7E;AACA;AACA,eAAe,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC/D,aAAa;AACb,YAAY,MAAM;AAClB;AACA,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC;AAC1B,YAAY;AACZ,eAAe,MAAM,MAAM,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AACjF;AACA;AACA,eAAe,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC/D,aAAa;AACb,YAAY,MAAM;AAClB;AACA,SAAS;AACT,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC;AAC1B,YAAY;AACZ,eAAe,MAAM,MAAM,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC5E;AACA;AACA,eAAe,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC/D,aAAa;AACb,YAAY,MAAM;AAClB,OAAO;AACP;AACA;AACA,MAAM,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM;AACnE,MAAM;AACN,SAAS,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC;AACrE,SAAS,QAAQ,QAAQ,CAAC,MAAM;AAChC;AACA,YAAY,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC,CAAC;AAClC,YAAY,KAAK,CAAC,EAAE,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvC,YAAY,SAAS,OAAO,QAAQ,CAAC;AACrC,UAAU;AACV,OAAO,CAAC,GAAG,OAAO,CAAC,MAAM,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;AACtD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,sBAAsB,CAAC,MAAM,EAAE,IAAI;AAC7C,GAAG;AACH,MAAM,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AACrB,MAAM,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;AACxE;AACA,MAAM,MAAM,OAAO,GAAG,EAAE,CAAC;AACzB;AACA,MAAM,QAAQ,IAAI,CAAC,MAAM;AACzB;AACA,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC;AAC1B,YAAY;AACZ,eAAe,MAAM,MAAM,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACrE;AACA;AACA,eAAe,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC/D,aAAa;AACb,YAAY,MAAM;AAClB,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC;AAC1B,YAAY;AACZ,eAAe,MAAM,MAAM,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACzE;AACA;AACA,eAAe,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC/D,aAAa;AACb,YAAY,MAAM;AAClB,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC;AAC1B,YAAY;AACZ,eAAe,MAAM,MAAM,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC7E;AACA;AACA,eAAe,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC/D,aAAa;AACb,YAAY,MAAM;AAClB,SAAS,KAAK,CAAC;AACf,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC;AAC1B,YAAY;AACZ,eAAe,MAAM,MAAM,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AACjF;AACA;AACA,eAAe,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC/D,aAAa;AACb,YAAY,MAAM;AAClB,SAAS;AACT,YAAY,OAAO,EAAE,CAAC,GAAG,CAAC;AAC1B,YAAY;AACZ,eAAe,MAAM,MAAM,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC5E;AACA;AACA,eAAe,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC/D,aAAa;AACb,YAAY,MAAM;AAClB,OAAO;AACP;AACA;AACA,MAAM,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,OAAO,GAAG,OAAO,CAAC,MAAM,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;AACvF,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,uBAAuB,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,GAAG,EAAE;AACtD,GAAG;AACH,MAAM,IAAI,OAAO,GAAG,KAAK,CAAC;AAC1B;AACA,MAAM;AACN,MAAM;AACN,SAAS,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAClD,SAAS,IAAI,OAAO,MAAM,KAAK,SAAS,EAAE,EAAE,OAAO,GAAG,MAAM,CAAC,EAAE;AAC/D,OAAO;AACP,MAAM,OAAO,GAAG;AAChB,MAAM;AACN,SAAS,OAAO,GAAG,KAAK,CAAC;AACzB,SAAS,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AACzB,SAAS,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AAC9B,OAAO;AACP;AACA,MAAM,OAAO,OAAO,CAAC;AACrB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,eAAe,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO;AACtD,GAAG;AACH,MAAM,IAAI,KAAK,CAAC;AAChB;AACA,MAAM;AACN,MAAM;AACN,SAAS,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AACzC,OAAO;AACP,MAAM,OAAO,GAAG;AAChB,MAAM;AACN,SAAS,KAAK,GAAG,GAAG,CAAC;AACrB,OAAO;AACP;AACA,MAAM,OAAO,KAAK,CAAC;AACnB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,YAAY,CAAC,MAAM,GAAG,EAAE;AAClC,GAAG;AACH,MAAM,MAAM,EAAE,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;AAC5C,MAAM,OAAO,MAAM,GAAG,CAAC,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,wBAAwB,EAAE,CAAC;AACjE,IAAI;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,aAAa;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,SAAS,CAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,CAAC;AACX;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC,QAAQ;AACvB,GAAG;AACH,MAAM,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAChC;AACA,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE,OAAO,GAAG,EAAE;AAC/D,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE;AACzF;AACA,MAAM,MAAM,IAAI,GAAG,EAAE,CAAC;AACtB,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;AAC9C,MAAM;AACN,SAAS,OAAO,CAAC,IAAI,CAAC,CAAC,0BAA0B,EAAE,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AACrF,UAAU,CAAC,gDAAgD,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3F,SAAS,OAAO,IAAI,CAAC;AACrB,OAAO;AACP;AACA;AACA,MAAM,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ;AACxF,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC9C;AACA,MAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,KAAK,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,CAAC,CAAC,EAAE,EAAE,QAAQ,GAAG,KAAK,CAAC,CAAC,EAAE;AACtG;AACA,MAAM,OAAO,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACzD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW;AACd,GAAG;AACH,MAAM,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC/C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO;AACV,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI;AACjC,MAAM;AACN,SAAS,IAAI,CAAC,GAAG,EAAE,CAAC;AACpB,OAAO;AACP;AACA,MAAM,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;AAC5B;AACA,MAAM,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC5B,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;AAC1B,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC;AACvD,MAAM;AACN,SAAS,MAAM,KAAK,CAAC;AACrB,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,UAAU;AACjB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;AACvC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,aAAa;AACpB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;AAC1C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;AACpD,MAAM;AACN,SAAS,MAAM,KAAK,CAAC;AACrB,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,eAAe,CAAC,KAAK,GAAG,KAAK,CAAC;AAClC,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC;AAC/D,MAAM;AACN,SAAS,MAAM,KAAK,CAAC;AACrB,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,WAAW;AAClB,GAAG;AACH,MAAM,OAAO,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC;AACrC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,IAAI;AACX,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AAC5C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,eAAe;AACtB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC,EAAE;AACtC;AACA,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;AAC9C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,kBAAkB;AACzB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC,EAAE;AACtC;AACA,MAAM,IAAI,KAAK,GAAG,CAAC,CAAC;AACpB;AACA,MAAM,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE;AAC9E;AACA,MAAM,OAAO,KAAK,CAAC;AACnB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU,CAAC,IAAI;AAClB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC7C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,CAAC,IAAI;AACf,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC1C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,SAAS,CAAC,IAAI,EAAE,IAAI,GAAG,EAAE;AAC5B,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAClD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,EAAE,QAAQ,GAAG,KAAK,CAAC,EAAE,OAAO,GAAG,KAAK,CAAC;AACzD,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;AAC3G,SAAS,OAAO;AAChB,SAAS,QAAQ,EAAE,IAAI,CAAC,SAAS;AACjC,OAAO,CAAC,CAAC;AACT;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE,OAAO,GAAG,EAAE;AACpD,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,WAAW,KAAK,MAAM;AAC3D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC;AACrE,OAAO;AACP;AACA,MAAM,MAAM,IAAI,GAAG,EAAE,CAAC;AACtB,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;AAC9C,MAAM;AACN,SAAS,OAAO,CAAC,IAAI,CAAC,CAAC,0BAA0B,EAAE,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AACrF,UAAU,CAAC,4CAA4C,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACvF,SAAS,OAAO,IAAI,CAAC;AACrB,OAAO;AACP;AACA;AACA,MAAM,MAAM,IAAI,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;AACnD;AACA,MAAM,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AAChH;AACA,MAAM,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC3D;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE,OAAO,GAAG,EAAE;AACtD,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,MAAM,IAAI,GAAG,EAAE,CAAC;AACtB,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;AAC9C,MAAM;AACN,SAAS,OAAO,CAAC,IAAI,CAAC,CAAC,0BAA0B,EAAE,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AACrF,UAAU,CAAC,8CAA8C,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACzF,SAAS,OAAO,IAAI,CAAC;AACrB,OAAO;AACP;AACA;AACA,MAAM,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ;AACxF,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACjD;AACA,MAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,KAAK,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,CAAC,CAAC,EAAE,EAAE,QAAQ,GAAG,KAAK,CAAC,CAAC,EAAE;AACtG;AACA,MAAM,OAAO,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACzD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC;AAC/B,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G,MAAM,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,MAAM,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE;AACpC;AACA,MAAM,IAAI,KAAK;AACf,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO;AACxC,SAAS;AACT,YAAY,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAChC,YAAY;AACZ,eAAe,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AACrD,eAAe;AACf,kBAAkB,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACzG,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO;AACxC,SAAS;AACT,YAAY,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AAClD,YAAY;AACZ,eAAe,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACtG,aAAa;AACb,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;AAC5B,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G,MAAM,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,MAAM,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE;AACpC;AACA,MAAM,IAAI,KAAK;AACf,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO;AACxC,SAAS;AACT,YAAY,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAChC,YAAY;AACZ,eAAe,MAAM,IAAI,CAAC;AAC1B,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO;AACxC,SAAS;AACT,YAAY,MAAM,IAAI,CAAC;AACvB,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,oBAAoB,CAAC,KAAK,GAAG,KAAK,CAAC;AACvC,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G,MAAM,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,MAAM,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,IAAI,KAAK;AACf,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO;AACxC,SAAS;AACT,YAAY,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAChC,YAAY;AACZ,eAAe,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAC7D,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO;AACxC,SAAS;AACT,YAAY,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAC1D,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,CAAC,IAAI,EAAE,GAAG,IAAI;AACxB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;AAC5C;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI;AAC7B,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;AACxD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI;AAC7B,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;AACjD;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC,IAAI,EAAE,GAAG,IAAI;AAC5B,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;AACvD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI;AACjD,GAAG;AACH;AACA,MAAM,IAAI,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE;AAC9B;AACA,MAAM,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AACnC,MAAM,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACrC;AACA,MAAM,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AACrE;AACA,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;AAC3C,MAAM;AACN,SAAS,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACzB,SAAS,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AACvC;AACA;AACA,SAAS,IAAI,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE;AAClC;AACA;AACA,SAAS,MAAM,SAAS,GAAG,EAAE,CAAC;AAC9B,SAAS,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE;AACjD,SAAS;AACT,YAAY,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACxC;AACA;AACA,YAAY,IAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,OAAO,CAAC,QAAQ,IAAI,QAAQ,KAAK,OAAO,CAAC,QAAQ,CAAC,SAAS;AACrG,cAAc,OAAO,IAAI,OAAO,KAAK,OAAO,CAAC,OAAO,CAAC;AACrD,YAAY;AACZ,eAAe,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACvC,eAAe,SAAS;AACxB,aAAa;AACb;AACA;AACA;AACA;AACA,YAAY,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC;AAC/G,UAAU;AACV;AACA;AACA,SAAS,IAAI,SAAS,CAAC,MAAM;AAC7B,SAAS;AACT,YAAY,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;AACrC,UAAU;AACV;AACA,SAAS;AACT;AACA,YAAY,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;AAChC,UAAU;AACV,OAAO;AACP;AACA,MAAM,OAAO,MAAM,CAAC;AACpB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI;AAChD,GAAG;AACH,MAAM,IAAI,QAAQ;AAClB,MAAM;AACN,SAAS,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;AAC9D,SAAS,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACtD;AACA;AACA,SAAS,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AAClE;AACA;AACA,SAAS,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,SAAS,GAAG,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;AAChH;AACA;AACA,SAAS,IAAI,QAAQ,YAAY,aAAa,CAAC,aAAa;AAC5D,UAAU,QAAQ,YAAY,aAAa,CAAC,sBAAsB;AAClE,SAAS;AACT,YAAY,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;AAC7B,UAAU;AACV;AACA,SAAS;AACT;AACA,YAAY,QAAQ,OAAO,CAAC,IAAI;AAChC;AACA,eAAe,KAAK,MAAM;AAC1B,kBAAkB,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;AACnC,kBAAkB,MAAM;AACxB,eAAe,KAAK,OAAO;AAC3B,kBAAkB,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;AACnC,kBAAkB,MAAM;AACxB,eAAe;AACf,kBAAkB,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;AACnC,kBAAkB,MAAM;AACxB,aAAa;AACb,UAAU;AACV;AACA;AACA,SAAS,IAAI,CAAC,GAAG,GAAG,OAAO,IAAI,GAAG,CAAC;AACnC;AACA,SAAS,QAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC;AACtE,OAAO;AACP;AACA,MAAM,OAAO,MAAM,CAAC;AACpB,IAAI;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,cAAc;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,SAAS,CAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,KAAK,CAAC;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,UAAU,CAAC,QAAQ,EAAE,IAAI,GAAG,KAAK,CAAC;AAC5C,GAAG;AACH,MAAM,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;AAC1G;AACA,MAAM,MAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;AAClD,MAAM,cAAc,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC1C,MAAM,cAAc,CAAC,KAAK,GAAG,IAAI,KAAK,KAAK,CAAC,GAAG,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;AACpE,MAAM,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAClC;AACA,MAAM,OAAO;AACb,SAAS,OAAO,EAAE;AAClB,SAAS;AACT,YAAY,IAAI,CAAC,cAAc,CAAC,WAAW;AAC3C,YAAY;AACZ,eAAe,cAAc,CAAC,SAAS,GAAG,IAAI,CAAC;AAC/C;AACA,eAAe,IAAI,IAAI,EAAE,EAAE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC,EAAE;AAC1D,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,EAAE,SAAS,QAAQ,EAAE,IAAI,GAAG,KAAK,CAAC;AACtD,SAAS;AACT,YAAY,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;AAChH;AACA,YAAY,IAAI,CAAC,cAAc,CAAC,WAAW;AAC3C,YAAY;AACZ;AACA,eAAe,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,cAAc,CAAC,KAAK,KAAK,cAAc,CAAC,SAAS,CAAC,IAAI;AAC5F,eAAe;AACf,kBAAkB,cAAc,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC;AACvD,gBAAgB;AAChB,oBAAoB,IAAI,IAAI,KAAK,KAAK,CAAC;AACvC,eAAe;AACf,kBAAkB,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC;AAC9C,gBAAgB;AAChB;AACA,eAAe,cAAc,CAAC,SAAS,GAAG,QAAQ,CAAC;AACnD,aAAa;AACb,UAAU;AACV;AACA,SAAS,cAAc;AACvB,OAAO,CAAC;AACR,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,kDAAkD,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;AACpD,MAAM;AACN,SAAS,MAAM,KAAK,CAAC;AACrB,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,eAAe,CAAC,KAAK,GAAG,KAAK,CAAC;AAClC,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,kDAAkD,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC;AAC/D,MAAM;AACN,SAAS,MAAM,KAAK,CAAC;AACrB,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,WAAW;AAClB,GAAG;AACH,MAAM,OAAO,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC;AACrC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,IAAI;AACX,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,kDAAkD,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC;AACxB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU,CAAC,IAAI;AAClB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,kDAAkD,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC7C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,CAAC,IAAI;AACf,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,kDAAkD,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC1C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,CAAC,IAAI,EAAE,GAAG,IAAI;AACxB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,kDAAkD,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;AAC5C;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI;AAC7B,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,kDAAkD,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;AACxD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI;AAC7B,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,kDAAkD,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;AACjD;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC,IAAI,EAAE,GAAG,IAAI;AAC5B,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,kDAAkD,CAAC,CAAC,EAAE;AAC7G;AACA,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;AACvD,IAAI;AACJ;;AC5hFA;AACA;AACA;AACA,MAAM,eAAe,SAAS,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE;AAChC,GAAG;AACH,MAAM,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACpC,MAAM,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;AACpC,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACvB,IAAI;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,WAAW,GAAG,0BAA0B,CAAC;AAC/C;AACA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,aAAa,IAAI,CAAC,EAAE,UAAU,EAAE,aAAa,GAAG,KAAK,CAAC,EAAE;AAC3D,GAAG;AACH,MAAM,IAAI,EAAE,UAAU,YAAY,GAAG,CAAC,IAAI,OAAO,UAAU,KAAK,QAAQ;AACxE,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,mCAAmC,CAAC,CAAC,CAAC;AACpE,OAAO;AACP;AACA,MAAM,IAAI,aAAa,KAAK,KAAK,CAAC,IAAI,OAAO,aAAa,KAAK,UAAU;AACzE,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC;AAClE,OAAO;AACP;AACA,MAAM,MAAM,QAAQ,GAAG,UAAU,YAAY,GAAG,GAAG,UAAU,CAAC,QAAQ,EAAE,GAAG,UAAU,CAAC;AACtF;AACA,MAAM,MAAM,IAAI,GAAG,CAAC,OAAO,EAAE,UAAU,YAAY,GAAG;AACtD,OAAO,OAAO,UAAU,KAAK,QAAQ,IAAI,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC;AAC3F;AACA,MAAM;AACN,MAAM;AACN,SAAS,MAAM,MAAM,GAAG,MAAM,OAAO,UAAU,CAAC,CAAC;AACjD;AACA,SAAS,MAAM,QAAQ,GAAG,aAAa,KAAK,KAAK,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;AACpF;AACA,SAAS,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;AAClG,OAAO;AACP,MAAM,OAAO,KAAK;AAClB,MAAM;AACN;AACA;AACA;AACA,SAAS,IAAI,KAAK,CAAC,IAAI,KAAK,kBAAkB,IAAI,KAAK,CAAC,IAAI,KAAK,sBAAsB;AACvF,SAAS;AACT,YAAY,MAAM,IAAI,eAAe,CAAC;AACtC,eAAe,OAAO,EAAE,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;AAC7D,eAAe,IAAI,EAAE,sBAAsB;AAC3C,aAAa,CAAC,CAAC;AACf,UAAU;AACV;AACA,SAAS,MAAM,KAAK,CAAC;AACrB,OAAO;AACP,IAAI;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA,MAAM,WAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,KAAK,CAAC;AACT;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,QAAQ,CAAC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,KAAK,CAAC;AACT;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC;AACf;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,SAAS,CAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,cAAc,CAAC;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO,CAAC;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,aAAa,GAAG,KAAK,CAAC;AAC3D,GAAG;AACH,MAAM,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AACxB;AACA,MAAM,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC3B;AACA,MAAM,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AACxB;AACA,MAAM,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAChC;AACA,MAAM,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;AAC1C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,IAAI,GAAG,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,OAAO,GAAG,EAAE,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,UAAU,GAAG,EAAE,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE;AAChD;AACA;AACA;AACA;AACA,GAAG,KAAK;AACR,GAAG;AACH,MAAM;AACN,MAAM;AACN,SAAS,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;AAC/B,SAAS,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;AACnC;AACA;AACA,SAAS,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;AACzC,OAAO;AACP,MAAM,OAAO,GAAG,EAAE,cAAc;AAChC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,OAAO,CAAC,OAAO;AACtB,GAAG;AACH,MAAM,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;AAC9B;AACA;AACA,MAAM,IAAI,OAAO;AACjB,MAAM;AACN,SAAS,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;AAC1E,SAAS;AACT,YAAY,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO;AAC5C,YAAY;AACZ,eAAe,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;AAChD,aAAa;AACb;AACA,YAAY,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;AAClC,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN,SAAS,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,CAAC;AAC3C,SAAS;AACT,YAAY,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC;AAC1E,YAAY,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;AACtC,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,aAAa,GAAG,EAAE,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,QAAQ,GAAG,EAAE,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,IAAI,GAAG,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,aAAa,CAAC,aAAa,EAAE,EAAE,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC,EAAE;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,UAAU,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,EAAE;AACxD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU,CAAC,IAAI,EAAE,cAAc,GAAG,EAAE;AAC7C;AACA;AACA,GAAG,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,EAAE;AACvF;AACA;AACA,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,mCAAmC,CAAC,CAAC,CAAC,EAAE;AACtG;AACA,GAAG,OAAO,WAAW,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;AAC5C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU,CAAC,KAAK;AACzB;AACA,GAAG,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,EAAE,OAAO,KAAK,CAAC,EAAE;AACzF;AACA,GAAG,OAAO,OAAO,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,UAAU,CAAC;AACvD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,QAAQ,CAAC,KAAK;AACvB;AACA,GAAG,OAAO,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC;AACtD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,CAAC,IAAI,EAAE,cAAc;AACzC;AACA,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;AAC1B,GAAG;AACH,MAAM,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,cAAc,CAAC,CAAC,EAAE;AACjG,IAAI;AACJ,QAAQ,IAAI,OAAO,IAAI,KAAK,QAAQ;AACpC,GAAG;AACH,MAAM,KAAK,MAAM,GAAG,IAAI,IAAI;AAC5B,MAAM;AACN;AACA,SAAS,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,cAAc,CAAC,CAAC,EAAE;AACnH,OAAO;AACP,IAAI;AACJ;AACA,GAAG,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC9B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,iBAAiB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC,SAAS,GAAG,EAAE,EAAE,aAAa,GAAG,EAAE;AACjD,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AAC9B,IAAI;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,GAAG,EAAE,EAAE,aAAa,GAAG,EAAE,EAAE,OAAO,GAAG,KAAK,CAAC;AACvG,CAAC,OAAO,GAAG,KAAK,CAAC,EAAE,UAAU,GAAG,IAAI,EAAE;AACtC;AACA,GAAG,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE;AACxF,GAAG,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC,EAAE;AACvG,GAAG,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,6BAA6B,CAAC,CAAC,CAAC,EAAE;AAC/F;AACA,GAAG,IAAI,OAAO,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,EAAE;AAC9D,GAAG,IAAI,OAAO,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC,EAAE;AACpE;AACA,GAAG,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC1D,GAAG;AACH,MAAM,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACpE,IAAI;AACJ;AACA;AACA,GAAG,IAAI,iBAAiB,GAAG,CAAC,CAAC;AAC7B,GAAG,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAChC;AACA;AACA,GAAG,IAAI,SAAS,GAAG,KAAK,CAAC;AACzB,GAAG,IAAI,SAAS,GAAG,KAAK,CAAC;AACzB;AACA;AACA,GAAG,MAAM,EAAE,GAAG,IAAI,iBAAiB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;AAC9D;AACA,GAAG,MAAM,OAAO,GAAG,EAAE,CAAC;AACtB;AACA,GAAG,IAAI,OAAO,OAAO,KAAK,QAAQ;AAClC,GAAG;AACH,MAAM,MAAM,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;AACpD;AACA,MAAM,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ;AAC7D,MAAM;AACN,SAAS,SAAS,GAAG,IAAI,CAAC;AAC1B;AACA,SAAS,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU;AACzD,SAAS;AACT,YAAY,EAAE,CAAC,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC;AAC9C,YAAY,EAAE,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;AACvC,YAAY,EAAE,CAAC,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;AACzD;AACA,YAAY,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;AACtD;AACA,YAAY,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,KAAK,IAAI,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC3F;AACA,YAAY,SAAS,GAAG,IAAI,CAAC;AAC7B,YAAY,iBAAiB,EAAE,CAAC;AAChC,YAAY,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC/C,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA,GAAG;AACH,MAAM,KAAK,MAAM,IAAI,IAAI,OAAO;AAChC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACpD;AACA,SAAS,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ;AAChE,SAAS;AACT,YAAY,SAAS,GAAG,IAAI,CAAC;AAC7B;AACA,YAAY,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU;AAC5D,YAAY;AACZ,eAAe,EAAE,CAAC,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC;AACjD,eAAe,EAAE,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;AAC1C,eAAe,EAAE,CAAC,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;AAC5D;AACA,eAAe,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;AACzD;AACA,eAAe,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,KAAK,IAAI,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC9F;AACA,eAAe,SAAS,GAAG,IAAI,CAAC;AAChC,eAAe,iBAAiB,EAAE,CAAC;AACnC,eAAe,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAClD,aAAa;AACb,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA,GAAG,IAAI,UAAU,IAAI,OAAO,CAAC,aAAa,IAAI,CAAC,SAAS;AACxD,GAAG;AACH,MAAM,MAAM,IAAI,KAAK,CAAC,CAAC,gDAAgD,CAAC,CAAC,CAAC;AAC1E,IAAI;AACJ;AACA,GAAG,IAAI,UAAU,IAAI,OAAO,CAAC,aAAa,IAAI,CAAC,SAAS;AACxD,GAAG;AACH,MAAM,MAAM,IAAI,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AACrE,IAAI;AACJ;AACA;AACA,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,GAAG,iBAAiB,CAAC;AACrD,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,GAAG,iBAAiB,CAAC;AACrD;AACA,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC9B;AACA,GAAG,OAAO,EAAE,CAAC,IAAI,CAAC;AAClB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,eAAe,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,GAAG,EAAE,EAAE,aAAa,GAAG,EAAE,EAAE,OAAO,GAAG,KAAK,CAAC;AAChG,CAAC,OAAO,GAAG,KAAK,CAAC,EAAE,UAAU,GAAG,IAAI,EAAE;AACtC;AACA,GAAG,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE;AACxF,GAAG,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC,EAAE;AACvG,GAAG,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,6BAA6B,CAAC,CAAC,CAAC,EAAE;AAC/F;AACA,GAAG,IAAI,OAAO,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,EAAE;AAC9D,GAAG,IAAI,OAAO,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC,EAAE;AACpE;AACA,GAAG,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC1D,GAAG;AACH,MAAM,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACpE,IAAI;AACJ;AACA;AACA,GAAG,IAAI,iBAAiB,GAAG,CAAC,CAAC;AAC7B,GAAG,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAChC;AACA;AACA,GAAG,IAAI,SAAS,GAAG,KAAK,CAAC;AACzB,GAAG,IAAI,SAAS,GAAG,KAAK,CAAC;AACzB;AACA;AACA,GAAG,MAAM,EAAE,GAAG,IAAI,iBAAiB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;AAC9D;AACA,GAAG,IAAI,OAAO,OAAO,KAAK,QAAQ;AAClC,GAAG;AACH,MAAM,MAAM,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;AACpD;AACA,MAAM,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ;AAC7D,MAAM;AACN,SAAS,SAAS,GAAG,IAAI,CAAC;AAC1B;AACA,SAAS,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU;AACzD,SAAS;AACT,YAAY,EAAE,CAAC,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC;AAC9C,YAAY,EAAE,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;AACvC,YAAY,EAAE,CAAC,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;AACzD;AACA,YAAY,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;AACvC;AACA,YAAY,SAAS,GAAG,IAAI,CAAC;AAC7B,YAAY,iBAAiB,EAAE,CAAC;AAChC,YAAY,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC/C,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA,GAAG;AACH,MAAM,KAAK,MAAM,IAAI,IAAI,OAAO;AAChC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACpD;AACA,SAAS,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ;AAChE,SAAS;AACT,YAAY,SAAS,GAAG,IAAI,CAAC;AAC7B;AACA,YAAY,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU;AAC5D,YAAY;AACZ,eAAe,EAAE,CAAC,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC;AACjD,eAAe,EAAE,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;AAC1C,eAAe,EAAE,CAAC,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;AAC5D;AACA,eAAe,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;AAC1C;AACA,eAAe,SAAS,GAAG,IAAI,CAAC;AAChC,eAAe,iBAAiB,EAAE,CAAC;AACnC,eAAe,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAClD,aAAa;AACb,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA,GAAG,IAAI,UAAU,IAAI,OAAO,CAAC,aAAa,IAAI,CAAC,SAAS;AACxD,GAAG;AACH,MAAM,MAAM,IAAI,KAAK,CAAC,CAAC,gDAAgD,CAAC,CAAC,CAAC;AAC1E,IAAI;AACJ;AACA,GAAG,IAAI,UAAU,IAAI,OAAO,CAAC,aAAa,IAAI,CAAC,SAAS;AACxD,GAAG;AACH,MAAM,MAAM,IAAI,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AACrE,IAAI;AACJ;AACA;AACA,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,GAAG,iBAAiB,CAAC;AACrD,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,GAAG,iBAAiB,CAAC;AACrD;AACA,GAAG,OAAO,EAAE,CAAC,IAAI,CAAC;AAClB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,mBAAmB;AACzB;AACA;AACA;AACA;AACA,GAAG,cAAc,GAAG,IAAI,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC,aAAa;AAC5B,GAAG;AACH,MAAM,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;AAC1C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,WAAW;AAClB,GAAG;AACH,MAAM,OAAO,IAAI,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;AAC7E,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,OAAO;AACd,GAAG;AACH;AACA,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;AAC9C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,aAAa;AACpB,GAAG;AACH;AACA,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,cAAc,CAAC;AACjC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,OAAO,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE;AAC3C,GAAG;AACH,MAAM,IAAI,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,KAAK,CAAC;AAClD,MAAM;AACN,SAAS,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AAC9E,SAAS,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AACzF,SAAS,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AACrF,SAAS,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC1E,SAAS,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACnE,SAAS,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAC5E,SAAS,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;AACvF,OAAO;AACP;AACA,MAAM,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;AACjC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,cAAc,CAAC,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,EAAE;AACzD,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,KAAK,KAAK,CAAC,IAAI,OAAO,OAAO,KAAK,SAAS;AAC5D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC;AAC5D,OAAO;AACP;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC7D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACvE,OAAO;AACP;AACA;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ;AACrC,MAAM;AACN,SAAS,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;AAC7B,OAAO;AACP;AACA,MAAM,MAAM,eAAe,GAAG,OAAO,KAAK,KAAK,CAAC,CAAC;AACjD;AACA,MAAM,MAAM,OAAO,GAAG,EAAE,CAAC;AACzB;AACA,MAAM,IAAI,KAAK,GAAG,CAAC,CAAC;AACpB;AACA,MAAM,KAAK,MAAM,IAAI,IAAI,OAAO;AAChC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AAC/D;AACA,SAAS,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,QAAQ,KAAK,eAAe,IAAI,KAAK,CAAC,OAAO,KAAK,OAAO,CAAC;AACjG,SAAS;AACT,YAAY,KAAK,MAAM,IAAI,IAAI,wBAAwB,CAAC,KAAK,CAAC,QAAQ,CAAC;AACvE,YAAY;AACZ;AACA,eAAe,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,UAAU,IAAI,IAAI,KAAK,aAAa,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE;AAClH,aAAa;AACb,UAAU;AACV;AACA,SAAS,KAAK,EAAE,CAAC;AACjB,OAAO;AACP;AACA;AACA,MAAM,IAAI,KAAK,KAAK,CAAC;AACrB,MAAM;AACN,SAAS,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE;AACpE,SAAS;AACT,YAAY,IAAI,KAAK,CAAC,QAAQ,KAAK,eAAe,IAAI,KAAK,CAAC,OAAO,KAAK,OAAO,CAAC;AAChF,YAAY;AACZ,eAAe,KAAK,MAAM,IAAI,IAAI,wBAAwB,CAAC,KAAK,CAAC,QAAQ,CAAC;AAC1E,eAAe;AACf;AACA,kBAAkB,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,UAAU,IAAI,IAAI,KAAK,aAAa,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE;AACrH,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;AACzC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,SAAS,CAAC,EAAE,MAAM,EAAE,OAAO,GAAG,EAAE,EAAE;AACrC,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ;AACpC,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC;AAC1D,OAAO;AACP;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC7D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACvE,OAAO;AACP;AACA;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ;AACrC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;AAClE,SAAS,OAAO,KAAK,KAAK,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU,CAAC;AACjF,OAAO;AACP;AACA,MAAM,IAAI,KAAK,GAAG,CAAC,CAAC;AACpB;AACA,MAAM,KAAK,MAAM,IAAI,IAAI,OAAO;AAChC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AAC/D;AACA,SAAS,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU,EAAE,EAAE,OAAO,KAAK,CAAC,EAAE;AAChG;AACA,SAAS,KAAK,EAAE,CAAC;AACjB,OAAO;AACP;AACA;AACA,MAAM,IAAI,KAAK,KAAK,CAAC;AACrB,MAAM;AACN,SAAS,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE;AACpE,SAAS;AACT,YAAY,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU,EAAE,EAAE,OAAO,KAAK,CAAC,EAAE;AAC/E,UAAU;AACV,OAAO;AACP;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,GAAG,KAAK,CAAC,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE;AACrD,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE;AAC3F;AACA,MAAM,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;AACtG;AACA,MAAM,IAAI,OAAO,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,EAAE;AAClF;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC7D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACvE,OAAO;AACP;AACA;AACA,MAAM,IAAI,SAAS,GAAG,KAAK,CAAC;AAC5B,MAAM,IAAI,SAAS,GAAG,KAAK,CAAC;AAC5B;AACA,MAAM,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC9C;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ;AACrC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;AAClE;AACA,SAAS,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ;AAChE,SAAS;AACT,YAAY,SAAS,GAAG,IAAI,CAAC;AAC7B;AACA,YAAY,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU;AAC5D,YAAY;AACZ,eAAe,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;AACxF;AACA,eAAe,SAAS,GAAG,IAAI,CAAC;AAChC,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,OAAO;AACnC,SAAS;AACT,YAAY,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AAClE;AACA,YAAY,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ;AACnE,YAAY;AACZ,eAAe,SAAS,GAAG,IAAI,CAAC;AAChC;AACA,eAAe,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU;AAC/D,eAAe;AACf,kBAAkB,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;AAC3F;AACA,kBAAkB,SAAS,GAAG,IAAI,CAAC;AACnC,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,SAAS;AAClD,MAAM;AACN,SAAS,MAAM,IAAI,KAAK,CAAC,CAAC,gDAAgD,CAAC,CAAC,CAAC;AAC7E,OAAO;AACP;AACA,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,SAAS;AAClD,MAAM;AACN,SAAS,MAAM,IAAI,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AACxE,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,WAAW,CAAC,EAAE,MAAM,EAAE,IAAI,GAAG,KAAK,CAAC,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE;AAChE,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE;AAC3F;AACA,MAAM,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;AACtG;AACA,MAAM,IAAI,OAAO,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,EAAE;AAClF;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC7D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACvE,OAAO;AACP;AACA;AACA,MAAM,IAAI,SAAS,GAAG,KAAK,CAAC;AAC5B,MAAM,IAAI,SAAS,GAAG,KAAK,CAAC;AAC5B;AACA;AACA,MAAM,IAAI,MAAM,GAAG,KAAK,CAAC,CAAC;AAC1B,MAAM,MAAM,OAAO,GAAG,EAAE,CAAC;AACzB;AACA,MAAM,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC9C;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ;AACrC,MAAM;AACN,SAAS,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;AACnE;AACA,SAAS,IAAI,MAAM,KAAK,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,QAAQ;AACnE,SAAS;AACT,YAAY,SAAS,GAAG,IAAI,CAAC;AAC7B;AACA,YAAY,IAAI,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU;AAC7D,YAAY;AACZ,eAAe,MAAM,GAAG,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;AACnG;AACA;AACA,eAAe,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC/D;AACA,eAAe,SAAS,GAAG,IAAI,CAAC;AAChC,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,OAAO;AACnC,SAAS;AACT,YAAY,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACnE;AACA,YAAY,IAAI,MAAM,KAAK,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,QAAQ;AACtE,YAAY;AACZ,eAAe,SAAS,GAAG,IAAI,CAAC;AAChC;AACA,eAAe,IAAI,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU;AAChE,eAAe;AACf,kBAAkB,MAAM,GAAG,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;AACtG;AACA;AACA,kBAAkB,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAClE;AACA,kBAAkB,SAAS,GAAG,IAAI,CAAC;AACnC,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,SAAS;AAClD,MAAM;AACN,SAAS,MAAM,IAAI,KAAK,CAAC,CAAC,gDAAgD,CAAC,CAAC,CAAC;AAC7E,OAAO;AACP;AACA,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,SAAS;AAClD,MAAM;AACN,UAAU,MAAM,IAAI,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AACzE,OAAO;AACP;AACA;AACA,MAAM,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM;AACnE,MAAM;AACN,SAAS,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC;AACrE,SAAS,QAAQ,QAAQ,CAAC,MAAM;AAChC;AACA,YAAY,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC,CAAC;AAClC,YAAY,KAAK,CAAC,EAAE,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvC,YAAY,SAAS,OAAO,QAAQ,CAAC;AACrC,UAAU;AACV,OAAO,CAAC,GAAG,MAAM,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,gBAAgB,CAAC,EAAE,MAAM,EAAE,SAAS,GAAG,EAAE,EAAE,aAAa,GAAG,EAAE,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE;AAC1F,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA;AACA,MAAM,OAAO,gBAAgB,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC;AAC1G,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU,CAAC,EAAE,MAAM,EAAE,IAAI,GAAG,KAAK,CAAC,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE;AACzD,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE;AAC3F;AACA,MAAM,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;AACtG;AACA,MAAM,IAAI,OAAO,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,EAAE;AAClF;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC7D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACvE,OAAO;AACP;AACA;AACA,MAAM,IAAI,SAAS,GAAG,KAAK,CAAC;AAC5B,MAAM,IAAI,SAAS,GAAG,KAAK,CAAC;AAC5B;AACA;AACA,MAAM,IAAI,MAAM,GAAG,KAAK,CAAC,CAAC;AAC1B,MAAM,MAAM,OAAO,GAAG,EAAE,CAAC;AACzB;AACA,MAAM,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC9C;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ;AACrC,MAAM;AACN,SAAS,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;AACnE;AACA,SAAS,IAAI,MAAM,KAAK,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,QAAQ;AACnE,SAAS;AACT,YAAY,SAAS,GAAG,IAAI,CAAC;AAC7B;AACA,YAAY,IAAI,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU;AAC7D,YAAY;AACZ,eAAe,MAAM,GAAG,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;AACnG;AACA;AACA,eAAe,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAC/D;AACA,eAAe,SAAS,GAAG,IAAI,CAAC;AAChC,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,OAAO;AACnC,SAAS;AACT,YAAY,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACnE;AACA,YAAY,IAAI,MAAM,KAAK,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,QAAQ;AACtE,YAAY;AACZ,eAAe,SAAS,GAAG,IAAI,CAAC;AAChC;AACA,eAAe,IAAI,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU;AAChE,eAAe;AACf,kBAAkB,MAAM,GAAG,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;AACtG;AACA;AACA,kBAAkB,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAClE;AACA,kBAAkB,SAAS,GAAG,IAAI,CAAC;AACnC,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,SAAS;AAClD,MAAM;AACN,SAAS,MAAM,IAAI,KAAK,CAAC,CAAC,gDAAgD,CAAC,CAAC,CAAC;AAC7E,OAAO;AACP;AACA,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,SAAS;AAClD,MAAM;AACN,SAAS,MAAM,IAAI,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AACxE,OAAO;AACP;AACA;AACA,MAAM,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,OAAO,GAAG,MAAM,CAAC;AACnD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,eAAe,CAAC,EAAE,MAAM,EAAE,SAAS,GAAG,EAAE,EAAE,aAAa,GAAG,EAAE,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE;AACnF,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA;AACA,MAAM,OAAO,eAAe,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC;AACzG,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE;AACnE,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,KAAK,CAAC;AACxD,MAAM;AACN,SAAS,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AAC/E,SAAS,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AAC1F,SAAS,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AACtF,SAAS,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC3E,SAAS,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACpE,SAAS,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAC7E,SAAS,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;AACxF,OAAO;AACP;AACA,MAAM,IAAI,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,KAAK,CAAC;AACxD,MAAM;AACN,SAAS,WAAW,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC/F,SAAS,WAAW,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC1G,SAAS,WAAW,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACtG,SAAS,WAAW,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC3F,SAAS,WAAW,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACpF,SAAS,WAAW,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7F,SAAS,WAAW,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACxG,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU,CAAC,OAAO;AACrB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G,IAAI;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,wBAAwB,GAAG,CAAC,GAAG;AACrC;AACA,GAAG,MAAM,KAAK,GAAG,EAAE,CAAC;AACpB;AACA,GAAG;AACH,GAAG;AACH,MAAM,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACnH,MAAM,GAAG,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;AACvC,IAAI,QAAQ,GAAG,KAAK,KAAK,CAAC,IAAI,GAAG,KAAK,IAAI,IAAI,EAAE,GAAG,KAAK,MAAM,CAAC,SAAS,CAAC,EAAE;AAC3E;AACA,GAAG,OAAO,KAAK,CAAC;AAChB,CAAC,CAAC;AACF;AACA,MAAM,uBAAuB,GAAG,qBAAqB,CAAC;AACtD,MAAM,sBAAsB,GAAG,OAAO,CAAC;AACvC,MAAM,kBAAkB,GAAG,kBAAkB,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY,CAAC,MAAM;AAC5B;AACA,GAAG,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,EAAE,MAAM,YAAY,GAAG,CAAC;AAC7D,GAAG;AACH,MAAM,MAAM,IAAI,SAAS,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAC;AAC9D,IAAI;AACJ;AACA;AACA,GAAG,IAAI,aAAa,GAAG,OAAO,MAAM,KAAK,QAAQ,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC;AACpE;AACA,GAAG,IAAI,MAAM,YAAY,GAAG;AAC5B,GAAG;AACH,MAAM,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC;AACtC,IAAI;AACJ,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC;AAC5C,GAAG;AACH,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC;AAC/C,IAAI;AACJ;AACA,GAAG,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;AACtE,GAAG,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;AACzE;AACA,GAAG,OAAO,aAAa,CAAC;AACxB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,aAAa,CAAC,YAAY;AACnC;AACA,GAAG,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,EAAE,OAAO,KAAK,CAAC,EAAE;AAC1D;AACA,GAAG,IAAI,OAAO,YAAY,CAAC,IAAI,KAAK,QAAQ,EAAE,EAAE,OAAO,KAAK,CAAC,EAAE;AAC/D;AACA,GAAG,IAAI,OAAO,YAAY,CAAC,MAAM,KAAK,WAAW,IAAI,OAAO,YAAY,CAAC,MAAM,KAAK,QAAQ;AAC5F,IAAI,EAAE,YAAY,CAAC,MAAM,YAAY,GAAG,CAAC;AACzC,GAAG;AACH,MAAM,OAAO,KAAK,CAAC;AACnB,IAAI;AACJ;AACA,GAAG,IAAI,OAAO,YAAY,CAAC,OAAO,KAAK,WAAW,IAAI,OAAO,YAAY,CAAC,OAAO,KAAK,QAAQ,EAAE,EAAE,OAAO,KAAK,CAAC,EAAE;AACjH;AACA,GAAG,OAAO,IAAI,CAAC;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,aAAa,CAAC,MAAM;AAC7B;AACA;AACA,GAAG,IAAI,OAAO,MAAM,CAAC,YAAY,KAAK,UAAU;AAChD,GAAG;AACH,MAAM,OAAO,MAAM,CAAC;AACpB,IAAI;AACJ;AACA,QAAQ,IAAI,MAAM,CAAC,OAAO;AAC1B,GAAG;AACH,MAAM,OAAO,MAAM,CAAC,OAAO,CAAC;AAC5B,IAAI;AACJ;AACA;AACA,GAAG;AACH,MAAM,OAAO,MAAM,CAAC;AACpaAAa;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,SAAS,GAAG,IAAI,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,gBAAgB,GAAG,EAAE,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,eAAe,GAAG,EAAE,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,QAAQ;AACX,GAAG;AACH,MAAM,UAAU,EAAE,KAAK;AACvB,MAAM,cAAc,EAAE,IAAI;AAC1B,MAAM,cAAc,EAAE,KAAK;AAC3B,MAAM,iBAAiB,EAAE,IAAI;AAC7B,MAAM,iBAAiB,EAAE,IAAI;AAC7B,MAAM,aAAa,EAAE,KAAK;AAC1B,MAAM,aAAa,EAAE,KAAK;AAC1B,IAAI,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,cAAc,GAAG,EAAE,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW,CAAC,OAAO,GAAG,EAAE;AAC3B,GAAG;AACH,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC,EAAE;AACrF;AACA,MAAM,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC;AACpE,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACvE,OAAO;AACP;AACA,MAAM,IAAI,OAAO,CAAC,YAAY,KAAK,KAAK,CAAC,IAAI,OAAO,OAAO,CAAC,YAAY,KAAK,QAAQ;AACrF,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,uCAAuC,CAAC,CAAC,CAAC;AACxE,OAAO;AACP;AACA,MAAM,IAAI,OAAO,CAAC,OAAO,KAAK,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC;AAClE,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,mCAAmC,CAAC,CAAC,CAAC;AACpE,OAAO;AACP;AACA,MAAM,IAAI,OAAO,CAAC,aAAa,KAAK,KAAK,CAAC,IAAI,OAAO,OAAO,CAAC,aAAa,KAAK,UAAU;AACzF,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC;AACzC,MAAM;AACN,SAAS,MAAM,IAAI,SAAS;AAC5B,UAAU,CAAC,sGAAsG,CAAC,CAAC,CAAC;AACpH,OAAO;AACP;AACA;AACA,MAAM,IAAI,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,MAAM,CAAC,QAAQ,IAAI,OAAO,CAAC,aAAa;AACvF,MAAM;AACN,SAAS,KAAK,MAAM,aAAa,IAAI,OAAO,CAAC,aAAa;AAC1D,SAAS;AACT,YAAY,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;AAC9D,UAAU;AACV,OAAO;AACP,WAAW,IAAI,OAAO,CAAC,aAAa,KAAK,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,QAAQ,IAAI,OAAO,CAAC,aAAa,CAAC;AAC9F,MAAM;AACN,SAAS,MAAM,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;AACrD,SAAS,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;AAC3D,OAAO;AACP;AACA,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;AAC7C;AACA,MAAM,IAAI,CAAC,WAAW,CAAC;AACvB,SAAS,QAAQ,EAAE,OAAO,CAAC,QAAQ,KAAK,KAAK,CAAC,GAAG,OAAO,CAAC,QAAQ,GAAG,IAAI,QAAQ,EAAE;AAClF,SAAS,YAAY,EAAE,OAAO,CAAC,YAAY;AAC3C,OAAO,CAAC,CAAC;AACT,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,GAAG,CAAC,YAAY,EAAE,UAAU;AACrC,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAC,EAAE;AACxG;AACA,MAAM,IAAI,OAAO,YAAY,CAAC,IAAI,KAAK,QAAQ;AAC/C,MAAM;AACN,SAAS,MAAM,IAAI,SAAS;AAC5B,UAAU,CAAC,gDAAgD,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtG,OAAO;AACP;AACA,MAAM,IAAI,YAAY,CAAC,MAAM,KAAK,KAAK,CAAC,IAAI,OAAO,YAAY,CAAC,MAAM,KAAK,QAAQ;AACnF,OAAO,EAAE,YAAY,CAAC,MAAM,YAAY,GAAG,CAAC;AAC5C,MAAM;AACN,SAAS,MAAM,IAAI,SAAS;AAC5B,UAAU,CAAC,yDAAyD,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/G,OAAO;AACP;AACA,MAAM,IAAI,YAAY,CAAC,OAAO,KAAK,KAAK,CAAC,IAAI,OAAO,YAAY,CAAC,OAAO,KAAK,QAAQ;AACrF,MAAM;AACN,SAAS,MAAM,IAAI,SAAS;AAC5B,UAAU,CAAC,oDAAoD,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1G,OAAO;AACP;AACA,MAAM,IAAI,UAAU,KAAK,KAAK,CAAC,IAAI,OAAO,UAAU,KAAK,QAAQ;AACjE,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,0CAA0C,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnH,OAAO;AACP;AACA;AACA,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC;AAChD,MAAM;AACN,SAAS,MAAM,IAAI,KAAK,CAAC,CAAC,mCAAmC,EAAE,YAAY,CAAC,IAAI,CAAC,aAAa;AAC9F,UAAU,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,OAAO;AACP;AACA;AACA;AACA,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC;AACnD,MAAM;AACN,SAAS,MAAM,IAAI,KAAK,CAAC,CAAC,4CAA4C,EAAE,YAAY,CAAC,IAAI,CAAC,aAAa;AACvG,UAAU,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,OAAO;AACP;AACA,MAAM,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAChD;AACA,MAAM,IAAI,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC;AACjC;AACA;AACA,MAAM,IAAI,OAAO,YAAY,CAAC,QAAQ,KAAK,QAAQ,IAAI,OAAO,YAAY,CAAC,QAAQ,KAAK,UAAU;AAClG,MAAM;AACN,SAAS,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;AAC1C;AACA,SAAS,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC;AACpC;AACA,SAAS,IAAI,GAAG,UAAU,CAAC;AAC3B,OAAO;AACP;AACA,MAAM;AACN;AACA,SAAS,MAAM,GAAG,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,IAAI,CAAC;AAC3D;AACA,SAAS;AACT,SAAS;AACT,YAAY,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;AAC1F;AACA;AACA,YAAY,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI;AACvC,YAAY;AACZ,eAAe,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW;AACjD,gBAAgB,CAAC,2BAA2B,EAAE,MAAM,CAAC,KAAK,GAAG,QAAQ,GAAG,SAAS,CAAC,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACzG,aAAa;AACb;AACA,YAAY,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;AACvC,YAAY,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AAC/B,UAAU;AACV,SAAS,OAAO,GAAG;AACnB,SAAS;AACT;AACA,YAAY,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AACzD;AACA,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,kDAAkD,EAAE,MAAM,CAAC,mBAAmB,CAAC;AAC5G,aAAa,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACnE,UAAU;AACV,OAAO;AACP;AACA;AACA,MAAM,IAAI,MAAM,YAAY,GAAG;AAC/B,MAAM;AACN,SAAS,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;AACpC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS;AAClD,MAAM;AACN,SAAS,OAAO;AAChB,SAAS;AACT,YAAY,YAAY,EAAE,IAAI,CAAC,aAAa;AAC5C,YAAY,UAAU,EAAE,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;AACpE,UAAU;AACV;AACA,SAAS,MAAM,EAAE,UAAU,IAAI,EAAE;AACjC;AACA,SAAS,MAAM;AACf,SAAS;AACT,YAAY,IAAI,EAAE,YAAY,CAAC,IAAI;AACnC,YAAY,MAAM;AAClB,YAAY,aAAa,EAAE,YAAY,CAAC,MAAM,CAAC;AAC/C,YAAY,IAAI;AAChB,YAAY,OAAO,EAAE,YAAY,CAAC,OAAO,IAAI,EAAE;AAC/C,UAAU;AACV,OAAO,CAAC,CAAC,CAAC;AACV;AACA,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;AAC1C;AACA,MAAM,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,KAAK,IAAI,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;AAChF,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,wBAAwB,KAAK,CAAC,CAAC;AACvE;AACA,MAAM,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;AAC5F;AACA,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACpD,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AACnD;AACA;AACA,MAAM,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC;AAChD,SAAS,MAAM,EAAE,cAAc;AAC/B,SAAS,OAAO,EAAE,IAAI;AACtB,SAAS,OAAO,EAAE,YAAY,CAAC,IAAI;AACnC,SAAS,UAAU,EAAE,KAAK;AAC1B,OAAO,CAAC,CAAC;AACT;AACA,MAAM,IAAI,OAAO,UAAU,CAAC,UAAU,KAAK,QAAQ;AACnD,MAAM;AACN,SAAS,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC;AAClD;AACA;AACA;AACA,SAAS,IAAI,OAAO,UAAU,CAAC,UAAU,CAAC,GAAG,KAAK,QAAQ,IAAI,OAAO,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,KAAK,UAAU;AACpH,SAAS;AACT,YAAY,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;AACxD,YAAY;AACZ,eAAe,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,YAAY,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAC3F,aAAa,CAAC,CAAC;AACf,UAAU;AACV,OAAO;AACP;AACA;AACA,MAAM,IAAI,IAAI,CAAC,SAAS;AACxB,MAAM;AACN,SAAS,MAAM,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,oCAAoC,CAAC,EAAE,UAAU,CAAC,CAAC;AAC/F,OAAO;AACP;AACA,MAAM,OAAO,UAAU,CAAC;AACxB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,MAAM,CAAC,aAAa,EAAE,UAAU;AACzC,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAC,EAAE;AAClG;AACA,MAAM,MAAM,WAAW,GAAG,EAAE,CAAC;AAC7B;AACA,MAAM,KAAK,MAAM,YAAY,IAAI,aAAa;AAC9C,MAAM;AACN,SAAS,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;AACjE;AACA,SAAS,IAAI,MAAM,EAAE,EAAE,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AAClD,OAAO;AACP;AACA,MAAM,OAAO,WAAW,CAAC;AACzB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,YAAY,CAAC,YAAY,EAAE,UAAU;AAC9C,GAAG;AACH;AACA,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC,GAAG,KAAK,CAAC,CAAC;AACrF,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,eAAe,CAAC,aAAa,EAAE,UAAU;AAClD,GAAG;AACH;AACA,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC;AACrF,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,mBAAmB;AACtB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA;AACA,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,yCAAyC,CAAC,CAAC,EAAE;AAC3G;AACA,MAAM,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC9D;AACA;AACA,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAChD;AACA,MAAM,OAAO,aAAa,CAAC;AAC3B,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,oBAAoB,CAAC,IAAI,GAAG,KAAK,CAAC;AACrC,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA;AACA,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,yCAAyC,CAAC,CAAC,EAAE;AAC3G;AACA,MAAM,MAAM,iBAAiB,GAAG,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAChF;AACA;AACA,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AACnD;AACA,MAAM,OAAO,iBAAiB,CAAC,cAAc,CAAC;AAC9C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,OAAO;AAChB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA;AACA,MAAM,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;AAC7C;AACA;AACA,MAAM,KAAK,MAAM,iBAAiB,IAAI,IAAI,CAAC,eAAe;AAC1D,MAAM;AACN,SAAS,iBAAiB,CAAC,OAAO,EAAE,CAAC;AACrC,OAAO;AACP;AACA,MAAM,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;AAChC;AACA;AACA,MAAM,KAAK,MAAM,aAAa,IAAI,IAAI,CAAC,gBAAgB;AACvD,MAAM;AACN,SAAS,aAAa,CAAC,OAAO,EAAE,CAAC;AACjC,OAAO;AACP;AACA,MAAM,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;AACjC;AACA,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;AAC9D,MAAM;AACN,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AACxF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;AAC/F,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AACxG,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;AAC9F,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;AACrG,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AACxF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AACtG,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;AAC/F,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;AACnG,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AACjG,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AACxF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AACvF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;AAC/F,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;AACjG,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;AACjG,OAAO;AACP;AACA,MAAM,KAAK,MAAM,aAAa,IAAI,IAAI,CAAC,cAAc;AACrD,MAAM;AACN,SAAS,MAAM,aAAa,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;AACrG,OAAO;AACP;AACA,MAAM,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;AAC/B,MAAM,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AAC7B,MAAM,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC5B;AACA,MAAM,OAAO,OAAO,CAAC;AACrB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,gBAAgB;AACzB,GAAG;AACH;AACA,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC;AACjE,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI,WAAW;AAClB,GAAG;AACH,MAAM,OAAO,IAAI,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC,CAAC;AACpE,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU,CAAC,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,EAAE;AACnC,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC7D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACvE,OAAO;AACP;AACA;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ;AACrC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACpD,SAAS,OAAO,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC;AAClD,OAAO;AACP;AACA,MAAM,MAAM,OAAO,GAAG,EAAE,CAAC;AACzB;AACA,MAAM,IAAI,KAAK,GAAG,CAAC,CAAC;AACpB;AACA,MAAM,KAAK,MAAM,MAAM,IAAI,OAAO;AAClC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACnD,SAAS,MAAM,MAAM,GAAG,KAAK,KAAK,KAAK,CAAC,CAAC;AACzC,SAAS,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,IAAI,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;AAC5E,SAAS,KAAK,EAAE,CAAC;AACjB,OAAO;AACP;AACA;AACA,MAAM,IAAI,KAAK,KAAK,CAAC;AACrB,MAAM;AACN,SAAS,KAAK,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;AAChE,SAAS;AACT,YAAY,MAAM,MAAM,GAAG,KAAK,KAAK,KAAK,CAAC,CAAC;AAC5C,YAAY,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,IAAI,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;AAC/E,UAAU;AACV,OAAO;AACP;AACA,MAAM,OAAO,OAAO,CAAC;AACrB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,WAAW;AACd,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC;AAC5B,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU;AACb,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,gBAAgB,CAAC,EAAE,KAAK,EAAE;AAC7B,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,EAAE,KAAK,YAAY,MAAM,CAAC;AACjE,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,kCAAkC,CAAC,CAAC,CAAC;AACnE,OAAO;AACP;AACA,MAAM,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;AAClD;AACA,MAAM,MAAM,OAAO,GAAG,EAAE,CAAC;AACzB;AACA,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ;AACnC,MAAM;AACN,SAAS,KAAK,MAAM,KAAK,IAAI,YAAY;AACzC,SAAS;AACT,YAAY,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE;AAC7E,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN,SAAS,KAAK,MAAM,KAAK,IAAI,YAAY;AACzC,SAAS;AACT,YAAY,KAAK,MAAM,UAAU,IAAI,KAAK,CAAC,MAAM;AACjD,YAAY;AACZ,eAAe,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC;AACzC,eAAe;AACf,kBAAkB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC7C,kBAAkB,MAAM;AACxB,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM,OAAO,OAAO,CAAC;AACrB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,aAAa,CAAC,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,EAAE;AACtC,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC7D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACvE,OAAO;AACP;AACA;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ;AACrC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACpD,SAAS,OAAO,KAAK,KAAK,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;AACnF,OAAO;AACP;AACA,MAAM,MAAM,OAAO,GAAG,EAAE,CAAC;AACzB;AACA,MAAM,IAAI,KAAK,GAAG,CAAC,CAAC;AACpB;AACA,MAAM,KAAK,MAAM,IAAI,IAAI,OAAO;AAChC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACjD;AACA,SAAS,IAAI,KAAK,KAAK,KAAK,CAAC;AAC7B,SAAS;AACT,YAAY,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjE,UAAU;AACV,SAAS,KAAK,EAAE,CAAC;AACjB,OAAO;AACP;AACA;AACA,MAAM,IAAI,KAAK,KAAK,CAAC;AACrB,MAAM;AACN,SAAS,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;AACrD,SAAS;AACT,YAAY,IAAI,KAAK,KAAK,KAAK,CAAC;AAChC,YAAY;AACZ,eAAe,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpE,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM,OAAO,OAAO,CAAC;AACrB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,cAAc,CAAC,MAAM;AACxB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACzC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,eAAe,CAAC,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,EAAE;AACxC,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC7D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACvE,OAAO;AACP;AACA;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ;AACrC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACpD,SAAS,OAAO,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,aAAa,GAAG,CAAC;AAC3D,YAAY,MAAM,EAAE,OAAO;AAC3B,YAAY,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE;AACtE,UAAU,CAAC,wBAAwB,EAAE,CAAC;AACtC,OAAO;AACP;AACA;AACA,MAAM,MAAM,OAAO,GAAG,EAAE,CAAC;AACzB;AACA,MAAM,IAAI,KAAK,GAAG,CAAC,CAAC;AACpB;AACA,MAAM,KAAK,MAAM,MAAM,IAAI,OAAO;AAClC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACnD;AACA,SAAS,IAAI,KAAK,KAAK,KAAK,CAAC;AAC7B,SAAS;AACT,YAAY,OAAO,CAAC,IAAI,CAAC;AACzB,eAAe,MAAM;AACrB,eAAe,MAAM,EAAE,KAAK,CAAC,aAAa;AAC1C,gBAAgB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,wBAAwB,EAAE;AAC5F,aAAa,CAAC,CAAC;AACf,UAAU;AACV,SAAS,KAAK,EAAE,CAAC;AACjB,OAAO;AACP;AACA;AACA,MAAM,IAAI,KAAK,KAAK,CAAC;AACrB,MAAM;AACN,SAAS,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;AACrD,SAAS;AACT,YAAY,IAAI,KAAK,KAAK,KAAK,CAAC;AAChC,YAAY;AACZ,eAAe,OAAO,CAAC,IAAI,CAAC;AAC5B,kBAAkB,MAAM,EAAE,KAAK,CAAC,IAAI;AACpC,kBAAkB,MAAM,EAAE,KAAK,CAAC,aAAa;AAC7C,mBAAmB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,wBAAwB,EAAE;AAC/F,gBAAgB,CAAC,CAAC;AAClB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM,OAAO,OAAO,CAAC;AACrB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,gBAAgB;AACnB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AACpC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,kBAAkB;AACrB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;AACtC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,cAAc,CAAC,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE,GAAG,EAAE;AAC3C,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,KAAK,KAAK,CAAC,IAAI,OAAO,OAAO,KAAK,SAAS;AAC5D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC;AAC5D,OAAO;AACP;AACA,MAAM,MAAM,eAAe,GAAG,OAAO,KAAK,KAAK,CAAC,CAAC;AACjD;AACA,MAAM,MAAM,OAAO,GAAG,EAAE,CAAC;AACzB;AACA,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;AAClD,MAAM;AACN,SAAS,IAAI,eAAe,IAAI,KAAK,CAAC,OAAO,KAAK,OAAO,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE;AACxF,OAAO;AACP;AACA,MAAM,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC;AAC5B,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU,CAAC,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,EAAE;AACnC,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC7D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACvE,OAAO;AACP;AACA;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ;AACrC,MAAM;AACN,SAAS,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC7C,OAAO;AACP;AACA,MAAM,IAAI,KAAK,GAAG,CAAC,CAAC;AACpB;AACA;AACA,MAAM,KAAK,MAAM,IAAI,IAAI,OAAO;AAChC,MAAM;AACN,SAAS,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,KAAK,CAAC,EAAE;AAC1D;AACA,SAAS,KAAK,EAAE,CAAC;AACjB,OAAO;AACP;AACA;AACA,MAAM,IAAI,KAAK,KAAK,CAAC;AACrB,MAAM;AACN,SAAS,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,CAAC;AAC3C,OAAO;AACP;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,aAAa,CAAC,YAAY;AAC7B,GAAG;AACH,MAAM,OAAO,aAAa,CAAC,YAAY,CAAC,CAAC;AACzC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,MAAM,CAAC,EAAE,MAAM,EAAE,QAAQ,GAAG,KAAK,CAAC,EAAE,MAAM,GAAG,KAAK,EAAE;AAC7D,GAAG;AACH,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE;AAC3F,MAAM,IAAI,QAAQ,KAAK,KAAK,CAAC,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,4BAA4B,CAAC,CAAC,CAAC,EAAE;AACvH,MAAM,IAAI,OAAO,MAAM,KAAK,SAAS,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,EAAE;AAC7F;AACA,MAAM,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AAChD;AACA,MAAM,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE,EAAE,OAAO,KAAK,CAAC,EAAE;AAC7C;AACA;AACA,MAAM,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC;AACzB;AACA,MAAM,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC;AACzB;AACA,MAAM;AACN,MAAM;AACN;AACA,SAAS,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC;AACnD,YAAY,MAAM,EAAE,gBAAgB;AACpC,YAAY,OAAO,EAAE,IAAI;AACzB,YAAY,OAAO,EAAE,MAAM;AAC3B,YAAY,UAAU,EAAE,KAAK;AAC7B,UAAU,CAAC,CAAC;AACZ;AACA,SAAS,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;AAClC,OAAO;AACP,MAAM,OAAO,GAAG;AAChB,MAAM;AACN,SAAS,KAAK,GAAG,GAAG,CAAC;AACrB,OAAO;AACP;AACA;AACA,MAAM,KAAK,CAAC,KAAK,EAAE,CAAC;AACpB;AACA,MAAM,IAAI,KAAK,CAAC,aAAa,YAAY,aAAa,EAAE,EAAE,KAAK,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE;AACtF;AACA,MAAM,IAAI,OAAO,QAAQ,KAAK,QAAQ;AACtC,MAAM;AACN,SAAS,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACnC,OAAO;AACP;AACA;AACA,MAAM,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC;AAChD,SAAS,MAAM,EAAE,cAAc;AAC/B,SAAS,OAAO,EAAE,IAAI;AACtB,SAAS,OAAO,EAAE,MAAM;AACxB,SAAS,aAAa,EAAE,EAAE,KAAK,EAAE;AACjC,SAAS,UAAU,EAAE,KAAK;AAC1B,OAAO,CAAC,CAAC;AACT;AACA;AACA,MAAM;AACN,MAAM;AACN,SAAS,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,MAAM;AACtC,SAAS;AACT,YAAY,MAAM,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,uCAAuC,CAAC;AACvF,aAAa,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACrD,UAAU;AACV,OAAO;AACP,MAAM,OAAO,GAAG;AAChB,MAAM;AACN;AACA,SAAS,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE;AAC/C,OAAO;AACP;AACA,MAAM,IAAI,OAAO,UAAU,CAAC,UAAU,KAAK,QAAQ;AACnD,MAAM;AACN,SAAS,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC;AAClD;AACA;AACA;AACA,SAAS,IAAI,OAAO,UAAU,CAAC,UAAU,CAAC,GAAG,KAAK,QAAQ,IAAI,OAAO,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,KAAK,UAAU;AACpH,SAAS;AACT,YAAY,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;AACxD,YAAY;AACZ,eAAe,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACxE,aAAa,CAAC,CAAC;AACf,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA,MAAM,IAAI,KAAK,EAAE,EAAE,MAAM,KAAK,CAAC,EAAE;AACjC;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,MAAM,CAAC,EAAE,OAAO,EAAE;AAC3B,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC7D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACvE,OAAO;AACP;AACA,MAAM,MAAM,WAAW,GAAG,OAAO,KAAK;AACtC,MAAM;AACN,SAAS,MAAM,MAAM,GAAG,EAAE,CAAC;AAC3B;AACA,SAAS,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;AACvC;AACA,SAAS;AACT,SAAS;AACT;AACA,YAAY,MAAM,gBAAgB,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;AACxH,UAAU;AACV,SAAS,OAAO,GAAG;AACnB,SAAS;AACT,YAAY,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC7B,UAAU;AACV;AACA,SAAS,KAAK,CAAC,KAAK,EAAE,CAAC;AACvB;AACA,SAAS,IAAI,KAAK,CAAC,aAAa,YAAY,aAAa,EAAE,EAAE,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,EAAE;AAC7F;AACA,SAAS,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAC5C;AACA;AACA,SAAS;AACT,SAAS;AACT,YAAY,IAAI,IAAI,CAAC,SAAS;AAC9B,YAAY;AACZ,eAAe,MAAM,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,sCAAsC,CAAC;AACzF,gBAAgB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACxD,aAAa;AACb,UAAU;AACV,SAAS,OAAO,GAAG;AACnB,SAAS;AACT,YAAY,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC7B,UAAU;AACV;AACA,SAAS,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC;AAC7E,OAAO,CAAC;AACR;AACA,MAAM,MAAM,OAAO,GAAG,EAAE,CAAC;AACzB;AACA;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ;AACrC,MAAM;AACN,SAAS,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACpD;AACA,SAAS,IAAI,KAAK,KAAK,KAAK,CAAC;AAC7B,SAAS;AACT,YAAY,OAAO,CAAC,IAAI,CAAC,MAAM,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;AACnD,UAAU;AACV,OAAO;AACP;AACA,MAAM;AACN,SAAS,KAAK,MAAM,IAAI,IAAI,OAAO;AACnC,SAAS;AACT,YAAY,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACpD;AACA,YAAY,IAAI,KAAK,KAAK,KAAK,CAAC;AAChC,YAAY;AACZ,eAAe,OAAO,CAAC,IAAI,CAAC,MAAM,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;AACtD,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM,OAAO,OAAO,CAAC;AACrB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,SAAS;AAClB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;AAC1E,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,eAAe,CAAC,IAAI;AAC7B,GAAG;AACH;AACA,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;AACpE,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,kBAAkB;AAC3B,GAAG;AACH;AACA,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC;AACnE,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU,CAAC,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,EAAE;AACvC,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AAC7D,MAAM;AACN,SAAS,MAAM,IAAI,SAAS,CAAC,CAAC,sCAAsC,CAAC,CAAC,CAAC;AACvE,OAAO;AACP;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,SAAS,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC,EAAE;AAC/F;AACA,MAAM,MAAM,eAAe,GAAG,CAAC,KAAK;AACpC,MAAM;AACN,SAAS,IAAI,KAAK,KAAK,KAAK,CAAC;AAC7B,SAAS;AACT,YAAY,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;AACpC;AACA;AACA,YAAY,IAAI,IAAI,CAAC,SAAS;AAC9B,YAAY;AACZ,eAAe,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,sCAAsC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC;AAC9F,kBAAkB,OAAO;AACzB,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,aAAa;AACb,UAAU;AACV,OAAO,CAAC;AACR;AACA;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ;AACrC,MAAM;AACN,SAAS,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;AACvD,OAAO;AACP;AACA,MAAM,IAAI,KAAK,GAAG,CAAC,CAAC;AACpB;AACA;AACA,MAAM,KAAK,MAAM,IAAI,IAAI,OAAO;AAChC,MAAM;AACN,SAAS,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AACpD,SAAS,KAAK,EAAE,CAAC;AACjB,OAAO;AACP;AACA;AACA,MAAM,IAAI,KAAK,KAAK,CAAC;AACrB,MAAM;AACN,SAAS,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;AACrD,SAAS;AACT,YAAY,eAAe,CAAC,KAAK,CAAC,CAAC;AACnC,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,mBAAmB,CAAC,IAAI;AAC3B,GAAG;AACH;AACA,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE;AACtE,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,WAAW,CAAC,EAAE,QAAQ,EAAE,YAAY,GAAG,SAAS,EAAE;AAC3D,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,8BAA8B,CAAC,CAAC,CAAC,EAAE;AACzF,MAAM,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC,EAAE;AACvG;AACA;AACA,MAAM,IAAI,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE;AAClD;AACA,MAAM,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;AACxC;AACA;AACA,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC;AAClC,MAAM;AACN;AACA,SAAS,MAAM,gBAAgB,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;AAChG;AACA,SAAS,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;AACrD,SAAS;AACT,YAAY;AACZ,YAAY;AACZ;AACA,eAAe,OAAO,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC;AAC/C,aAAa;AACb;AACA,YAAY,OAAO,GAAG,EAAE,aAAa;AACrC;AACA,YAAY,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC;AAC3D,YAAY,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,EAAE,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;AAC5E;AACA,YAAY,IAAI,KAAK,CAAC,aAAa,YAAY,aAAa,EAAE,EAAE,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,EAAE;AAChG;AACA,YAAY,KAAK,CAAC,aAAa,GAAG,IAAI,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC9D;AACA;AACA,YAAY,IAAI,KAAK,CAAC,OAAO;AAC7B,YAAY;AACZ,eAAe,MAAM,gBAAgB,CAAC;AACtC,kBAAkB,MAAM,EAAE,cAAc;AACxC,kBAAkB,OAAO,EAAE,IAAI;AAC/B,kBAAkB,OAAO,EAAE,KAAK,CAAC,IAAI;AACrC,kBAAkB,UAAU,EAAE,KAAK;AACnC,gBAAgB,CAAC,CAAC;AAClB,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI;AACjC,MAAM;AACN,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AAChF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,cAAc,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;AACvF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,sBAAsB,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AAChG,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;AACtF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;AAC7F,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAChF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAChF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,oBAAoB,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AAC9F,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;AACvF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;AAC3F,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AACzF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAC/E,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;AACvF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;AACzF,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;AACzF,OAAO;AACP;AACA,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACzF,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,cAAc,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAChG,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,sBAAsB,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACzG,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC/F,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACtG,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACzF,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACzF,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,oBAAoB,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACvG,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAChG,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACpG,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAClG,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACxF,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAChG,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAClG,MAAM,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAClG;AACA,MAAM,KAAK,MAAM,aAAa,IAAI,IAAI,CAAC,cAAc;AACrD,MAAM;AACN,SAAS,aAAa,CAAC,WAAW,CAAC;AACnC,YAAY,WAAW,EAAE,IAAI,CAAC,SAAS;AACvC,YAAY,WAAW,EAAE,QAAQ;AACjC,YAAY,UAAU;AACtB,YAAY,UAAU,EAAE,YAAY;AACpC,UAAU,CAAC,CAAC;AACZ,OAAO;AACP;AACA;AACA,MAAM,KAAK,MAAM,iBAAiB,IAAI,IAAI,CAAC,eAAe;AAC1D,MAAM;AACN,SAAS,iBAAiB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AACjD,OAAO;AACP;AACA,MAAM,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAChC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU,CAAC,OAAO;AACrB,GAAG;AACH,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC,EAAE;AACrF;AACA,MAAM,IAAI,OAAO,OAAO,CAAC,UAAU,KAAK,SAAS,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,EAAE;AACrG;AACA,MAAM,IAAI,OAAO,OAAO,CAAC,cAAc,KAAK,SAAS,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC,EAAE;AACjH;AACA,MAAM,IAAI,OAAO,OAAO,CAAC,cAAc,KAAK,SAAS,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC,EAAE;AACjH;AACA,MAAM,IAAI,OAAO,OAAO,CAAC,iBAAiB,KAAK,SAAS;AACxD,MAAM;AACN,SAAS,IAAI,CAAC,QAAQ,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;AACrE,OAAO;AACP;AACA,MAAM,IAAI,OAAO,OAAO,CAAC,iBAAiB,KAAK,SAAS;AACxD,MAAM;AACN,SAAS,IAAI,CAAC,QAAQ,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;AACrE,OAAO;AACP;AACA,MAAM,IAAI,OAAO,OAAO,CAAC,aAAa,KAAK,SAAS,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC,EAAE;AAC9G;AACA,MAAM,IAAI,OAAO,OAAO,CAAC,aAAa,KAAK,SAAS,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC,EAAE;AAC9G;AACA,MAAM,KAAK,MAAM,aAAa,IAAI,IAAI,CAAC,cAAc;AACrD,MAAM;AACN,SAAS,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC3C,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,mBAAmB,CAAC,OAAO;AAC9B,GAAG;AACH;AACA,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,cAAc,CAAC,iDAAiD,CAAC,CAAC,EAAE;AAC5G;AACA,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE;AACzE,IAAI;AACJ;;;;","x_google_ignoreList":[0,1]}