{"version":3,"file":"index.js","sources":["../../../../node_modules/@typhonjs-svelte/unicode/dist/index.js"],"sourcesContent":["import { toUint8Array } from '#runtime/data/format/base64';\nimport { decompressSync } from '#runtime/data/compress';\n\nconst isBigEndian = (new Uint8Array(new Uint32Array([0x12345678]).buffer)[0] === 0x12);\nconst swap = (b, n, m) => {\n    let i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n};\nconst swap32 = array => {\n    const len = array.length;\n    for (let i = 0; i < len; i += 4) {\n        swap(array, i, i + 3);\n        swap(array, i + 1, i + 2);\n    }\n};\nconst swap32LE = array => {\n    if (isBigEndian) {\n        swap32(array);\n    }\n};\n\n// Shift size for getting the index-1 table offset.\nconst SHIFT_1 = 6 + 5;\n// Shift size for getting the index-2 table offset.\nconst SHIFT_2 = 5;\n// Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n// Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n// Number of entries in an index-2 block. 64=0x40\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n// Mask for getting the lower bits for the in-index-2-block offset. */\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n// Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\nconst INDEX_SHIFT = 2;\n// Number of entries in a data block. 32=0x20\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n// Mask for getting the lower bits for the in-data-block offset.\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\n// The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n// Count the lengths of both BMP pieces. 2080=0x820\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6; // U+0800 is the first code point after 2-byte UTF-8\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n// The alignment size of a data block. Also the granularity for compaction.\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\nclass UnicodeTrie {\n    data;\n    errorValue;\n    highStart;\n    constructor(data) {\n        const isBuffer = (typeof data.readUInt32BE === 'function') && (typeof data.slice === 'function');\n        if (isBuffer || data instanceof Uint8Array) {\n            if (isBuffer) {\n                this.highStart = data.readUInt32LE(0);\n                this.errorValue = data.readUInt32LE(4);\n                data.readUInt32LE(8);\n                data = data.slice(12);\n            }\n            else {\n                const view = new DataView(data.buffer);\n                this.highStart = view.getUint32(0, true);\n                this.errorValue = view.getUint32(4, true);\n                view.getUint32(8, true);\n                data = data.subarray(12);\n            }\n            // double inflate the actual trie data\n            data = decompressSync(data);\n            data = decompressSync(data);\n            // swap bytes from little-endian\n            swap32LE(data);\n            this.data = new Uint32Array(data.buffer);\n        }\n        else {\n            // pre-parsed data\n            ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n        }\n    }\n    get(codePoint) {\n        let index;\n        if ((codePoint < 0) || (codePoint > 0x10ffff)) {\n            return this.errorValue;\n        }\n        if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {\n            // Ordinary BMP code point, excluding leading surrogates.\n            // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n            // data is stored in the index array itself.\n            index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n            return this.data[index];\n        }\n        if (codePoint <= 0xffff) {\n            // Lead Surrogate Code Point.  A Separate index section is stored for\n            // lead surrogate code units and code points.\n            //   The main index has the code unit data.\n            //   For this function, we need the code point data.\n            index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n            return this.data[index];\n        }\n        if (codePoint < this.highStart) {\n            // Supplemental code point, use two-level lookup.\n            index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n            index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n            index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n            return this.data[index];\n        }\n        return this.data[this.data.length - DATA_GRANULARITY];\n    }\n}\n\nconst typeTrieB64 = \"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\";\n\nconst extPictB64 = \"AAACAAAAAACAOAAAAbYBSf7t2S1IBEEYBuDVDZ7FYrQMNsFiu3hgEYOI0SCXRIUrB8JhEZtgs5gEg1GMFk02m82oGI02m+9xezCOczv/uwv3fvAwc/PzfXOzcdqzWdaBDdiGPdiHdjE+DS3RNDuCfsn8idQ/g3OH3BdwKf0e96/gumTfYcncLdzBPTzAo+RZ+f0Cr/AG7/AJX4738x1wtz9FO5PX/50n6UXMNdfg/0lERERERERERERERETpdedHBvDRql4nq0cXtW9af98qdRby0Vvp8K4W0V+C5Xw0t4J2bfjeBp3cnEu1brnnCTYNa7eKdz91XP7WO9Lb4GqRb7cY6xbtAdqeVOsY/QGcevw/tb6OT85YhvfKYEx9CMuxKsKnrs+eJtVInVvHJ0eVYVvTZk2siFVLOCjb61PTZX3MdVWEyP7fjzpmMxdzTyq2Ebue6x61nXRGnzndWpf1an7dXmGYE4Y1ptqqKsK1nu26Ju0ty+maV2Rpvk+qnDZjKUIobUiesdAQE/jmCTmHmsskpFZsVYbtmXRcaoSGUPomunW2derQhDPFjtT1Q/eb8vnm990fq35oHVt11bU9m89c7DNI8Qs=\";\n\n/**\n *\n * @see https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table\n */\nvar ClusterBreak;\n(function (ClusterBreak) {\n    ClusterBreak[ClusterBreak[\"Other\"] = 0] = \"Other\";\n    ClusterBreak[ClusterBreak[\"CR\"] = 1] = \"CR\";\n    ClusterBreak[ClusterBreak[\"LF\"] = 2] = \"LF\";\n    ClusterBreak[ClusterBreak[\"Control\"] = 4] = \"Control\";\n    ClusterBreak[ClusterBreak[\"Extend\"] = 8] = \"Extend\";\n    ClusterBreak[ClusterBreak[\"ZWJ\"] = 16] = \"ZWJ\";\n    ClusterBreak[ClusterBreak[\"Regional_Indicator\"] = 32] = \"Regional_Indicator\";\n    ClusterBreak[ClusterBreak[\"Prepend\"] = 64] = \"Prepend\";\n    ClusterBreak[ClusterBreak[\"SpacingMark\"] = 128] = \"SpacingMark\";\n    ClusterBreak[ClusterBreak[\"L\"] = 256] = \"L\";\n    ClusterBreak[ClusterBreak[\"V\"] = 512] = \"V\";\n    ClusterBreak[ClusterBreak[\"T\"] = 1024] = \"T\";\n    ClusterBreak[ClusterBreak[\"LV\"] = 2048] = \"LV\";\n    ClusterBreak[ClusterBreak[\"LVT\"] = 4096] = \"LVT\";\n    ClusterBreak[ClusterBreak[\"Extended_Pictographic\"] = 8192] = \"Extended_Pictographic\";\n})(ClusterBreak || (ClusterBreak = {}));\n\nconst typeTrie = new UnicodeTrie(toUint8Array(typeTrieB64));\nconst extPict = new UnicodeTrie(toUint8Array(extPictB64));\n// const typeTrie = { get: () => void 0 };\n// const extPict = { get: (str) => void 0 };\nfunction is(type, bit) {\n    return (type & bit) !== 0;\n}\nconst GB11State = {\n    Initial: 0,\n    ExtendOrZWJ: 1,\n    NotBoundary: 2,\n};\nfunction nextGraphemeClusterSize(ts, start) {\n    const L = ts.length;\n    let ri = 0;\n    let gb11State = GB11State.Initial;\n    // GB1: sot ÷ Any\n    for (let i = start; i + 1 < L; i++) {\n        const curr = ts[i + 0];\n        const next = ts[i + 1];\n        // for GB12, GB13\n        if (!is(curr, ClusterBreak.Regional_Indicator)) {\n            ri = 0;\n        }\n        // for GB11: \\p{Extended_Pictographic} Extend* ZWJ x \\p{Extended_Pictographic}\n        switch (gb11State) {\n            case GB11State.NotBoundary:\n            case GB11State.Initial:\n                if (is(curr, ClusterBreak.Extended_Pictographic)) {\n                    gb11State = GB11State.ExtendOrZWJ;\n                }\n                else {\n                    gb11State = GB11State.Initial;\n                }\n                break;\n            case GB11State.ExtendOrZWJ:\n                if (is(curr, ClusterBreak.Extend)) {\n                    gb11State = GB11State.ExtendOrZWJ;\n                }\n                else if (is(curr, ClusterBreak.ZWJ) && is(next, ClusterBreak.Extended_Pictographic)) {\n                    gb11State = GB11State.NotBoundary;\n                }\n                else {\n                    gb11State = GB11State.Initial;\n                }\n                break;\n        }\n        // GB3: CR x LF\n        if (is(curr, ClusterBreak.CR) && is(next, ClusterBreak.LF)) {\n            continue;\n        }\n        // GB4: (Control | CR | LF) ÷\n        if (is(curr, ClusterBreak.Control | ClusterBreak.CR | ClusterBreak.LF)) {\n            return i + 1 - start;\n        }\n        // GB5: ÷ (Control | CR | LF)\n        if (is(next, ClusterBreak.Control | ClusterBreak.CR | ClusterBreak.LF)) {\n            return i + 1 - start;\n        }\n        // GB6: L x (L | V | LV | LVT)\n        if (is(curr, ClusterBreak.L) &&\n            is(next, ClusterBreak.L | ClusterBreak.V | ClusterBreak.LV | ClusterBreak.LVT)) {\n            continue;\n        }\n        // GB7: (LV | V) x (V | T)\n        if (is(curr, ClusterBreak.LV | ClusterBreak.V) && is(next, ClusterBreak.V | ClusterBreak.T)) {\n            continue;\n        }\n        // GB8: (LVT | T) x T\n        if (is(curr, ClusterBreak.LVT | ClusterBreak.T) && is(next, ClusterBreak.T)) {\n            continue;\n        }\n        // GB9: x (Extend | ZWJ)\n        if (is(next, ClusterBreak.Extend | ClusterBreak.ZWJ)) {\n            continue;\n        }\n        // GB9a: x SpacingMark\n        if (is(next, ClusterBreak.SpacingMark)) {\n            continue;\n        }\n        // GB9b: Prepend x\n        if (is(curr, ClusterBreak.Prepend)) {\n            continue;\n        }\n        // GB11: \\p{Extended_Pictographic} Extend* ZWJ x \\p{Extended_Pictographic}\n        if (gb11State === GB11State.NotBoundary) {\n            continue;\n        }\n        // GB12: sot (RI RI)* RI x RI\n        // GB13: [^RI] (RI RI)* RI x RI\n        if (is(curr, ClusterBreak.Regional_Indicator) && is(next, ClusterBreak.Regional_Indicator) && ri % 2 === 0) {\n            ri++;\n            continue;\n        }\n        // GB999: Any ÷ Any\n        return i + 1 - start;\n    }\n    // GB2: Any ÷ eot\n    return L - start;\n}\n/**\n * @param {string}   str - String to split.\n *\n * @returns {string[]} The string split by Unicode grapheme clusters.\n */\nfunction graphemeSplit(str) {\n    const graphemeClusters = [];\n    const map = [0];\n    const ts = [];\n    for (let i = 0; i < str.length;) {\n        const code = str.codePointAt(i);\n        ts.push(typeTrie.get(code) | extPict.get(code));\n        i += code > 65535 ? 2 : 1;\n        map.push(i);\n    }\n    for (let offset = 0; offset < ts.length;) {\n        const size = nextGraphemeClusterSize(ts, offset);\n        const start = map[offset];\n        const end = map[offset + size];\n        graphemeClusters.push(str.slice(start, end));\n        offset += size;\n    }\n    return graphemeClusters;\n}\n/**\n * @param {string}   str - String to split.\n *\n * @returns {IterableIterator<string>} An iterator returning grapheme clusters.\n * @yields {string}\n */\nfunction* graphemeIterator(str) {\n    for (const grapheme of graphemeSplit(str)) {\n        yield grapheme;\n    }\n}\n// // An experimental attempt to create a generator / iterator.\n// export function* graphemeIteratorExp(str: string): Generator<string>\n// {\n//    let i = 0;\n//    let start = 0;\n//    const ts = [];\n//    let buffer = \"\";\n//    let lastUnicodeProperty = 0;\n//\n//    while (i < str.length)\n//    {\n//       const code = str.codePointAt(i);\n//       const unicodeProperty = typeTrie.get(code) | extPict.get(code);\n//       ts.push(unicodeProperty);\n//       i += code > 65535 ? 2 : 1;\n//\n//       const size = nextGraphemeClusterSize(ts, 0);\n//       if (size === ts.length)\n//       {\n//          const cluster = str.slice(start, i);\n//          if (buffer && !(unicodeProperty & ClusterBreak.ZWJ) && !(lastUnicodeProperty & ClusterBreak.ZWJ) &&\n//           !(unicodeProperty & ClusterBreak.Extend) && !(lastUnicodeProperty & ClusterBreak.Extend)) {\n//             yield buffer;\n//             buffer = \"\";\n//          }\n//          buffer += cluster;\n//          start = i;\n//          ts.length = 0;\n//          lastUnicodeProperty = unicodeProperty;\n//       }\n//    }\n//\n//    if (buffer) { yield buffer; }\n// }\n// // A trivial iterator that splits on every cluster / doesn't handle compound cases.\n// export function* graphemeIteratorTrivial(str: string): Generator<string>\n// {\n//    let i = 0;\n//    let start = 0;\n//    const ts = [];\n//\n//    while (i < str.length)\n//    {\n//       const code = str.codePointAt(i);\n//       ts.push(typeTrie.get(code) | extPict.get(code));\n//       i += code > 65535 ? 2 : 1;\n//\n//       const size = nextGraphemeClusterSize(ts, 0);\n//       if (size === ts.length)\n//       {\n//          yield str.slice(start, i);\n//          start = i;\n//          ts.length = 0;\n//       }\n//    }\n//\n//    if (ts.length > 0) { yield str.slice(start, i); }\n// }\n\nexport { UnicodeTrie, graphemeIterator, graphemeSplit };\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}