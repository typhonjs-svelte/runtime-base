{"version":3,"file":"index.js","sources":["../../../../node_modules/@typhonjs-utils/unicode/dist-trl/index.js"],"sourcesContent":["import { toUint8Array } from '#runtime/data/format/base64';\nimport { inflateSync } from '#runtime/data/compress';\n\n/**\n * Shared constants between {@link UnicodeTrie} and {@link UnicodeTrieBuilder}.\n */\nclass Const {\n    static SHIFT_1 = 6 + 5;\n    /**\n     * Shift size for getting the index-2 table offset.\n     */\n    static SHIFT_2 = 5;\n    /**\n     * Difference between the two shift sizes, for getting an index-1 offset from an index-2 offset. `6=11-5`.\n     */\n    static SHIFT_1_2 = this.SHIFT_1 - this.SHIFT_2;\n    /**\n     * Number of index-1 entries for the BMP. `32=0x20`.\n     * This part of the index-1 table is omitted from the serialized form.\n     */\n    static OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> this.SHIFT_1;\n    /**\n     * Number of entries in an index-2 block. `64=0x40`.\n     */\n    static INDEX_2_BLOCK_LENGTH = 1 << this.SHIFT_1_2;\n    /**\n     * Mask for getting the lower bits for the in-index-2-block offset.\n     */\n    static INDEX_2_MASK = this.INDEX_2_BLOCK_LENGTH - 1;\n    /**\n     * Shift size for shifting left the index array values.\n     * Increases possible data size with 16-bit index values at the cost of compactability.\n     * This requires data blocks to be aligned by #DATA_GRANULARITY.\n     */\n    static INDEX_SHIFT = 2;\n    /**\n     * Number of entries in a data block. `32=0x20`.\n     */\n    static DATA_BLOCK_LENGTH = 1 << this.SHIFT_2;\n    /**\n     * Mask for getting the lower bits for the in-data-block offset.\n     */\n    static DATA_MASK = this.DATA_BLOCK_LENGTH - 1;\n    /**\n     * The part of the index-2 table for U+D800..U+DBFF stores values for lead surrogate code _units_ not code _points_.\n     * Values for lead surrogate code _points_ are indexed with this portion of the table.\n     * Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\n     */\n    static LSCP_INDEX_2_OFFSET = 0x10000 >> this.SHIFT_2;\n    static LSCP_INDEX_2_LENGTH = 0x400 >> this.SHIFT_2;\n    /**\n     * Count the lengths of both BMP pieces. `2080=0x820`.\n     */\n    static INDEX_2_BMP_LENGTH = this.LSCP_INDEX_2_OFFSET + this.LSCP_INDEX_2_LENGTH;\n    /**\n     * The 2-byte UTF-8 version of the index-2 table follows at offset `2080=0x820`.\n     * Length `32=0x20` for lead bytes `C0..DF`, regardless of SHIFT_2.\n     */\n    static UTF8_2B_INDEX_2_OFFSET = this.INDEX_2_BMP_LENGTH;\n    static UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6; // U+0800 is the first code point after 2-byte UTF-8\n    /**\n     * The index-1 table, only used for supplementary code points, at offset `2112=0x840`.\n     * Variable length, for code points up to highStart, where the last single-value range starts.\n     * Maximum length 512=0x200=0x100000>>SHIFT_1.\n     * (For 0x100000 supplementary code points U+10000..U+10ffff.)\n     *\n     * The part of the index-2 table for supplementary code points starts after this index-1 table.\n     *\n     * Both the index-1 table and the following part of the index-2 table are omitted completely if there is only BMP\n     * data.\n     */\n    static INDEX_1_OFFSET = this.UTF8_2B_INDEX_2_OFFSET + this.UTF8_2B_INDEX_2_LENGTH;\n    static MAX_INDEX_1_LENGTH = 0x100000 >> this.SHIFT_1;\n    /**\n     * The alignment size of a data block. Also, the granularity for compaction.\n     */\n    static DATA_GRANULARITY = 1 << this.INDEX_SHIFT;\n}\n\n/**\n * Provides a helper utility to potentially swap a typed array to little endian.\n */\nclass Swap32LE {\n    /**\n     * Swaps the given typed array as necessary to little endian as necessary. Uint8Array is assumed to have 32-bit data\n     * internally.\n     *\n     * @param {Uint8Array | Uint32Array} array - Array to potentially swap.\n     *\n     * @returns {Uint8Array | Uint32Array} Passed in array.\n     */\n    static swap(array) {\n        /* c8 ignore next */\n        if (this.#isBigEndian) {\n            this.#swap32(array);\n        }\n        return array;\n    }\n    static #isBigEndian = (new Uint8Array(new Uint32Array([0x12345678]).buffer)[0] === 0x12);\n    /* c8 ignore next 6 */\n    static #swap(b, n, m) {\n        const i = b[n];\n        b[n] = b[m];\n        b[m] = i;\n    }\n    /* c8 ignore next 10 */\n    static #swap32(array) {\n        const len = array.length;\n        for (let i = 0; i < len; i += 4) {\n            this.#swap(array, i, i + 3);\n            this.#swap(array, i + 1, i + 2);\n        }\n    }\n}\n\n/**\n * Provides lookup in a pre-built UnicodeTrie data structure. Use {@link UnicodeTrieBuilder} for building /\n * serialization of a pre-built data structure.\n */\nclass UnicodeTrie {\n    #data;\n    #errorValue;\n    #highStart;\n    /**\n     * @param {UnicodeTrieParsedData | UnicodeTrieRawData} data -\n     */\n    constructor(data) {\n        if (data instanceof Uint8Array) {\n            // Is Node Buffer read binary format.\n            if (typeof data.readUInt32LE === 'function') {\n                this.#highStart = data.readUInt32LE(0);\n                this.#errorValue = data.readUInt32LE(4);\n                data = data.slice(12);\n            }\n            else {\n                const view = new DataView(data.buffer);\n                this.#highStart = view.getUint32(0, true);\n                this.#errorValue = view.getUint32(4, true);\n                data = data.subarray(12);\n            }\n            // Double inflate the actual trie data.\n            data = inflateSync(data);\n            // Swap bytes from little-endian.\n            Swap32LE.swap(data);\n            this.#data = new Uint32Array(data.buffer);\n        }\n        else {\n            // pre-parsed data\n            ({ data: this.#data, highStart: this.#highStart, errorValue: this.#errorValue } = data);\n        }\n    }\n    /**\n     * @returns {Uint32Array} The data array.\n     */\n    get data() { return this.#data; }\n    /**\n     * @returns {number} The error value.\n     */\n    get errorValue() { return this.#errorValue; }\n    /**\n     * @returns {number} The high start.\n     */\n    get highStart() { return this.#highStart; }\n    /**\n     * @param {number}   codePoint -\n     */\n    get(codePoint) {\n        if ((codePoint < 0) || (codePoint > 0x10ffff)) {\n            return this.#errorValue;\n        }\n        let index;\n        if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {\n            // Ordinary BMP code point, excluding leading surrogates.\n            // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n            // data is stored in the index array itself.\n            index = (this.#data[codePoint >> Const.SHIFT_2] << Const.INDEX_SHIFT) + (codePoint & Const.DATA_MASK);\n            return this.#data[index];\n        }\n        if (codePoint <= 0xffff) {\n            // Lead Surrogate Code Point.  A Separate index section is stored for\n            // lead surrogate code units and code points.\n            //   The main index has the code unit data.\n            //   For this function, we need the code point data.\n            index = (this.#data[Const.LSCP_INDEX_2_OFFSET +\n                ((codePoint - 0xd800) >> Const.SHIFT_2)] << Const.INDEX_SHIFT) +\n                (codePoint & Const.DATA_MASK);\n            return this.#data[index];\n        }\n        if (codePoint < this.#highStart) {\n            // Supplemental code point, use two-level lookup.\n            index = this.#data[(Const.INDEX_1_OFFSET - Const.OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> Const.SHIFT_1)];\n            index = this.#data[index + ((codePoint >> Const.SHIFT_2) & Const.INDEX_2_MASK)];\n            index = (index << Const.INDEX_SHIFT) + (codePoint & Const.DATA_MASK);\n            return this.#data[index];\n        }\n        return this.#data[this.#data.length - Const.DATA_GRANULARITY];\n    }\n}\n\n/**\n * Defines useful constants from Unicode Annex #29 - Unicode Text Segmentation.\n *\n * @see https://www.unicode.org/reports/tr29\n */\nvar UAX29;\n(function (UAX29) {\n    (function (ClusterBreak) {\n        ClusterBreak[ClusterBreak[\"Other\"] = 0] = \"Other\";\n        ClusterBreak[ClusterBreak[\"CR\"] = 1] = \"CR\";\n        ClusterBreak[ClusterBreak[\"LF\"] = 2] = \"LF\";\n        ClusterBreak[ClusterBreak[\"Control\"] = 4] = \"Control\";\n        ClusterBreak[ClusterBreak[\"Extend\"] = 8] = \"Extend\";\n        ClusterBreak[ClusterBreak[\"ZWJ\"] = 16] = \"ZWJ\";\n        ClusterBreak[ClusterBreak[\"Regional_Indicator\"] = 32] = \"Regional_Indicator\";\n        ClusterBreak[ClusterBreak[\"Prepend\"] = 64] = \"Prepend\";\n        ClusterBreak[ClusterBreak[\"SpacingMark\"] = 128] = \"SpacingMark\";\n        ClusterBreak[ClusterBreak[\"L\"] = 256] = \"L\";\n        ClusterBreak[ClusterBreak[\"V\"] = 512] = \"V\";\n        ClusterBreak[ClusterBreak[\"T\"] = 1024] = \"T\";\n        ClusterBreak[ClusterBreak[\"LV\"] = 2048] = \"LV\";\n        ClusterBreak[ClusterBreak[\"LVT\"] = 4096] = \"LVT\";\n        ClusterBreak[ClusterBreak[\"Extended_Pictographic\"] = 8192] = \"Extended_Pictographic\";\n    })(UAX29.ClusterBreak || (UAX29.ClusterBreak = {}));\n})(UAX29 || (UAX29 = {}));\n\nconst UNICODE_GRAPHEME_B64_TYPE_TRIE = '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';\n\nconst UNICODE_GRAPHEME_B64_EXT_PICT_TRIE = 'AAACAAAAAACAOAAA7ZktSAVBEMefGtRiMVrEJlhsxgOLGESMBrkkKrwiCA+L2ASbxSQYjGK0aLLZbEbFaLTZ/C/eg+XYu7c7+/Xg/gM/dm8/ZmZndvfCrk32egXYANtgD+yDYXsXSkK6zBE4buk/1ern4MJB9yW40r6H9Wtw0zLvsKXvDtyDB/AInjReat+v4A28gw/wBb4d4/PjEdvfqpyYyp/nJvoBdU2P8ToJIYQQQgghhBBCCCGEEEJIfMrZfwbgcyY9RS8PJWzfAv2t0sQc3tPUW6mK1TzqC2AJqL5llKvqvQ0UVZsL65ZznsHmiLFbyg9Du57rnWqMYqXSt1u1lVV5gLKv2TpBfQDOBOur2zch0RkKFVcKpfOyaNmWQiR2U/ga00Zs3SYkOlKKrc2UfoWy1ZQTmzylyqHt2Fz3hElMsWuLq0sepHNiYSuh7UniNWqfSPua1uoi9bU19ducRemZlJ5pqbja8/Er19zQeyRGfmLpTBHHNtu+9kLG2/f+DJUryR0aes0p/jchJNV/0Vdcc2oalyufvrEcBx8kEtt+aP9D7nfJ/FT5ybVfUp8nSV/E8/QH';\n\n/**\n * Provides internal support for lazy loading of Unicode trie data and essential lookups.\n */\nclass GraphemeSplitHelper {\n    static #typeTrie;\n    static #extPict;\n    static #isLoaded = false;\n    static GB11State = {\n        Initial: 0,\n        ExtendOrZWJ: 1,\n        NotBoundary: 2,\n    };\n    static checkLoadData() {\n        if (!this.#isLoaded) {\n            this.#typeTrie = new UnicodeTrie(toUint8Array(UNICODE_GRAPHEME_B64_TYPE_TRIE));\n            this.#extPict = new UnicodeTrie(toUint8Array(UNICODE_GRAPHEME_B64_EXT_PICT_TRIE));\n            this.#isLoaded = true;\n        }\n    }\n    /**\n     * Returns the `OR` result of lookups from `typeTrie` and `extPict`.\n     *\n     * @param {number}   codePoint - A Unicode code point to lookup.\n     *\n     * @returns {number} Code point meta-data.\n     */\n    static get(codePoint) {\n        return this.#typeTrie.get(codePoint) | this.#extPict.get(codePoint);\n    }\n    /**\n     * Helper function to test stored code point types.\n     *\n     * @param {number}   type - Code point type.\n     *\n     * @param {number}   bit - ClusterBreak to test against.\n     */\n    static is(type, bit) {\n        return (type & bit) !== 0;\n    }\n    /**\n     * Analyzes the next grapheme cluster size from a pre-parsed string of code point types.\n     *\n     * @param {number[]}   ts - Code point types.\n     *\n     * @param {number}   start -\n     */\n    static nextGraphemeClusterSize(ts, start) {\n        const CB = UAX29.ClusterBreak;\n        const L = ts.length;\n        let ri = 0;\n        let gb11State = this.GB11State.Initial;\n        // GB1: sot ÷ Any\n        for (let i = start; i + 1 < L; i++) {\n            const curr = ts[i];\n            const next = ts[i + 1];\n            // for GB12, GB13\n            if (!this.is(curr, CB.Regional_Indicator)) {\n                ri = 0;\n            }\n            // for GB11: \\p{Extended_Pictographic} Extend* ZWJ x \\p{Extended_Pictographic}\n            switch (gb11State) {\n                case this.GB11State.NotBoundary:\n                case this.GB11State.Initial:\n                    if (this.is(curr, CB.Extended_Pictographic)) {\n                        gb11State = this.GB11State.ExtendOrZWJ;\n                    }\n                    else {\n                        gb11State = this.GB11State.Initial;\n                    }\n                    break;\n                case this.GB11State.ExtendOrZWJ:\n                    if (this.is(curr, CB.Extend)) {\n                        gb11State = this.GB11State.ExtendOrZWJ;\n                    }\n                    else if (this.is(curr, CB.ZWJ) && this.is(next, CB.Extended_Pictographic)) {\n                        gb11State = this.GB11State.NotBoundary;\n                    }\n                    else {\n                        gb11State = this.GB11State.Initial;\n                    }\n                    break;\n            }\n            // GB3: CR x LF\n            if (this.is(curr, CB.CR) && this.is(next, CB.LF)) {\n                continue;\n            }\n            // GB4: (Control | CR | LF) ÷\n            if (this.is(curr, CB.Control | CB.CR | CB.LF)) {\n                return i + 1 - start;\n            }\n            // GB5: ÷ (Control | CR | LF)\n            if (this.is(next, CB.Control | CB.CR | CB.LF)) {\n                return i + 1 - start;\n            }\n            // GB6: L x (L | V | LV | LVT)\n            if (this.is(curr, CB.L) && this.is(next, CB.L | CB.V | CB.LV | CB.LVT)) {\n                continue;\n            }\n            // GB7: (LV | V) x (V | T)\n            if (this.is(curr, CB.LV | CB.V) && this.is(next, CB.V | CB.T)) {\n                continue;\n            }\n            // GB8: (LVT | T) x T\n            if (this.is(curr, CB.LVT | CB.T) && this.is(next, CB.T)) {\n                continue;\n            }\n            // GB9: x (Extend | ZWJ)\n            if (this.is(next, CB.Extend | CB.ZWJ)) {\n                continue;\n            }\n            // GB9a: x SpacingMark\n            if (this.is(next, CB.SpacingMark)) {\n                continue;\n            }\n            // GB9b: Prepend x\n            if (this.is(curr, CB.Prepend)) {\n                continue;\n            }\n            // GB11: \\p{Extended_Pictographic} Extend* ZWJ x \\p{Extended_Pictographic}\n            if (gb11State === this.GB11State.NotBoundary) {\n                continue;\n            }\n            // GB12: sot (RI RI)* RI x RI\n            // GB13: [^RI] (RI RI)* RI x RI\n            if (this.is(curr, CB.Regional_Indicator) && this.is(next, CB.Regional_Indicator) && ri % 2 === 0) {\n                ri++;\n                continue;\n            }\n            // GB999: Any ÷ Any\n            return i + 1 - start;\n        }\n        // GB2: Any ÷ eot\n        return L - start;\n    }\n}\n/**\n * Splits the given string into an array of Unicode grapheme clusters.\n *\n * @param {string}   str - String to split.\n *\n * @returns {string[]} The string split by Unicode grapheme clusters.\n */\nfunction graphemeSplit(str) {\n    GraphemeSplitHelper.checkLoadData();\n    const graphemeClusters = [];\n    const map = [0];\n    const ts = [];\n    for (let i = 0; i < str.length;) {\n        const code = str.codePointAt(i);\n        ts.push(GraphemeSplitHelper.get(code));\n        i += code > 65535 ? 2 : 1;\n        map.push(i);\n    }\n    for (let offset = 0; offset < ts.length;) {\n        const size = GraphemeSplitHelper.nextGraphemeClusterSize(ts, offset);\n        const start = map[offset];\n        const end = map[offset + size];\n        graphemeClusters.push(str.slice(start, end));\n        offset += size;\n    }\n    return graphemeClusters;\n}\n/**\n * Provides an iterator for tokenizing a string by grapheme clusters.\n *\n * Note: This is a naive implementation that fully parses the string then returns the iterator over parsed clusters.\n * A future implementation will implement an immediate mode parser returning cluster by cluster as the string is\n * parsed.\n *\n * @param {string}   str - String to split.\n *\n * @returns {IterableIterator<string>} An iterator returning grapheme clusters.\n * @yields {string}\n */\nfunction* graphemeIterator(str) {\n    for (const grapheme of graphemeSplit(str)) {\n        yield grapheme;\n    }\n}\n\nexport { graphemeIterator, graphemeSplit };\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":";;;AAGA;AACA;AACA;AACA,MAAM,KAAK,CAAC;AACZ,IAAI,OAAO,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AAC3B;AACA;AACA;AACA,IAAI,OAAO,OAAO,GAAG,CAAC,CAAC;AACvB;AACA;AACA;AACA,IAAI,OAAO,SAAS,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AACnD;AACA;AACA;AACA;AACA,IAAI,OAAO,0BAA0B,GAAG,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC;AAChE;AACA;AACA;AACA,IAAI,OAAO,oBAAoB,GAAG,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC;AACtD;AACA;AACA;AACA,IAAI,OAAO,YAAY,GAAG,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;AACxD;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,WAAW,GAAG,CAAC,CAAC;AAC3B;AACA;AACA;AACA,IAAI,OAAO,iBAAiB,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC;AACjD;AACA;AACA;AACA,IAAI,OAAO,SAAS,GAAG,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,mBAAmB,GAAG,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC;AACzD,IAAI,OAAO,mBAAmB,GAAG,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC;AACvD;AACA;AACA;AACA,IAAI,OAAO,kBAAkB,GAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;AACpF;AACA;AACA;AACA;AACA,IAAI,OAAO,sBAAsB,GAAG,IAAI,CAAC,kBAAkB,CAAC;AAC5D,IAAI,OAAO,sBAAsB,GAAG,KAAK,IAAI,CAAC,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,cAAc,GAAG,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC;AACtF,IAAI,OAAO,kBAAkB,GAAG,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC;AACzD;AACA;AACA;AACA,IAAI,OAAO,gBAAgB,GAAG,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC;AACpD,CAAC;AACD;AACA;AACA;AACA;AACA,MAAM,QAAQ,CAAC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,IAAI,CAAC,KAAK,EAAE;AACvB;AACA,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;AAC/B,YAAY,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAChC,SAAS;AACT,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL,IAAI,OAAO,YAAY,IAAI,IAAI,UAAU,CAAC,IAAI,WAAW,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AAC7F;AACA,IAAI,OAAO,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AAC1B,QAAQ,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACjB,KAAK;AACL;AACA,IAAI,OAAO,OAAO,CAAC,KAAK,EAAE;AAC1B,QAAQ,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;AACjC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE;AACzC,YAAY,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AACxC,YAAY,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AAC5C,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAM,WAAW,CAAC;AAClB,IAAI,KAAK,CAAC;AACV,IAAI,WAAW,CAAC;AAChB,IAAI,UAAU,CAAC;AACf;AACA;AACA;AACA,IAAI,WAAW,CAAC,IAAI,EAAE;AACtB,QAAQ,IAAI,IAAI,YAAY,UAAU,EAAE;AACxC;AACA,YAAY,IAAI,OAAO,IAAI,CAAC,YAAY,KAAK,UAAU,EAAE;AACzD,gBAAgB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AACvD,gBAAgB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AACxD,gBAAgB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACtC,aAAa;AACb,iBAAiB;AACjB,gBAAgB,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACvD,gBAAgB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAC1D,gBAAgB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAC3D,gBAAgB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACzC,aAAa;AACb;AACA,YAAY,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;AACrC;AACA,YAAY,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,YAAY,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACtD,SAAS;AACT,aAAa;AACb;AACA,YAAY,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI,EAAE;AACpG,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,IAAI,GAAG,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE;AACrC;AACA;AACA;AACA,IAAI,IAAI,UAAU,GAAG,EAAE,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE;AACjD;AACA;AACA;AACA,IAAI,IAAI,SAAS,GAAG,EAAE,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;AAC/C;AACA;AACA;AACA,IAAI,GAAG,CAAC,SAAS,EAAE;AACnB,QAAQ,IAAI,CAAC,SAAS,GAAG,CAAC,MAAM,SAAS,GAAG,QAAQ,CAAC,EAAE;AACvD,YAAY,OAAO,IAAI,CAAC,WAAW,CAAC;AACpC,SAAS;AACT,QAAQ,IAAI,KAAK,CAAC;AAClB,QAAQ,IAAI,CAAC,SAAS,GAAG,MAAM,MAAM,CAAC,SAAS,GAAG,MAAM,MAAM,SAAS,IAAI,MAAM,CAAC,CAAC,EAAE;AACrF;AACA;AACA;AACA,YAAY,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,WAAW,KAAK,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;AAClH,YAAY,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACrC,SAAS;AACT,QAAQ,IAAI,SAAS,IAAI,MAAM,EAAE;AACjC;AACA;AACA;AACA;AACA,YAAY,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,mBAAmB;AACzD,iBAAiB,CAAC,SAAS,GAAG,MAAM,KAAK,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,CAAC,WAAW;AAC7E,iBAAiB,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;AAC9C,YAAY,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACrC,SAAS;AACT,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,EAAE;AACzC;AACA,YAAY,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC,0BAA0B,KAAK,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;AACzH,YAAY,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,SAAS,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;AAC5F,YAAY,KAAK,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,WAAW,KAAK,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;AACjF,YAAY,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACrC,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,gBAAgB,CAAC,CAAC;AACtE,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,KAAK,CAAC;AACV,CAAC,UAAU,KAAK,EAAE;AAClB,IAAI,CAAC,UAAU,YAAY,EAAE;AAC7B,QAAQ,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;AAC1D,QAAQ,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACpD,QAAQ,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACpD,QAAQ,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;AAC9D,QAAQ,YAAY,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;AAC5D,QAAQ,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;AACvD,QAAQ,YAAY,CAAC,YAAY,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC,GAAG,oBAAoB,CAAC;AACrF,QAAQ,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC;AAC/D,QAAQ,YAAY,CAAC,YAAY,CAAC,aAAa,CAAC,GAAG,GAAG,CAAC,GAAG,aAAa,CAAC;AACxE,QAAQ,YAAY,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,QAAQ,YAAY,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,QAAQ,YAAY,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC;AACrD,QAAQ,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;AACvD,QAAQ,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC;AACzD,QAAQ,YAAY,CAAC,YAAY,CAAC,uBAAuB,CAAC,GAAG,IAAI,CAAC,GAAG,uBAAuB,CAAC;AAC7F,KAAK,EAAE,KAAK,CAAC,YAAY,KAAK,KAAK,CAAC,YAAY,GAAG,EAAE,CAAC,CAAC,CAAC;AACxD,CAAC,EAAE,KAAK,KAAK,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;AAC1B;AACA,MAAM,8BAA8B,GAAG,8iFAA8iF,CAAC;AACtlF;AACA,MAAM,kCAAkC,GAAG,8kBAA8kB,CAAC;AAC1nB;AACA;AACA;AACA;AACA,MAAM,mBAAmB,CAAC;AAC1B,IAAI,OAAO,SAAS,CAAC;AACrB,IAAI,OAAO,QAAQ,CAAC;AACpB,IAAI,OAAO,SAAS,GAAG,KAAK,CAAC;AAC7B,IAAI,OAAO,SAAS,GAAG;AACvB,QAAQ,OAAO,EAAE,CAAC;AAClB,QAAQ,WAAW,EAAE,CAAC;AACtB,QAAQ,WAAW,EAAE,CAAC;AACtB,KAAK,CAAC;AACN,IAAI,OAAO,aAAa,GAAG;AAC3B,QAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AAC7B,YAAY,IAAI,CAAC,SAAS,GAAG,IAAI,WAAW,CAAC,YAAY,CAAC,8BAA8B,CAAC,CAAC,CAAC;AAC3F,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,WAAW,CAAC,YAAY,CAAC,kCAAkC,CAAC,CAAC,CAAC;AAC9F,YAAY,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAClC,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,GAAG,CAAC,SAAS,EAAE;AAC1B,QAAQ,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAC5E,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE;AACzB,QAAQ,OAAO,CAAC,IAAI,GAAG,GAAG,MAAM,CAAC,CAAC;AAClC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,uBAAuB,CAAC,EAAE,EAAE,KAAK,EAAE;AAC9C,QAAQ,MAAM,EAAE,GAAG,KAAK,CAAC,YAAY,CAAC;AACtC,QAAQ,MAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC;AAC5B,QAAQ,IAAI,EAAE,GAAG,CAAC,CAAC;AACnB,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;AAC/C;AACA,QAAQ,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5C,YAAY,MAAM,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;AAC/B,YAAY,MAAM,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACnC;AACA,YAAY,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,kBAAkB,CAAC,EAAE;AACvD,gBAAgB,EAAE,GAAG,CAAC,CAAC;AACvB,aAAa;AACb;AACA,YAAY,QAAQ,SAAS;AAC7B,gBAAgB,KAAK,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;AAChD,gBAAgB,KAAK,IAAI,CAAC,SAAS,CAAC,OAAO;AAC3C,oBAAoB,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,qBAAqB,CAAC,EAAE;AACjE,wBAAwB,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;AAC/D,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;AAC3D,qBAAqB;AACrB,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,IAAI,CAAC,SAAS,CAAC,WAAW;AAC/C,oBAAoB,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE;AAClD,wBAAwB,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;AAC/D,qBAAqB;AACrB,yBAAyB,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,qBAAqB,CAAC,EAAE;AAC/F,wBAAwB,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;AAC/D,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;AAC3D,qBAAqB;AACrB,oBAAoB,MAAM;AAC1B,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;AAC9D,gBAAgB,SAAS;AACzB,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AAC3D,gBAAgB,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AACrC,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AAC3D,gBAAgB,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AACrC,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE;AACpF,gBAAgB,SAAS;AACzB,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE;AAC3E,gBAAgB,SAAS;AACzB,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE;AACrE,gBAAgB,SAAS;AACzB,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE;AACnD,gBAAgB,SAAS;AACzB,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,WAAW,CAAC,EAAE;AAC/C,gBAAgB,SAAS;AACzB,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE;AAC3C,gBAAgB,SAAS;AACzB,aAAa;AACb;AACA,YAAY,IAAI,SAAS,KAAK,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE;AAC1D,gBAAgB,SAAS;AACzB,aAAa;AACb;AACA;AACA,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,kBAAkB,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE;AAC9G,gBAAgB,EAAE,EAAE,CAAC;AACrB,gBAAgB,SAAS;AACzB,aAAa;AACb;AACA,YAAY,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AACjC,SAAS;AACT;AACA,QAAQ,OAAO,CAAC,GAAG,KAAK,CAAC;AACzB,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,aAAa,CAAC,GAAG,EAAE;AAC5B,IAAI,mBAAmB,CAAC,aAAa,EAAE,CAAC;AACxC,IAAI,MAAM,gBAAgB,GAAG,EAAE,CAAC;AAChC,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACpB,IAAI,MAAM,EAAE,GAAG,EAAE,CAAC;AAClB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG;AACrC,QAAQ,MAAM,IAAI,GAAG,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AACxC,QAAQ,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AAC/C,QAAQ,CAAC,IAAI,IAAI,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;AAClC,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,KAAK;AACL,IAAI,KAAK,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,MAAM,GAAG;AAC9C,QAAQ,MAAM,IAAI,GAAG,mBAAmB,CAAC,uBAAuB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;AAC7E,QAAQ,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;AAClC,QAAQ,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;AACvC,QAAQ,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;AACrD,QAAQ,MAAM,IAAI,IAAI,CAAC;AACvB,KAAK;AACL,IAAI,OAAO,gBAAgB,CAAC;AAC5B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,gBAAgB,CAAC,GAAG,EAAE;AAChC,IAAI,KAAK,MAAM,QAAQ,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE;AAC/C,QAAQ,MAAM,QAAQ,CAAC;AACvB,KAAK;AACL;;;;","x_google_ignoreList":[0]}