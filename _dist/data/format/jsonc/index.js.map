{"version":3,"file":"index.js","sources":["../../../../node_modules/jsonc-parser/lib/esm/impl/scanner.js","../../../../node_modules/jsonc-parser/lib/esm/impl/string-intern.js","../../../../node_modules/jsonc-parser/lib/esm/impl/format.js","../../../../node_modules/jsonc-parser/lib/esm/impl/parser.js","../../../../node_modules/jsonc-parser/lib/esm/impl/edit.js","../../../../node_modules/jsonc-parser/lib/esm/main.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia = false) {\n    const len = text.length;\n    let pos = 0, value = '', tokenOffset = 0, token = 16 /* SyntaxKind.Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* ScanError.None */;\n    function scanHexDigits(count, exact) {\n        let digits = 0;\n        let value = 0;\n        while (digits < count || !exact) {\n            let ch = text.charCodeAt(pos);\n            if (ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */) {\n                value = value * 16 + ch - 48 /* CharacterCodes._0 */;\n            }\n            else if (ch >= 65 /* CharacterCodes.A */ && ch <= 70 /* CharacterCodes.F */) {\n                value = value * 16 + ch - 65 /* CharacterCodes.A */ + 10;\n            }\n            else if (ch >= 97 /* CharacterCodes.a */ && ch <= 102 /* CharacterCodes.f */) {\n                value = value * 16 + ch - 97 /* CharacterCodes.a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* SyntaxKind.Unknown */;\n        scanError = 0 /* ScanError.None */;\n    }\n    function scanNumber() {\n        let start = pos;\n        if (text.charCodeAt(pos) === 48 /* CharacterCodes._0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* CharacterCodes.dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        let end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* CharacterCodes.E */ || text.charCodeAt(pos) === 101 /* CharacterCodes.e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* CharacterCodes.plus */ || text.charCodeAt(pos) === 45 /* CharacterCodes.minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        let result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                break;\n            }\n            const ch = text.charCodeAt(pos);\n            if (ch === 34 /* CharacterCodes.doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* CharacterCodes.backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                    break;\n                }\n                const ch2 = text.charCodeAt(pos++);\n                switch (ch2) {\n                    case 34 /* CharacterCodes.doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* CharacterCodes.backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* CharacterCodes.slash */:\n                        result += '/';\n                        break;\n                    case 98 /* CharacterCodes.b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* CharacterCodes.f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* CharacterCodes.n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* CharacterCodes.r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* CharacterCodes.t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* CharacterCodes.u */:\n                        const ch3 = scanHexDigits(4, true);\n                        if (ch3 >= 0) {\n                            result += String.fromCharCode(ch3);\n                        }\n                        else {\n                            scanError = 4 /* ScanError.InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* ScanError.InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* ScanError.InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* ScanError.None */;\n        tokenOffset = pos;\n        lineStartOffset = lineNumber;\n        prevTokenLineStartOffset = tokenLineStartOffset;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* SyntaxKind.EOF */;\n        }\n        let code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* SyntaxKind.Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            lineNumber++;\n            tokenLineStartOffset = pos;\n            return token = 14 /* SyntaxKind.LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* CharacterCodes.openBrace */:\n                pos++;\n                return token = 1 /* SyntaxKind.OpenBraceToken */;\n            case 125 /* CharacterCodes.closeBrace */:\n                pos++;\n                return token = 2 /* SyntaxKind.CloseBraceToken */;\n            case 91 /* CharacterCodes.openBracket */:\n                pos++;\n                return token = 3 /* SyntaxKind.OpenBracketToken */;\n            case 93 /* CharacterCodes.closeBracket */:\n                pos++;\n                return token = 4 /* SyntaxKind.CloseBracketToken */;\n            case 58 /* CharacterCodes.colon */:\n                pos++;\n                return token = 6 /* SyntaxKind.ColonToken */;\n            case 44 /* CharacterCodes.comma */:\n                pos++;\n                return token = 5 /* SyntaxKind.CommaToken */;\n            // strings\n            case 34 /* CharacterCodes.doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* SyntaxKind.StringLiteral */;\n            // comments\n            case 47 /* CharacterCodes.slash */:\n                const start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* SyntaxKind.LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* CharacterCodes.asterisk */) {\n                    pos += 2;\n                    const safeLength = len - 1; // For lookahead.\n                    let commentClosed = false;\n                    while (pos < safeLength) {\n                        const ch = text.charCodeAt(pos);\n                        if (ch === 42 /* CharacterCodes.asterisk */ && text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                        if (isLineBreak(ch)) {\n                            if (ch === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                                pos++;\n                            }\n                            lineNumber++;\n                            tokenLineStartOffset = pos;\n                        }\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* ScanError.UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* SyntaxKind.BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* SyntaxKind.Unknown */;\n            // numbers\n            case 45 /* CharacterCodes.minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* SyntaxKind.Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* CharacterCodes._0 */:\n            case 49 /* CharacterCodes._1 */:\n            case 50 /* CharacterCodes._2 */:\n            case 51 /* CharacterCodes._3 */:\n            case 52 /* CharacterCodes._4 */:\n            case 53 /* CharacterCodes._5 */:\n            case 54 /* CharacterCodes._6 */:\n            case 55 /* CharacterCodes._7 */:\n            case 56 /* CharacterCodes._8 */:\n            case 57 /* CharacterCodes._9 */:\n                value += scanNumber();\n                return token = 11 /* SyntaxKind.NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* SyntaxKind.TrueKeyword */;\n                        case 'false': return token = 9 /* SyntaxKind.FalseKeyword */;\n                        case 'null': return token = 7 /* SyntaxKind.NullKeyword */;\n                    }\n                    return token = 16 /* SyntaxKind.Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* SyntaxKind.Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* CharacterCodes.closeBrace */:\n            case 93 /* CharacterCodes.closeBracket */:\n            case 123 /* CharacterCodes.openBrace */:\n            case 91 /* CharacterCodes.openBracket */:\n            case 34 /* CharacterCodes.doubleQuote */:\n            case 58 /* CharacterCodes.colon */:\n            case 44 /* CharacterCodes.comma */:\n            case 47 /* CharacterCodes.slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        let result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* SyntaxKind.LineCommentTrivia */ && result <= 15 /* SyntaxKind.Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: () => pos,\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: () => token,\n        getTokenValue: () => value,\n        getTokenOffset: () => tokenOffset,\n        getTokenLength: () => pos - tokenOffset,\n        getTokenStartLine: () => lineStartOffset,\n        getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,\n        getTokenError: () => scanError,\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* CharacterCodes.space */ || ch === 9 /* CharacterCodes.tab */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* CharacterCodes.lineFeed */ || ch === 13 /* CharacterCodes.carriageReturn */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */;\n}\nvar CharacterCodes;\n(function (CharacterCodes) {\n    CharacterCodes[CharacterCodes[\"lineFeed\"] = 10] = \"lineFeed\";\n    CharacterCodes[CharacterCodes[\"carriageReturn\"] = 13] = \"carriageReturn\";\n    CharacterCodes[CharacterCodes[\"space\"] = 32] = \"space\";\n    CharacterCodes[CharacterCodes[\"_0\"] = 48] = \"_0\";\n    CharacterCodes[CharacterCodes[\"_1\"] = 49] = \"_1\";\n    CharacterCodes[CharacterCodes[\"_2\"] = 50] = \"_2\";\n    CharacterCodes[CharacterCodes[\"_3\"] = 51] = \"_3\";\n    CharacterCodes[CharacterCodes[\"_4\"] = 52] = \"_4\";\n    CharacterCodes[CharacterCodes[\"_5\"] = 53] = \"_5\";\n    CharacterCodes[CharacterCodes[\"_6\"] = 54] = \"_6\";\n    CharacterCodes[CharacterCodes[\"_7\"] = 55] = \"_7\";\n    CharacterCodes[CharacterCodes[\"_8\"] = 56] = \"_8\";\n    CharacterCodes[CharacterCodes[\"_9\"] = 57] = \"_9\";\n    CharacterCodes[CharacterCodes[\"a\"] = 97] = \"a\";\n    CharacterCodes[CharacterCodes[\"b\"] = 98] = \"b\";\n    CharacterCodes[CharacterCodes[\"c\"] = 99] = \"c\";\n    CharacterCodes[CharacterCodes[\"d\"] = 100] = \"d\";\n    CharacterCodes[CharacterCodes[\"e\"] = 101] = \"e\";\n    CharacterCodes[CharacterCodes[\"f\"] = 102] = \"f\";\n    CharacterCodes[CharacterCodes[\"g\"] = 103] = \"g\";\n    CharacterCodes[CharacterCodes[\"h\"] = 104] = \"h\";\n    CharacterCodes[CharacterCodes[\"i\"] = 105] = \"i\";\n    CharacterCodes[CharacterCodes[\"j\"] = 106] = \"j\";\n    CharacterCodes[CharacterCodes[\"k\"] = 107] = \"k\";\n    CharacterCodes[CharacterCodes[\"l\"] = 108] = \"l\";\n    CharacterCodes[CharacterCodes[\"m\"] = 109] = \"m\";\n    CharacterCodes[CharacterCodes[\"n\"] = 110] = \"n\";\n    CharacterCodes[CharacterCodes[\"o\"] = 111] = \"o\";\n    CharacterCodes[CharacterCodes[\"p\"] = 112] = \"p\";\n    CharacterCodes[CharacterCodes[\"q\"] = 113] = \"q\";\n    CharacterCodes[CharacterCodes[\"r\"] = 114] = \"r\";\n    CharacterCodes[CharacterCodes[\"s\"] = 115] = \"s\";\n    CharacterCodes[CharacterCodes[\"t\"] = 116] = \"t\";\n    CharacterCodes[CharacterCodes[\"u\"] = 117] = \"u\";\n    CharacterCodes[CharacterCodes[\"v\"] = 118] = \"v\";\n    CharacterCodes[CharacterCodes[\"w\"] = 119] = \"w\";\n    CharacterCodes[CharacterCodes[\"x\"] = 120] = \"x\";\n    CharacterCodes[CharacterCodes[\"y\"] = 121] = \"y\";\n    CharacterCodes[CharacterCodes[\"z\"] = 122] = \"z\";\n    CharacterCodes[CharacterCodes[\"A\"] = 65] = \"A\";\n    CharacterCodes[CharacterCodes[\"B\"] = 66] = \"B\";\n    CharacterCodes[CharacterCodes[\"C\"] = 67] = \"C\";\n    CharacterCodes[CharacterCodes[\"D\"] = 68] = \"D\";\n    CharacterCodes[CharacterCodes[\"E\"] = 69] = \"E\";\n    CharacterCodes[CharacterCodes[\"F\"] = 70] = \"F\";\n    CharacterCodes[CharacterCodes[\"G\"] = 71] = \"G\";\n    CharacterCodes[CharacterCodes[\"H\"] = 72] = \"H\";\n    CharacterCodes[CharacterCodes[\"I\"] = 73] = \"I\";\n    CharacterCodes[CharacterCodes[\"J\"] = 74] = \"J\";\n    CharacterCodes[CharacterCodes[\"K\"] = 75] = \"K\";\n    CharacterCodes[CharacterCodes[\"L\"] = 76] = \"L\";\n    CharacterCodes[CharacterCodes[\"M\"] = 77] = \"M\";\n    CharacterCodes[CharacterCodes[\"N\"] = 78] = \"N\";\n    CharacterCodes[CharacterCodes[\"O\"] = 79] = \"O\";\n    CharacterCodes[CharacterCodes[\"P\"] = 80] = \"P\";\n    CharacterCodes[CharacterCodes[\"Q\"] = 81] = \"Q\";\n    CharacterCodes[CharacterCodes[\"R\"] = 82] = \"R\";\n    CharacterCodes[CharacterCodes[\"S\"] = 83] = \"S\";\n    CharacterCodes[CharacterCodes[\"T\"] = 84] = \"T\";\n    CharacterCodes[CharacterCodes[\"U\"] = 85] = \"U\";\n    CharacterCodes[CharacterCodes[\"V\"] = 86] = \"V\";\n    CharacterCodes[CharacterCodes[\"W\"] = 87] = \"W\";\n    CharacterCodes[CharacterCodes[\"X\"] = 88] = \"X\";\n    CharacterCodes[CharacterCodes[\"Y\"] = 89] = \"Y\";\n    CharacterCodes[CharacterCodes[\"Z\"] = 90] = \"Z\";\n    CharacterCodes[CharacterCodes[\"asterisk\"] = 42] = \"asterisk\";\n    CharacterCodes[CharacterCodes[\"backslash\"] = 92] = \"backslash\";\n    CharacterCodes[CharacterCodes[\"closeBrace\"] = 125] = \"closeBrace\";\n    CharacterCodes[CharacterCodes[\"closeBracket\"] = 93] = \"closeBracket\";\n    CharacterCodes[CharacterCodes[\"colon\"] = 58] = \"colon\";\n    CharacterCodes[CharacterCodes[\"comma\"] = 44] = \"comma\";\n    CharacterCodes[CharacterCodes[\"dot\"] = 46] = \"dot\";\n    CharacterCodes[CharacterCodes[\"doubleQuote\"] = 34] = \"doubleQuote\";\n    CharacterCodes[CharacterCodes[\"minus\"] = 45] = \"minus\";\n    CharacterCodes[CharacterCodes[\"openBrace\"] = 123] = \"openBrace\";\n    CharacterCodes[CharacterCodes[\"openBracket\"] = 91] = \"openBracket\";\n    CharacterCodes[CharacterCodes[\"plus\"] = 43] = \"plus\";\n    CharacterCodes[CharacterCodes[\"slash\"] = 47] = \"slash\";\n    CharacterCodes[CharacterCodes[\"formFeed\"] = 12] = \"formFeed\";\n    CharacterCodes[CharacterCodes[\"tab\"] = 9] = \"tab\";\n})(CharacterCodes || (CharacterCodes = {}));\n","export const cachedSpaces = new Array(20).fill(0).map((_, index) => {\n    return ' '.repeat(index);\n});\nconst maxCachedValues = 200;\nexport const cachedBreakLinesWithSpaces = {\n    ' ': {\n        '\\n': new Array(maxCachedValues).fill(0).map((_, index) => {\n            return '\\n' + ' '.repeat(index);\n        }),\n        '\\r': new Array(maxCachedValues).fill(0).map((_, index) => {\n            return '\\r' + ' '.repeat(index);\n        }),\n        '\\r\\n': new Array(maxCachedValues).fill(0).map((_, index) => {\n            return '\\r\\n' + ' '.repeat(index);\n        }),\n    },\n    '\\t': {\n        '\\n': new Array(maxCachedValues).fill(0).map((_, index) => {\n            return '\\n' + '\\t'.repeat(index);\n        }),\n        '\\r': new Array(maxCachedValues).fill(0).map((_, index) => {\n            return '\\r' + '\\t'.repeat(index);\n        }),\n        '\\r\\n': new Array(maxCachedValues).fill(0).map((_, index) => {\n            return '\\r\\n' + '\\t'.repeat(index);\n        }),\n    }\n};\nexport const supportedEols = ['\\n', '\\r', '\\r\\n'];\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner';\nimport { cachedSpaces, cachedBreakLinesWithSpaces, supportedEols } from './string-intern';\nexport function format(documentText, range, options) {\n    let initialIndentLevel;\n    let formatText;\n    let formatTextStart;\n    let rangeStart;\n    let rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        let endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    const eol = getEOL(options, documentText);\n    const eolFastPathSupported = supportedEols.includes(eol);\n    let numberLineBreaks = 0;\n    let indentLevel = 0;\n    let indentValue;\n    if (options.insertSpaces) {\n        indentValue = cachedSpaces[options.tabSize || 4] ?? repeat(cachedSpaces[1], options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    const indentType = indentValue === '\\t' ? '\\t' : ' ';\n    let scanner = createScanner(formatText, false);\n    let hasError = false;\n    function newLinesAndIndent() {\n        if (numberLineBreaks > 1) {\n            return repeat(eol, numberLineBreaks) + repeat(indentValue, initialIndentLevel + indentLevel);\n        }\n        const amountOfSpaces = indentValue.length * (initialIndentLevel + indentLevel);\n        if (!eolFastPathSupported || amountOfSpaces > cachedBreakLinesWithSpaces[indentType][eol].length) {\n            return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n        }\n        if (amountOfSpaces <= 0) {\n            return eol;\n        }\n        return cachedBreakLinesWithSpaces[indentType][eol][amountOfSpaces];\n    }\n    function scanNext() {\n        let token = scanner.scan();\n        numberLineBreaks = 0;\n        while (token === 15 /* SyntaxKind.Trivia */ || token === 14 /* SyntaxKind.LineBreakTrivia */) {\n            if (token === 14 /* SyntaxKind.LineBreakTrivia */ && options.keepLines) {\n                numberLineBreaks += 1;\n            }\n            else if (token === 14 /* SyntaxKind.LineBreakTrivia */) {\n                numberLineBreaks = 1;\n            }\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* SyntaxKind.Unknown */ || scanner.getTokenError() !== 0 /* ScanError.None */;\n        return token;\n    }\n    const editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && (!range || (startOffset < rangeEnd && endOffset > rangeStart)) && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    let firstToken = scanNext();\n    if (options.keepLines && numberLineBreaks > 0) {\n        addEdit(repeat(eol, numberLineBreaks), 0, 0);\n    }\n    if (firstToken !== 17 /* SyntaxKind.EOF */) {\n        let firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        let initialIndent = (indentValue.length * initialIndentLevel < 20) && options.insertSpaces\n            ? cachedSpaces[indentValue.length * initialIndentLevel]\n            : repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* SyntaxKind.EOF */) {\n        let firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        let secondToken = scanNext();\n        let replaceContent = '';\n        let needsLineBreak = false;\n        while (numberLineBreaks === 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {\n            let commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(cachedSpaces[1], firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            needsLineBreak = secondToken === 12 /* SyntaxKind.LineCommentTrivia */;\n            replaceContent = needsLineBreak ? newLinesAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* SyntaxKind.CloseBraceToken */) {\n            if (firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {\n                indentLevel--;\n            }\n            ;\n            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {\n                replaceContent = newLinesAndIndent();\n            }\n            else if (options.keepLines) {\n                replaceContent = cachedSpaces[1];\n            }\n        }\n        else if (secondToken === 4 /* SyntaxKind.CloseBracketToken */) {\n            if (firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {\n                indentLevel--;\n            }\n            ;\n            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {\n                replaceContent = newLinesAndIndent();\n            }\n            else if (options.keepLines) {\n                replaceContent = cachedSpaces[1];\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* SyntaxKind.OpenBracketToken */:\n                case 1 /* SyntaxKind.OpenBraceToken */:\n                    indentLevel++;\n                    if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        replaceContent = cachedSpaces[1];\n                    }\n                    break;\n                case 5 /* SyntaxKind.CommaToken */:\n                    if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        replaceContent = cachedSpaces[1];\n                    }\n                    break;\n                case 12 /* SyntaxKind.LineCommentTrivia */:\n                    replaceContent = newLinesAndIndent();\n                    break;\n                case 13 /* SyntaxKind.BlockCommentTrivia */:\n                    if (numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (!needsLineBreak) {\n                        replaceContent = cachedSpaces[1];\n                    }\n                    break;\n                case 6 /* SyntaxKind.ColonToken */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (!needsLineBreak) {\n                        replaceContent = cachedSpaces[1];\n                    }\n                    break;\n                case 10 /* SyntaxKind.StringLiteral */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (secondToken === 6 /* SyntaxKind.ColonToken */ && !needsLineBreak) {\n                        replaceContent = '';\n                    }\n                    break;\n                case 7 /* SyntaxKind.NullKeyword */:\n                case 8 /* SyntaxKind.TrueKeyword */:\n                case 9 /* SyntaxKind.FalseKeyword */:\n                case 11 /* SyntaxKind.NumericLiteral */:\n                case 2 /* SyntaxKind.CloseBraceToken */:\n                case 4 /* SyntaxKind.CloseBracketToken */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        if ((secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */) && !needsLineBreak) {\n                            replaceContent = cachedSpaces[1];\n                        }\n                        else if (secondToken !== 5 /* SyntaxKind.CommaToken */ && secondToken !== 17 /* SyntaxKind.EOF */) {\n                            hasError = true;\n                        }\n                    }\n                    break;\n                case 16 /* SyntaxKind.Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (numberLineBreaks > 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {\n                replaceContent = newLinesAndIndent();\n            }\n        }\n        if (secondToken === 17 /* SyntaxKind.EOF */) {\n            if (options.keepLines && numberLineBreaks > 0) {\n                replaceContent = newLinesAndIndent();\n            }\n            else {\n                replaceContent = options.insertFinalNewline ? eol : '';\n            }\n        }\n        const secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    let result = '';\n    for (let i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    let i = 0;\n    let nChars = 0;\n    const tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        let ch = content.charAt(i);\n        if (ch === cachedSpaces[1]) {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner';\nvar ParseOptions;\n(function (ParseOptions) {\n    ParseOptions.DEFAULT = {\n        allowTrailingComma: false\n    };\n})(ParseOptions || (ParseOptions = {}));\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    const segments = []; // strings or numbers\n    const earlyReturnException = new Object();\n    let previousNode = undefined;\n    const previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object',\n        parent: undefined\n    };\n    let isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.colonOffset = undefined;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: (name, offset, length) => {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.pop();\n            },\n            onArrayBegin: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.push(0);\n            },\n            onArrayEnd: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.pop();\n            },\n            onLiteralValue: (value, offset, length) => {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: (sep, offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.colonOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = undefined;\n                }\n                else if (sep === ',') {\n                    const last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = undefined;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode,\n        isAtPropertyKey,\n        matches: (pattern) => {\n            let k = 0;\n            for (let i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors = [], options = ParseOptions.DEFAULT) {\n    let currentProperty = null;\n    let currentParent = [];\n    const previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty !== null) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    const visitor = {\n        onObjectBegin: () => {\n            const object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: (name) => {\n            currentProperty = name;\n        },\n        onObjectEnd: () => {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: () => {\n            const array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: () => {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: (error, offset, length) => {\n            errors.push({ error, offset, length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors = [], options = ParseOptions.DEFAULT) {\n    let currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: undefined }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    const visitor = {\n        onObjectBegin: (offset) => {\n            currentParent = onValue({ type: 'object', offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: (name, offset, length) => {\n            currentParent = onValue({ type: 'property', offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset, length, parent: currentParent });\n        },\n        onObjectEnd: (offset, length) => {\n            ensurePropertyComplete(offset + length); // in case of a missing value for a property: make sure property is complete\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: (offset, length) => {\n            currentParent = onValue({ type: 'array', offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: (offset, length) => {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: (value, offset, length) => {\n            onValue({ type: getNodeType(value), offset, length, parent: currentParent, value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: (sep, offset, length) => {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.colonOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: (error, offset, length) => {\n            errors.push({ error, offset, length });\n        }\n    };\n    visit(text, visitor, options);\n    const result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return undefined;\n    }\n    let node = root;\n    for (let segment of path) {\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return undefined;\n            }\n            let found = false;\n            for (const propertyNode of node.children) {\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment && propertyNode.children.length === 2) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return undefined;\n            }\n        }\n        else {\n            const index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return undefined;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport function getNodePath(node) {\n    if (!node.parent || !node.parent.children) {\n        return [];\n    }\n    const path = getNodePath(node.parent);\n    if (node.parent.type === 'property') {\n        const key = node.parent.children[0].value;\n        path.push(key);\n    }\n    else if (node.parent.type === 'array') {\n        const index = node.parent.children.indexOf(node);\n        if (index !== -1) {\n            path.push(index);\n        }\n    }\n    return path;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    switch (node.type) {\n        case 'array':\n            return node.children.map(getNodeValue);\n        case 'object':\n            const obj = Object.create(null);\n            for (let prop of node.children) {\n                const valueNode = prop.children[1];\n                if (valueNode) {\n                    obj[prop.children[0].value] = getNodeValue(valueNode);\n                }\n            }\n            return obj;\n        case 'null':\n        case 'string':\n        case 'number':\n        case 'boolean':\n            return node.value;\n        default:\n            return undefined;\n    }\n}\nexport function contains(node, offset, includeRightBound = false) {\n    return (offset >= node.offset && offset < (node.offset + node.length)) || includeRightBound && (offset === (node.offset + node.length));\n}\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport function findNodeAtOffset(node, offset, includeRightBound = false) {\n    if (contains(node, offset, includeRightBound)) {\n        const children = node.children;\n        if (Array.isArray(children)) {\n            for (let i = 0; i < children.length && children[i].offset <= offset; i++) {\n                const item = findNodeAtOffset(children[i], offset, includeRightBound);\n                if (item) {\n                    return item;\n                }\n            }\n        }\n        return node;\n    }\n    return undefined;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options = ParseOptions.DEFAULT) {\n    const _scanner = createScanner(text, false);\n    // Important: Only pass copies of this to visitor functions to prevent accidental modification, and\n    // to not affect visitor functions which stored a reference to a previous JSONPath\n    const _jsonPath = [];\n    // Depth of onXXXBegin() callbacks suppressed. onXXXEnd() decrements this if it isn't 0 already.\n    // Callbacks are only called when this value is 0.\n    let suppressedCallbacks = 0;\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? () => suppressedCallbacks === 0 && visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? (arg) => suppressedCallbacks === 0 && visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;\n    }\n    function toOneArgVisitWithPath(visitFunction) {\n        return visitFunction ? (arg) => suppressedCallbacks === 0 && visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;\n    }\n    function toBeginVisit(visitFunction) {\n        return visitFunction ?\n            () => {\n                if (suppressedCallbacks > 0) {\n                    suppressedCallbacks++;\n                }\n                else {\n                    let cbReturn = visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice());\n                    if (cbReturn === false) {\n                        suppressedCallbacks = 1;\n                    }\n                }\n            }\n            : () => true;\n    }\n    function toEndVisit(visitFunction) {\n        return visitFunction ?\n            () => {\n                if (suppressedCallbacks > 0) {\n                    suppressedCallbacks--;\n                }\n                if (suppressedCallbacks === 0) {\n                    visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter());\n                }\n            }\n            : () => true;\n    }\n    const onObjectBegin = toBeginVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toEndVisit(visitor.onObjectEnd), onArrayBegin = toBeginVisit(visitor.onArrayBegin), onArrayEnd = toEndVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    const disallowComments = options && options.disallowComments;\n    const allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            const token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* ScanError.InvalidUnicode */:\n                    handleError(14 /* ParseErrorCode.InvalidUnicode */);\n                    break;\n                case 5 /* ScanError.InvalidEscapeCharacter */:\n                    handleError(15 /* ParseErrorCode.InvalidEscapeCharacter */);\n                    break;\n                case 3 /* ScanError.UnexpectedEndOfNumber */:\n                    handleError(13 /* ParseErrorCode.UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* ScanError.UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* ParseErrorCode.UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* ScanError.UnexpectedEndOfString */:\n                    handleError(12 /* ParseErrorCode.UnexpectedEndOfString */);\n                    break;\n                case 6 /* ScanError.InvalidCharacter */:\n                    handleError(16 /* ParseErrorCode.InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* SyntaxKind.LineCommentTrivia */:\n                case 13 /* SyntaxKind.BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* ParseErrorCode.InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* SyntaxKind.Unknown */:\n                    handleError(1 /* ParseErrorCode.InvalidSymbol */);\n                    break;\n                case 15 /* SyntaxKind.Trivia */:\n                case 14 /* SyntaxKind.LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter = [], skipUntil = []) {\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            let token = _scanner.getToken();\n            while (token !== 17 /* SyntaxKind.EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        const value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n            // add property name afterwards\n            _jsonPath.push(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* SyntaxKind.NumericLiteral */:\n                const tokenValue = _scanner.getTokenValue();\n                let value = Number(tokenValue);\n                if (isNaN(value)) {\n                    handleError(2 /* ParseErrorCode.InvalidNumberFormat */);\n                    value = 0;\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* SyntaxKind.NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* SyntaxKind.TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* SyntaxKind.FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* SyntaxKind.StringLiteral */) {\n            handleError(3 /* ParseErrorCode.PropertyNameExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* SyntaxKind.ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ParseErrorCode.ValueExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ParseErrorCode.ColonExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n        }\n        _jsonPath.pop(); // remove processed property name\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        let needsComma = false;\n        while (_scanner.getToken() !== 2 /* SyntaxKind.CloseBraceToken */ && _scanner.getToken() !== 17 /* SyntaxKind.EOF */) {\n            if (_scanner.getToken() === 5 /* SyntaxKind.CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* SyntaxKind.CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* ParseErrorCode.CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ParseErrorCode.ValueExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* SyntaxKind.CloseBraceToken */) {\n            handleError(7 /* ParseErrorCode.CloseBraceExpected */, [2 /* SyntaxKind.CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        let isFirstElement = true;\n        let needsComma = false;\n        while (_scanner.getToken() !== 4 /* SyntaxKind.CloseBracketToken */ && _scanner.getToken() !== 17 /* SyntaxKind.EOF */) {\n            if (_scanner.getToken() === 5 /* SyntaxKind.CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* SyntaxKind.CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* ParseErrorCode.CommaExpected */, [], []);\n            }\n            if (isFirstElement) {\n                _jsonPath.push(0);\n                isFirstElement = false;\n            }\n            else {\n                _jsonPath[_jsonPath.length - 1]++;\n            }\n            if (!parseValue()) {\n                handleError(4 /* ParseErrorCode.ValueExpected */, [], [4 /* SyntaxKind.CloseBracketToken */, 5 /* SyntaxKind.CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (!isFirstElement) {\n            _jsonPath.pop(); // remove array index\n        }\n        if (_scanner.getToken() !== 4 /* SyntaxKind.CloseBracketToken */) {\n            handleError(8 /* ParseErrorCode.CloseBracketExpected */, [4 /* SyntaxKind.CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* SyntaxKind.OpenBracketToken */:\n                return parseArray();\n            case 1 /* SyntaxKind.OpenBraceToken */:\n                return parseObject();\n            case 10 /* SyntaxKind.StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* SyntaxKind.EOF */) {\n        if (options.allowEmptyContent) {\n            return true;\n        }\n        handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n        return false;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* SyntaxKind.EOF */) {\n        handleError(9 /* ParseErrorCode.EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    let _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* SyntaxKind.LineCommentTrivia */:\n            case 13 /* SyntaxKind.BlockCommentTrivia */:\n            case 17 /* SyntaxKind.EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== undefined) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* SyntaxKind.EOF */);\n    return parts.join('');\n}\nexport function getNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        case 'object': {\n            if (!value) {\n                return 'null';\n            }\n            else if (Array.isArray(value)) {\n                return 'array';\n            }\n            return 'object';\n        }\n        default: return 'null';\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { format, isEOL } from './format';\nimport { parseTree, findNodeAtLocation } from './parser';\nexport function removeProperty(text, path, options) {\n    return setProperty(text, path, void 0, options);\n}\nexport function setProperty(text, originalPath, value, options) {\n    const path = originalPath.slice();\n    const errors = [];\n    const root = parseTree(text, errors);\n    let parent = void 0;\n    let lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = findNodeAtLocation(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = { [lastSegment]: value };\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) { // delete\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, options);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        const existing = findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) { // delete\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                const propertyIndex = parent.children.indexOf(existing.parent);\n                let removeBegin;\n                let removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    let previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        let next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, options);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, options);\n            }\n        }\n        else {\n            if (value === void 0) { // delete\n                return []; // property does not exist, nothing to do\n            }\n            const newProperty = `${JSON.stringify(lastSegment)}: ${JSON.stringify(value)}`;\n            const index = options.getInsertionIndex ? options.getInsertionIndex(parent.children.map(p => p.children[0].value)) : parent.children.length;\n            let edit;\n            if (index > 0) {\n                let previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, options);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        const insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            const newProperty = `${JSON.stringify(value)}`;\n            let edit;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                const previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, options);\n        }\n        else if (value === void 0 && parent.children.length >= 0) {\n            // Removal\n            const removalIndex = lastSegment;\n            const toRemove = parent.children[removalIndex];\n            let edit;\n            if (parent.children.length === 1) {\n                // only item\n                edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n            }\n            else if (parent.children.length - 1 === removalIndex) {\n                // last item\n                let previous = parent.children[removalIndex - 1];\n                let offset = previous.offset + previous.length;\n                let parentEndOffset = parent.offset + parent.length;\n                edit = { offset, length: parentEndOffset - 2 - offset, content: '' };\n            }\n            else {\n                edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n            }\n            return withFormatting(text, edit, options);\n        }\n        else if (value !== void 0) {\n            let edit;\n            const newProperty = `${JSON.stringify(value)}`;\n            if (!options.isArrayInsertion && parent.children.length > lastSegment) {\n                const toModify = parent.children[lastSegment];\n                edit = { offset: toModify.offset, length: toModify.length, content: newProperty };\n            }\n            else if (parent.children.length === 0 || lastSegment === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: parent.children.length === 0 ? newProperty : newProperty + ',' };\n            }\n            else {\n                const index = lastSegment > parent.children.length ? parent.children.length : lastSegment;\n                const previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, options);\n        }\n        else {\n            throw new Error(`Can not ${value === void 0 ? 'remove' : (options.isArrayInsertion ? 'insert' : 'modify')} Array index ${insertIndex} as length is not sufficient`);\n        }\n    }\n    else {\n        throw new Error(`Can not add ${typeof lastSegment !== 'number' ? 'index' : 'property'} to parent of type ${parent.type}`);\n    }\n}\nfunction withFormatting(text, edit, options) {\n    if (!options.formattingOptions) {\n        return [edit];\n    }\n    // apply the edit\n    let newText = applyEdit(text, edit);\n    // format the new text\n    let begin = edit.offset;\n    let end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) { // insert or remove\n        while (begin > 0 && !isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !isEOL(newText, end)) {\n            end++;\n        }\n    }\n    const edits = format(newText, { offset: begin, length: end - begin }, { ...options.formattingOptions, keepLines: false });\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (let i = edits.length - 1; i >= 0; i--) {\n        const edit = edits[i];\n        newText = applyEdit(newText, edit);\n        begin = Math.min(begin, edit.offset);\n        end = Math.max(end, edit.offset + edit.length);\n        end += edit.content.length - edit.length;\n    }\n    // create a single edit with all changes\n    const editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nexport function applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexport function isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format';\nimport * as edit from './impl/edit';\nimport * as scanner from './impl/scanner';\nimport * as parser from './impl/parser';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport const createScanner = scanner.createScanner;\nexport var ScanError;\n(function (ScanError) {\n    ScanError[ScanError[\"None\"] = 0] = \"None\";\n    ScanError[ScanError[\"UnexpectedEndOfComment\"] = 1] = \"UnexpectedEndOfComment\";\n    ScanError[ScanError[\"UnexpectedEndOfString\"] = 2] = \"UnexpectedEndOfString\";\n    ScanError[ScanError[\"UnexpectedEndOfNumber\"] = 3] = \"UnexpectedEndOfNumber\";\n    ScanError[ScanError[\"InvalidUnicode\"] = 4] = \"InvalidUnicode\";\n    ScanError[ScanError[\"InvalidEscapeCharacter\"] = 5] = \"InvalidEscapeCharacter\";\n    ScanError[ScanError[\"InvalidCharacter\"] = 6] = \"InvalidCharacter\";\n})(ScanError || (ScanError = {}));\nexport var SyntaxKind;\n(function (SyntaxKind) {\n    SyntaxKind[SyntaxKind[\"OpenBraceToken\"] = 1] = \"OpenBraceToken\";\n    SyntaxKind[SyntaxKind[\"CloseBraceToken\"] = 2] = \"CloseBraceToken\";\n    SyntaxKind[SyntaxKind[\"OpenBracketToken\"] = 3] = \"OpenBracketToken\";\n    SyntaxKind[SyntaxKind[\"CloseBracketToken\"] = 4] = \"CloseBracketToken\";\n    SyntaxKind[SyntaxKind[\"CommaToken\"] = 5] = \"CommaToken\";\n    SyntaxKind[SyntaxKind[\"ColonToken\"] = 6] = \"ColonToken\";\n    SyntaxKind[SyntaxKind[\"NullKeyword\"] = 7] = \"NullKeyword\";\n    SyntaxKind[SyntaxKind[\"TrueKeyword\"] = 8] = \"TrueKeyword\";\n    SyntaxKind[SyntaxKind[\"FalseKeyword\"] = 9] = \"FalseKeyword\";\n    SyntaxKind[SyntaxKind[\"StringLiteral\"] = 10] = \"StringLiteral\";\n    SyntaxKind[SyntaxKind[\"NumericLiteral\"] = 11] = \"NumericLiteral\";\n    SyntaxKind[SyntaxKind[\"LineCommentTrivia\"] = 12] = \"LineCommentTrivia\";\n    SyntaxKind[SyntaxKind[\"BlockCommentTrivia\"] = 13] = \"BlockCommentTrivia\";\n    SyntaxKind[SyntaxKind[\"LineBreakTrivia\"] = 14] = \"LineBreakTrivia\";\n    SyntaxKind[SyntaxKind[\"Trivia\"] = 15] = \"Trivia\";\n    SyntaxKind[SyntaxKind[\"Unknown\"] = 16] = \"Unknown\";\n    SyntaxKind[SyntaxKind[\"EOF\"] = 17] = \"EOF\";\n})(SyntaxKind || (SyntaxKind = {}));\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport const getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore, always check the errors list to find out if the input was valid.\n */\nexport const parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport const parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport const findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the innermost node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport const findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport const getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport const getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport const visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport const stripComments = parser.stripComments;\nexport var ParseErrorCode;\n(function (ParseErrorCode) {\n    ParseErrorCode[ParseErrorCode[\"InvalidSymbol\"] = 1] = \"InvalidSymbol\";\n    ParseErrorCode[ParseErrorCode[\"InvalidNumberFormat\"] = 2] = \"InvalidNumberFormat\";\n    ParseErrorCode[ParseErrorCode[\"PropertyNameExpected\"] = 3] = \"PropertyNameExpected\";\n    ParseErrorCode[ParseErrorCode[\"ValueExpected\"] = 4] = \"ValueExpected\";\n    ParseErrorCode[ParseErrorCode[\"ColonExpected\"] = 5] = \"ColonExpected\";\n    ParseErrorCode[ParseErrorCode[\"CommaExpected\"] = 6] = \"CommaExpected\";\n    ParseErrorCode[ParseErrorCode[\"CloseBraceExpected\"] = 7] = \"CloseBraceExpected\";\n    ParseErrorCode[ParseErrorCode[\"CloseBracketExpected\"] = 8] = \"CloseBracketExpected\";\n    ParseErrorCode[ParseErrorCode[\"EndOfFileExpected\"] = 9] = \"EndOfFileExpected\";\n    ParseErrorCode[ParseErrorCode[\"InvalidCommentToken\"] = 10] = \"InvalidCommentToken\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfComment\"] = 11] = \"UnexpectedEndOfComment\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfString\"] = 12] = \"UnexpectedEndOfString\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfNumber\"] = 13] = \"UnexpectedEndOfNumber\";\n    ParseErrorCode[ParseErrorCode[\"InvalidUnicode\"] = 14] = \"InvalidUnicode\";\n    ParseErrorCode[ParseErrorCode[\"InvalidEscapeCharacter\"] = 15] = \"InvalidEscapeCharacter\";\n    ParseErrorCode[ParseErrorCode[\"InvalidCharacter\"] = 16] = \"InvalidCharacter\";\n})(ParseErrorCode || (ParseErrorCode = {}));\nexport function printParseErrorCode(code) {\n    switch (code) {\n        case 1 /* ParseErrorCode.InvalidSymbol */: return 'InvalidSymbol';\n        case 2 /* ParseErrorCode.InvalidNumberFormat */: return 'InvalidNumberFormat';\n        case 3 /* ParseErrorCode.PropertyNameExpected */: return 'PropertyNameExpected';\n        case 4 /* ParseErrorCode.ValueExpected */: return 'ValueExpected';\n        case 5 /* ParseErrorCode.ColonExpected */: return 'ColonExpected';\n        case 6 /* ParseErrorCode.CommaExpected */: return 'CommaExpected';\n        case 7 /* ParseErrorCode.CloseBraceExpected */: return 'CloseBraceExpected';\n        case 8 /* ParseErrorCode.CloseBracketExpected */: return 'CloseBracketExpected';\n        case 9 /* ParseErrorCode.EndOfFileExpected */: return 'EndOfFileExpected';\n        case 10 /* ParseErrorCode.InvalidCommentToken */: return 'InvalidCommentToken';\n        case 11 /* ParseErrorCode.UnexpectedEndOfComment */: return 'UnexpectedEndOfComment';\n        case 12 /* ParseErrorCode.UnexpectedEndOfString */: return 'UnexpectedEndOfString';\n        case 13 /* ParseErrorCode.UnexpectedEndOfNumber */: return 'UnexpectedEndOfNumber';\n        case 14 /* ParseErrorCode.InvalidUnicode */: return 'InvalidUnicode';\n        case 15 /* ParseErrorCode.InvalidEscapeCharacter */: return 'InvalidEscapeCharacter';\n        case 16 /* ParseErrorCode.InvalidCharacter */: return 'InvalidCharacter';\n    }\n    return '<unknown ParseErrorCode>';\n}\n/**\n * Computes the edit operations needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns The edit operations describing the formatting changes to the original document following the format described in {@linkcode EditResult}.\n * To apply the edit operations to the input, use {@linkcode applyEdits}.\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edit operations needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns The edit operations describing the changes to the original document, following the format described in {@linkcode EditResult}.\n * To apply the edit operations to the input, use {@linkcode applyEdits}.\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options);\n}\n/**\n * Applies edits to an input string.\n * @param text The input text\n * @param edits Edit operations following the format described in {@linkcode EditResult}.\n * @returns The text with the applied edits.\n * @throws An error if the edit operations are not well-formed as described in {@linkcode EditResult}.\n */\nexport function applyEdits(text, edits) {\n    let sortedEdits = edits.slice(0).sort((a, b) => {\n        const diff = a.offset - b.offset;\n        if (diff === 0) {\n            return a.length - b.length;\n        }\n        return diff;\n    });\n    let lastModifiedOffset = text.length;\n    for (let i = sortedEdits.length - 1; i >= 0; i--) {\n        let e = sortedEdits[i];\n        if (e.offset + e.length <= lastModifiedOffset) {\n            text = edit.applyEdit(text, e);\n        }\n        else {\n            throw new Error('Overlapping edit');\n        }\n        lastModifiedOffset = e.offset;\n    }\n    return text;\n}\n"],"names":["createScanner","format","getLocation","visit","parse","parseTree","findNodeAtLocation","getNodePath","getNodeValue","findNodeAtOffset","stripComments","scanner.createScanner","parser.getLocation","parser.parse","parser.parseTree","parser.findNodeAtLocation","parser.findNodeAtOffset","parser.getNodePath","parser.getNodeValue","parser.visit","parser.stripComments","formatter.format","edit.setProperty","edit.applyEdit"],"mappings":"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Ac,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;AACrD,IAAI,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;AACrD,IAAI,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;AACrD,IAAI,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;AACrD,IAAI,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;AACrD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACpD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;AACnD,IAAI,cAAc,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,UAAU,CAAC;AACjE,IAAI,cAAc,CAAC,cAAc,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW,CAAC;AACnE,IAAI,cAAc,CAAC,cAAc,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,GAAG,YAAY,CAAC;AACtE,IAAI,cAAc,CAAC,cAAc,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,GAAG,cAAc,CAAC;AACzE,IAAI,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;AAC3D,IAAI,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;AAC3D,IAAI,cAAc,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;AACvD,IAAI,cAAc,CAAC,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,GAAG,aAAa,CAAC;AACvE,IAAI,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;AAC3D,IAAI,cAAc,CAAC,cAAc,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,GAAG,WAAW,CAAC;AACpE,IAAI,cAAc,CAAC,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,GAAG,aAAa,CAAC;AACvE,IAAI,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,MAAM,CAAC;AACzD,IAAI,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;AAC3D,IAAI,cAAc,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,UAAU,CAAC;AACjE,IAAI,cAAc,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;AACtD,CAAC,EAAE,cAAc,KAAK,cAAc,GAAG,EAAE,CAAC,CAAC;;AC1bpC,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK;AACpE,IAAI,OAAO,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC;AACH,MAAM,eAAe,GAAG,GAAG,CAAC;AACrB,MAAM,0BAA0B,GAAG;AAC1C,IAAI,GAAG,EAAE;AACT,QAAQ,IAAI,EAAE,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK;AACnE,YAAY,OAAO,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC5C,SAAS,CAAC;AACV,QAAQ,IAAI,EAAE,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK;AACnE,YAAY,OAAO,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC5C,SAAS,CAAC;AACV,QAAQ,MAAM,EAAE,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK;AACrE,YAAY,OAAO,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9C,SAAS,CAAC;AACV,KAAK;AACL,IAAI,IAAI,EAAE;AACV,QAAQ,IAAI,EAAE,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK;AACnE,YAAY,OAAO,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC7C,SAAS,CAAC;AACV,QAAQ,IAAI,EAAE,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK;AACnE,YAAY,OAAO,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC7C,SAAS,CAAC;AACV,QAAQ,MAAM,EAAE,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK;AACrE,YAAY,OAAO,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC/C,SAAS,CAAC;AACV,KAAK;AACL,CAAC,CAAC;AACK,MAAM,aAAa,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC;;AC5BjD;AACA;AACA;AACA;AAIO,SAASC,QAAM,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE;AACrD,IAAI,IAAI,kBAAkB,CAAC;AAC3B,IAAI,IAAI,UAAU,CAAC;AACnB,IAAI,IAAI,eAAe,CAAC;AACxB,IAAI,IAAI,UAAU,CAAC;AACnB,IAAI,IAAI,QAAQ,CAAC;AACjB,IAAI,IAAI,KAAK,EAAE;AACf,QAAQ,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC;AAClC,QAAQ,QAAQ,GAAG,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7C,QAAQ,eAAe,GAAG,UAAU,CAAC;AACrC,QAAQ,OAAO,eAAe,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,eAAe,GAAG,CAAC,CAAC,EAAE;AACjF,YAAY,eAAe,EAAE,CAAC;AAC9B,SAAS;AACT,QAAQ,IAAI,SAAS,GAAG,QAAQ,CAAC;AACjC,QAAQ,OAAO,SAAS,GAAG,YAAY,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,EAAE;AACnF,YAAY,SAAS,EAAE,CAAC;AACxB,SAAS;AACT,QAAQ,UAAU,GAAG,YAAY,CAAC,SAAS,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;AACxE,QAAQ,kBAAkB,GAAG,kBAAkB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;AACrE,KAAK;AACL,SAAS;AACT,QAAQ,UAAU,GAAG,YAAY,CAAC;AAClC,QAAQ,kBAAkB,GAAG,CAAC,CAAC;AAC/B,QAAQ,eAAe,GAAG,CAAC,CAAC;AAC5B,QAAQ,UAAU,GAAG,CAAC,CAAC;AACvB,QAAQ,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC;AACvC,KAAK;AACL,IAAI,MAAM,GAAG,GAAG,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;AAC9C,IAAI,MAAM,oBAAoB,GAAG,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC7D,IAAI,IAAI,gBAAgB,GAAG,CAAC,CAAC;AAC7B,IAAI,IAAI,WAAW,GAAG,CAAC,CAAC;AACxB,IAAI,IAAI,WAAW,CAAC;AACpB,IAAI,IAAI,OAAO,CAAC,YAAY,EAAE;AAC9B,QAAQ,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC;AAC1G,KAAK;AACL,SAAS;AACT,QAAQ,WAAW,GAAG,IAAI,CAAC;AAC3B,KAAK;AACL,IAAI,MAAM,UAAU,GAAG,WAAW,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC;AACzD,IAAI,IAAI,OAAO,GAAGD,eAAa,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;AACnD,IAAI,IAAI,QAAQ,GAAG,KAAK,CAAC;AACzB,IAAI,SAAS,iBAAiB,GAAG;AACjC,QAAQ,IAAI,gBAAgB,GAAG,CAAC,EAAE;AAClC,YAAY,OAAO,MAAM,CAAC,GAAG,EAAE,gBAAgB,CAAC,GAAG,MAAM,CAAC,WAAW,EAAE,kBAAkB,GAAG,WAAW,CAAC,CAAC;AACzG,SAAS;AACT,QAAQ,MAAM,cAAc,GAAG,WAAW,CAAC,MAAM,IAAI,kBAAkB,GAAG,WAAW,CAAC,CAAC;AACvF,QAAQ,IAAI,CAAC,oBAAoB,IAAI,cAAc,GAAG,0BAA0B,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE;AAC1G,YAAY,OAAO,GAAG,GAAG,MAAM,CAAC,WAAW,EAAE,kBAAkB,GAAG,WAAW,CAAC,CAAC;AAC/E,SAAS;AACT,QAAQ,IAAI,cAAc,IAAI,CAAC,EAAE;AACjC,YAAY,OAAO,GAAG,CAAC;AACvB,SAAS;AACT,QAAQ,OAAO,0BAA0B,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC;AAC3E,KAAK;AACL,IAAI,SAAS,QAAQ,GAAG;AACxB,QAAQ,IAAI,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;AACnC,QAAQ,gBAAgB,GAAG,CAAC,CAAC;AAC7B,QAAQ,OAAO,KAAK,KAAK,EAAE,4BAA4B,KAAK,KAAK,EAAE,mCAAmC;AACtG,YAAY,IAAI,KAAK,KAAK,EAAE,qCAAqC,OAAO,CAAC,SAAS,EAAE;AACpF,gBAAgB,gBAAgB,IAAI,CAAC,CAAC;AACtC,aAAa;AACb,iBAAiB,IAAI,KAAK,KAAK,EAAE,mCAAmC;AACpE,gBAAgB,gBAAgB,GAAG,CAAC,CAAC;AACrC,aAAa;AACb,YAAY,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;AACnC,SAAS;AACT,QAAQ,QAAQ,GAAG,KAAK,KAAK,EAAE,6BAA6B,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,sBAAsB;AAC/G,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL,IAAI,MAAM,cAAc,GAAG,EAAE,CAAC;AAC9B,IAAI,SAAS,OAAO,CAAC,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE;AACnD,QAAQ,IAAI,CAAC,QAAQ,KAAK,CAAC,KAAK,KAAK,WAAW,GAAG,QAAQ,IAAI,SAAS,GAAG,UAAU,CAAC,CAAC,IAAI,YAAY,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,KAAK,IAAI,EAAE;AACpJ,YAAY,cAAc,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,SAAS,GAAG,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;AACzG,SAAS;AACT,KAAK;AACL,IAAI,IAAI,UAAU,GAAG,QAAQ,EAAE,CAAC;AAChC,IAAI,IAAI,OAAO,CAAC,SAAS,IAAI,gBAAgB,GAAG,CAAC,EAAE;AACnD,QAAQ,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,gBAAgB,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACrD,KAAK;AACL,IAAI,IAAI,UAAU,KAAK,EAAE,uBAAuB;AAChD,QAAQ,IAAI,eAAe,GAAG,OAAO,CAAC,cAAc,EAAE,GAAG,eAAe,CAAC;AACzE,QAAQ,IAAI,aAAa,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,kBAAkB,GAAG,EAAE,KAAK,OAAO,CAAC,YAAY;AAClG,cAAc,YAAY,CAAC,WAAW,CAAC,MAAM,GAAG,kBAAkB,CAAC;AACnE,cAAc,MAAM,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;AACtD,QAAQ,OAAO,CAAC,aAAa,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;AACjE,KAAK;AACL,IAAI,OAAO,UAAU,KAAK,EAAE,uBAAuB;AACnD,QAAQ,IAAI,aAAa,GAAG,OAAO,CAAC,cAAc,EAAE,GAAG,OAAO,CAAC,cAAc,EAAE,GAAG,eAAe,CAAC;AAClG,QAAQ,IAAI,WAAW,GAAG,QAAQ,EAAE,CAAC;AACrC,QAAQ,IAAI,cAAc,GAAG,EAAE,CAAC;AAChC,QAAQ,IAAI,cAAc,GAAG,KAAK,CAAC;AACnC,QAAQ,OAAO,gBAAgB,KAAK,CAAC,KAAK,WAAW,KAAK,EAAE,uCAAuC,WAAW,KAAK,EAAE,qCAAqC,EAAE;AAC5J,YAAY,IAAI,iBAAiB,GAAG,OAAO,CAAC,cAAc,EAAE,GAAG,eAAe,CAAC;AAC/E,YAAY,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;AACvE,YAAY,aAAa,GAAG,OAAO,CAAC,cAAc,EAAE,GAAG,OAAO,CAAC,cAAc,EAAE,GAAG,eAAe,CAAC;AAClG,YAAY,cAAc,GAAG,WAAW,KAAK,EAAE,oCAAoC;AACnF,YAAY,cAAc,GAAG,cAAc,GAAG,iBAAiB,EAAE,GAAG,EAAE,CAAC;AACvE,YAAY,WAAW,GAAG,QAAQ,EAAE,CAAC;AACrC,SAAS;AACT,QAAQ,IAAI,WAAW,KAAK,CAAC,mCAAmC;AAChE,YAAY,IAAI,UAAU,KAAK,CAAC,kCAAkC;AAClE,gBAAgB,WAAW,EAAE,CAAC;AAC9B,aAAa;AAEb,YAAY,IAAI,OAAO,CAAC,SAAS,IAAI,gBAAgB,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,UAAU,KAAK,CAAC,kCAAkC;AACrI,gBAAgB,cAAc,GAAG,iBAAiB,EAAE,CAAC;AACrD,aAAa;AACb,iBAAiB,IAAI,OAAO,CAAC,SAAS,EAAE;AACxC,gBAAgB,cAAc,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AACjD,aAAa;AACb,SAAS;AACT,aAAa,IAAI,WAAW,KAAK,CAAC,qCAAqC;AACvE,YAAY,IAAI,UAAU,KAAK,CAAC,oCAAoC;AACpE,gBAAgB,WAAW,EAAE,CAAC;AAC9B,aAAa;AAEb,YAAY,IAAI,OAAO,CAAC,SAAS,IAAI,gBAAgB,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,UAAU,KAAK,CAAC,oCAAoC;AACvI,gBAAgB,cAAc,GAAG,iBAAiB,EAAE,CAAC;AACrD,aAAa;AACb,iBAAiB,IAAI,OAAO,CAAC,SAAS,EAAE;AACxC,gBAAgB,cAAc,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AACjD,aAAa;AACb,SAAS;AACT,aAAa;AACb,YAAY,QAAQ,UAAU;AAC9B,gBAAgB,KAAK,CAAC,mCAAmC;AACzD,gBAAgB,KAAK,CAAC;AACtB,oBAAoB,WAAW,EAAE,CAAC;AAClC,oBAAoB,IAAI,OAAO,CAAC,SAAS,IAAI,gBAAgB,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;AACzF,wBAAwB,cAAc,GAAG,iBAAiB,EAAE,CAAC;AAC7D,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,cAAc,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AACzD,qBAAqB;AACrB,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,CAAC;AACtB,oBAAoB,IAAI,OAAO,CAAC,SAAS,IAAI,gBAAgB,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;AACzF,wBAAwB,cAAc,GAAG,iBAAiB,EAAE,CAAC;AAC7D,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,cAAc,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AACzD,qBAAqB;AACrB,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,EAAE;AACvB,oBAAoB,cAAc,GAAG,iBAAiB,EAAE,CAAC;AACzD,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,EAAE;AACvB,oBAAoB,IAAI,gBAAgB,GAAG,CAAC,EAAE;AAC9C,wBAAwB,cAAc,GAAG,iBAAiB,EAAE,CAAC;AAC7D,qBAAqB;AACrB,yBAAyB,IAAI,CAAC,cAAc,EAAE;AAC9C,wBAAwB,cAAc,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AACzD,qBAAqB;AACrB,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,CAAC;AACtB,oBAAoB,IAAI,OAAO,CAAC,SAAS,IAAI,gBAAgB,GAAG,CAAC,EAAE;AACnE,wBAAwB,cAAc,GAAG,iBAAiB,EAAE,CAAC;AAC7D,qBAAqB;AACrB,yBAAyB,IAAI,CAAC,cAAc,EAAE;AAC9C,wBAAwB,cAAc,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AACzD,qBAAqB;AACrB,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,EAAE;AACvB,oBAAoB,IAAI,OAAO,CAAC,SAAS,IAAI,gBAAgB,GAAG,CAAC,EAAE;AACnE,wBAAwB,cAAc,GAAG,iBAAiB,EAAE,CAAC;AAC7D,qBAAqB;AACrB,yBAAyB,IAAI,WAAW,KAAK,CAAC,gCAAgC,CAAC,cAAc,EAAE;AAC/F,wBAAwB,cAAc,GAAG,EAAE,CAAC;AAC5C,qBAAqB;AACrB,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,CAAC,8BAA8B;AACpD,gBAAgB,KAAK,CAAC,8BAA8B;AACpD,gBAAgB,KAAK,CAAC,+BAA+B;AACrD,gBAAgB,KAAK,EAAE,iCAAiC;AACxD,gBAAgB,KAAK,CAAC,kCAAkC;AACxD,gBAAgB,KAAK,CAAC;AACtB,oBAAoB,IAAI,OAAO,CAAC,SAAS,IAAI,gBAAgB,GAAG,CAAC,EAAE;AACnE,wBAAwB,cAAc,GAAG,iBAAiB,EAAE,CAAC;AAC7D,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,IAAI,CAAC,WAAW,KAAK,EAAE,uCAAuC,WAAW,KAAK,EAAE,yCAAyC,CAAC,cAAc,EAAE;AAClK,4BAA4B,cAAc,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AAC7D,yBAAyB;AACzB,6BAA6B,IAAI,WAAW,KAAK,CAAC,gCAAgC,WAAW,KAAK,EAAE,uBAAuB;AAC3H,4BAA4B,QAAQ,GAAG,IAAI,CAAC;AAC5C,yBAAyB;AACzB,qBAAqB;AACrB,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,EAAE;AACvB,oBAAoB,QAAQ,GAAG,IAAI,CAAC;AACpC,oBAAoB,MAAM;AAC1B,aAAa;AACb,YAAY,IAAI,gBAAgB,GAAG,CAAC,KAAK,WAAW,KAAK,EAAE,uCAAuC,WAAW,KAAK,EAAE,qCAAqC,EAAE;AAC3J,gBAAgB,cAAc,GAAG,iBAAiB,EAAE,CAAC;AACrD,aAAa;AACb,SAAS;AACT,QAAQ,IAAI,WAAW,KAAK,EAAE,uBAAuB;AACrD,YAAY,IAAI,OAAO,CAAC,SAAS,IAAI,gBAAgB,GAAG,CAAC,EAAE;AAC3D,gBAAgB,cAAc,GAAG,iBAAiB,EAAE,CAAC;AACrD,aAAa;AACb,iBAAiB;AACjB,gBAAgB,cAAc,GAAG,OAAO,CAAC,kBAAkB,GAAG,GAAG,GAAG,EAAE,CAAC;AACvE,aAAa;AACb,SAAS;AACT,QAAQ,MAAM,gBAAgB,GAAG,OAAO,CAAC,cAAc,EAAE,GAAG,eAAe,CAAC;AAC5E,QAAQ,OAAO,CAAC,cAAc,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;AACjE,QAAQ,UAAU,GAAG,WAAW,CAAC;AACjC,KAAK;AACL,IAAI,OAAO,cAAc,CAAC;AAC1B,CAAC;AACD,SAAS,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE;AAC1B,IAAI,IAAI,MAAM,GAAG,EAAE,CAAC;AACpB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;AACpC,QAAQ,MAAM,IAAI,CAAC,CAAC;AACpB,KAAK;AACL,IAAI,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,SAAS,kBAAkB,CAAC,OAAO,EAAE,OAAO,EAAE;AAC9C,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AACd,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;AACnB,IAAI,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,CAAC,CAAC;AACzC,IAAI,OAAO,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE;AAC/B,QAAQ,IAAI,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACnC,QAAQ,IAAI,EAAE,KAAK,YAAY,CAAC,CAAC,CAAC,EAAE;AACpC,YAAY,MAAM,EAAE,CAAC;AACrB,SAAS;AACT,aAAa,IAAI,EAAE,KAAK,IAAI,EAAE;AAC9B,YAAY,MAAM,IAAI,OAAO,CAAC;AAC9B,SAAS;AACT,aAAa;AACb,YAAY,MAAM;AAClB,SAAS;AACT,QAAQ,CAAC,EAAE,CAAC;AACZ,KAAK;AACL,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC;AACxC,CAAC;AACD,SAAS,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE;AAC/B,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1C,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAClC,QAAQ,IAAI,EAAE,KAAK,IAAI,EAAE;AACzB,YAAY,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;AACpE,gBAAgB,OAAO,MAAM,CAAC;AAC9B,aAAa;AACb,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS;AACT,aAAa,IAAI,EAAE,KAAK,IAAI,EAAE;AAC9B,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS;AACT,KAAK;AACL,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,KAAK,IAAI,CAAC;AAC5C,CAAC;AACM,SAAS,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE;AACpC,IAAI,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACtD;;ACpQA;AACA;AACA;AACA;AAGA,IAAI,YAAY,CAAC;AACjB,CAAC,UAAU,YAAY,EAAE;AACzB,IAAI,YAAY,CAAC,OAAO,GAAG;AAC3B,QAAQ,kBAAkB,EAAE,KAAK;AACjC,KAAK,CAAC;AACN,CAAC,EAAE,YAAY,KAAK,YAAY,GAAG,EAAE,CAAC,CAAC,CAAC;AACxC;AACA;AACA;AACO,SAASE,aAAW,CAAC,IAAI,EAAE,QAAQ,EAAE;AAC5C,IAAI,MAAM,QAAQ,GAAG,EAAE,CAAC;AACxB,IAAI,MAAM,oBAAoB,GAAG,IAAI,MAAM,EAAE,CAAC;AAC9C,IAAI,IAAI,YAAY,GAAG,SAAS,CAAC;AACjC,IAAI,MAAM,gBAAgB,GAAG;AAC7B,QAAQ,KAAK,EAAE,EAAE;AACjB,QAAQ,MAAM,EAAE,CAAC;AACjB,QAAQ,MAAM,EAAE,CAAC;AACjB,QAAQ,IAAI,EAAE,QAAQ;AACtB,QAAQ,MAAM,EAAE,SAAS;AACzB,KAAK,CAAC;AACN,IAAI,IAAI,eAAe,GAAG,KAAK,CAAC;AAChC,IAAI,SAAS,eAAe,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE;AAC1D,QAAQ,gBAAgB,CAAC,KAAK,GAAG,KAAK,CAAC;AACvC,QAAQ,gBAAgB,CAAC,MAAM,GAAG,MAAM,CAAC;AACzC,QAAQ,gBAAgB,CAAC,MAAM,GAAG,MAAM,CAAC;AACzC,QAAQ,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC;AACrC,QAAQ,gBAAgB,CAAC,WAAW,GAAG,SAAS,CAAC;AACjD,QAAQ,YAAY,GAAG,gBAAgB,CAAC;AACxC,KAAK;AACL,IAAI,IAAI;AACR,QAAQC,OAAK,CAAC,IAAI,EAAE;AACpB,YAAY,aAAa,EAAE,CAAC,MAAM,EAAE,MAAM,KAAK;AAC/C,gBAAgB,IAAI,QAAQ,IAAI,MAAM,EAAE;AACxC,oBAAoB,MAAM,oBAAoB,CAAC;AAC/C,iBAAiB;AACjB,gBAAgB,YAAY,GAAG,SAAS,CAAC;AACzC,gBAAgB,eAAe,GAAG,QAAQ,GAAG,MAAM,CAAC;AACpD,gBAAgB,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAClC,aAAa;AACb,YAAY,gBAAgB,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,KAAK;AACxD,gBAAgB,IAAI,QAAQ,GAAG,MAAM,EAAE;AACvC,oBAAoB,MAAM,oBAAoB,CAAC;AAC/C,iBAAiB;AACjB,gBAAgB,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;AAClE,gBAAgB,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACrD,gBAAgB,IAAI,QAAQ,IAAI,MAAM,GAAG,MAAM,EAAE;AACjD,oBAAoB,MAAM,oBAAoB,CAAC;AAC/C,iBAAiB;AACjB,aAAa;AACb,YAAY,WAAW,EAAE,CAAC,MAAM,EAAE,MAAM,KAAK;AAC7C,gBAAgB,IAAI,QAAQ,IAAI,MAAM,EAAE;AACxC,oBAAoB,MAAM,oBAAoB,CAAC;AAC/C,iBAAiB;AACjB,gBAAgB,YAAY,GAAG,SAAS,CAAC;AACzC,gBAAgB,QAAQ,CAAC,GAAG,EAAE,CAAC;AAC/B,aAAa;AACb,YAAY,YAAY,EAAE,CAAC,MAAM,EAAE,MAAM,KAAK;AAC9C,gBAAgB,IAAI,QAAQ,IAAI,MAAM,EAAE;AACxC,oBAAoB,MAAM,oBAAoB,CAAC;AAC/C,iBAAiB;AACjB,gBAAgB,YAAY,GAAG,SAAS,CAAC;AACzC,gBAAgB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjC,aAAa;AACb,YAAY,UAAU,EAAE,CAAC,MAAM,EAAE,MAAM,KAAK;AAC5C,gBAAgB,IAAI,QAAQ,IAAI,MAAM,EAAE;AACxC,oBAAoB,MAAM,oBAAoB,CAAC;AAC/C,iBAAiB;AACjB,gBAAgB,YAAY,GAAG,SAAS,CAAC;AACzC,gBAAgB,QAAQ,CAAC,GAAG,EAAE,CAAC;AAC/B,aAAa;AACb,YAAY,cAAc,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,KAAK;AACvD,gBAAgB,IAAI,QAAQ,GAAG,MAAM,EAAE;AACvC,oBAAoB,MAAM,oBAAoB,CAAC;AAC/C,iBAAiB;AACjB,gBAAgB,eAAe,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3E,gBAAgB,IAAI,QAAQ,IAAI,MAAM,GAAG,MAAM,EAAE;AACjD,oBAAoB,MAAM,oBAAoB,CAAC;AAC/C,iBAAiB;AACjB,aAAa;AACb,YAAY,WAAW,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,KAAK;AAClD,gBAAgB,IAAI,QAAQ,IAAI,MAAM,EAAE;AACxC,oBAAoB,MAAM,oBAAoB,CAAC;AAC/C,iBAAiB;AACjB,gBAAgB,IAAI,GAAG,KAAK,GAAG,IAAI,YAAY,IAAI,YAAY,CAAC,IAAI,KAAK,UAAU,EAAE;AACrF,oBAAoB,YAAY,CAAC,WAAW,GAAG,MAAM,CAAC;AACtD,oBAAoB,eAAe,GAAG,KAAK,CAAC;AAC5C,oBAAoB,YAAY,GAAG,SAAS,CAAC;AAC7C,iBAAiB;AACjB,qBAAqB,IAAI,GAAG,KAAK,GAAG,EAAE;AACtC,oBAAoB,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAC/D,oBAAoB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAClD,wBAAwB,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;AACjE,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,eAAe,GAAG,IAAI,CAAC;AAC/C,wBAAwB,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;AAC3D,qBAAqB;AACrB,oBAAoB,YAAY,GAAG,SAAS,CAAC;AAC7C,iBAAiB;AACjB,aAAa;AACb,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,OAAO,CAAC,EAAE;AACd,QAAQ,IAAI,CAAC,KAAK,oBAAoB,EAAE;AACxC,YAAY,MAAM,CAAC,CAAC;AACpB,SAAS;AACT,KAAK;AACL,IAAI,OAAO;AACX,QAAQ,IAAI,EAAE,QAAQ;AACtB,QAAQ,YAAY;AACpB,QAAQ,eAAe;AACvB,QAAQ,OAAO,EAAE,CAAC,OAAO,KAAK;AAC9B,YAAY,IAAI,CAAC,GAAG,CAAC,CAAC;AACtB,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC5E,gBAAgB,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;AACtE,oBAAoB,CAAC,EAAE,CAAC;AACxB,iBAAiB;AACjB,qBAAqB,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AAC9C,oBAAoB,OAAO,KAAK,CAAC;AACjC,iBAAiB;AACjB,aAAa;AACb,YAAY,OAAO,CAAC,KAAK,OAAO,CAAC,MAAM,CAAC;AACxC,SAAS;AACT,KAAK,CAAC;AACN,CAAC;AACD;AACA;AACA;AACA;AACO,SAASC,OAAK,CAAC,IAAI,EAAE,MAAM,GAAG,EAAE,EAAE,OAAO,GAAG,YAAY,CAAC,OAAO,EAAE;AACzE,IAAI,IAAI,eAAe,GAAG,IAAI,CAAC;AAC/B,IAAI,IAAI,aAAa,GAAG,EAAE,CAAC;AAC3B,IAAI,MAAM,eAAe,GAAG,EAAE,CAAC;AAC/B,IAAI,SAAS,OAAO,CAAC,KAAK,EAAE;AAC5B,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;AAC1C,YAAY,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACtC,SAAS;AACT,aAAa,IAAI,eAAe,KAAK,IAAI,EAAE;AAC3C,YAAY,aAAa,CAAC,eAAe,CAAC,GAAG,KAAK,CAAC;AACnD,SAAS;AACT,KAAK;AACL,IAAI,MAAM,OAAO,GAAG;AACpB,QAAQ,aAAa,EAAE,MAAM;AAC7B,YAAY,MAAM,MAAM,GAAG,EAAE,CAAC;AAC9B,YAAY,OAAO,CAAC,MAAM,CAAC,CAAC;AAC5B,YAAY,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAChD,YAAY,aAAa,GAAG,MAAM,CAAC;AACnC,YAAY,eAAe,GAAG,IAAI,CAAC;AACnC,SAAS;AACT,QAAQ,gBAAgB,EAAE,CAAC,IAAI,KAAK;AACpC,YAAY,eAAe,GAAG,IAAI,CAAC;AACnC,SAAS;AACT,QAAQ,WAAW,EAAE,MAAM;AAC3B,YAAY,aAAa,GAAG,eAAe,CAAC,GAAG,EAAE,CAAC;AAClD,SAAS;AACT,QAAQ,YAAY,EAAE,MAAM;AAC5B,YAAY,MAAM,KAAK,GAAG,EAAE,CAAC;AAC7B,YAAY,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,YAAY,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAChD,YAAY,aAAa,GAAG,KAAK,CAAC;AAClC,YAAY,eAAe,GAAG,IAAI,CAAC;AACnC,SAAS;AACT,QAAQ,UAAU,EAAE,MAAM;AAC1B,YAAY,aAAa,GAAG,eAAe,CAAC,GAAG,EAAE,CAAC;AAClD,SAAS;AACT,QAAQ,cAAc,EAAE,OAAO;AAC/B,QAAQ,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,KAAK;AAC5C,YAAY,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;AACnD,SAAS;AACT,KAAK,CAAC;AACN,IAAID,OAAK,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AAClC,IAAI,OAAO,aAAa,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC;AACD;AACA;AACA;AACO,SAASE,WAAS,CAAC,IAAI,EAAE,MAAM,GAAG,EAAE,EAAE,OAAO,GAAG,YAAY,CAAC,OAAO,EAAE;AAC7E,IAAI,IAAI,aAAa,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;AACnG,IAAI,SAAS,sBAAsB,CAAC,SAAS,EAAE;AAC/C,QAAQ,IAAI,aAAa,CAAC,IAAI,KAAK,UAAU,EAAE;AAC/C,YAAY,aAAa,CAAC,MAAM,GAAG,SAAS,GAAG,aAAa,CAAC,MAAM,CAAC;AACpE,YAAY,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC;AACjD,SAAS;AACT,KAAK;AACL,IAAI,SAAS,OAAO,CAAC,SAAS,EAAE;AAChC,QAAQ,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC/C,QAAQ,OAAO,SAAS,CAAC;AACzB,KAAK;AACL,IAAI,MAAM,OAAO,GAAG;AACpB,QAAQ,aAAa,EAAE,CAAC,MAAM,KAAK;AACnC,YAAY,aAAa,GAAG,OAAO,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;AACjH,SAAS;AACT,QAAQ,gBAAgB,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,KAAK;AACpD,YAAY,aAAa,GAAG,OAAO,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;AACnH,YAAY,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;AAChH,SAAS;AACT,QAAQ,WAAW,EAAE,CAAC,MAAM,EAAE,MAAM,KAAK;AACzC,YAAY,sBAAsB,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;AACpD,YAAY,aAAa,CAAC,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;AAC1E,YAAY,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC;AACjD,YAAY,sBAAsB,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;AACpD,SAAS;AACT,QAAQ,YAAY,EAAE,CAAC,MAAM,EAAE,MAAM,KAAK;AAC1C,YAAY,aAAa,GAAG,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;AAChH,SAAS;AACT,QAAQ,UAAU,EAAE,CAAC,MAAM,EAAE,MAAM,KAAK;AACxC,YAAY,aAAa,CAAC,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;AAC1E,YAAY,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC;AACjD,YAAY,sBAAsB,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;AACpD,SAAS;AACT,QAAQ,cAAc,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,KAAK;AACnD,YAAY,OAAO,CAAC,EAAE,IAAI,EAAE,WAAW,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC;AAChG,YAAY,sBAAsB,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;AACpD,SAAS;AACT,QAAQ,WAAW,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,KAAK;AAC9C,YAAY,IAAI,aAAa,CAAC,IAAI,KAAK,UAAU,EAAE;AACnD,gBAAgB,IAAI,GAAG,KAAK,GAAG,EAAE;AACjC,oBAAoB,aAAa,CAAC,WAAW,GAAG,MAAM,CAAC;AACvD,iBAAiB;AACjB,qBAAqB,IAAI,GAAG,KAAK,GAAG,EAAE;AACtC,oBAAoB,sBAAsB,CAAC,MAAM,CAAC,CAAC;AACnD,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,QAAQ,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,KAAK;AAC5C,YAAY,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;AACnD,SAAS;AACT,KAAK,CAAC;AACN,IAAIF,OAAK,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AAClC,IAAI,MAAM,MAAM,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC7C,IAAI,IAAI,MAAM,EAAE;AAChB,QAAQ,OAAO,MAAM,CAAC,MAAM,CAAC;AAC7B,KAAK;AACL,IAAI,OAAO,MAAM,CAAC;AAClB,CAAC;AACD;AACA;AACA;AACO,SAASG,oBAAkB,CAAC,IAAI,EAAE,IAAI,EAAE;AAC/C,IAAI,IAAI,CAAC,IAAI,EAAE;AACf,QAAQ,OAAO,SAAS,CAAC;AACzB,KAAK;AACL,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC;AACpB,IAAI,KAAK,IAAI,OAAO,IAAI,IAAI,EAAE;AAC9B,QAAQ,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AACzC,YAAY,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AACzE,gBAAgB,OAAO,SAAS,CAAC;AACjC,aAAa;AACb,YAAY,IAAI,KAAK,GAAG,KAAK,CAAC;AAC9B,YAAY,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,QAAQ,EAAE;AACtD,gBAAgB,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,OAAO,IAAI,YAAY,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AAC9I,oBAAoB,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpD,oBAAoB,KAAK,GAAG,IAAI,CAAC;AACjC,oBAAoB,MAAM;AAC1B,iBAAiB;AACjB,aAAa;AACb,YAAY,IAAI,CAAC,KAAK,EAAE;AACxB,gBAAgB,OAAO,SAAS,CAAC;AACjC,aAAa;AACb,SAAS;AACT,aAAa;AACb,YAAY,MAAM,KAAK,GAAG,OAAO,CAAC;AAClC,YAAY,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;AACtH,gBAAgB,OAAO,SAAS,CAAC;AACjC,aAAa;AACb,YAAY,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACxC,SAAS;AACT,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB,CAAC;AACD;AACA;AACA;AACO,SAASC,aAAW,CAAC,IAAI,EAAE;AAClC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;AAC/C,QAAQ,OAAO,EAAE,CAAC;AAClB,KAAK;AACL,IAAI,MAAM,IAAI,GAAGA,aAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC1C,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;AACzC,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AAClD,QAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACvB,KAAK;AACL,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AAC3C,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACzD,QAAQ,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;AAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7B,SAAS;AACT,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB,CAAC;AACD;AACA;AACA;AACO,SAASC,cAAY,CAAC,IAAI,EAAE;AACnC,IAAI,QAAQ,IAAI,CAAC,IAAI;AACrB,QAAQ,KAAK,OAAO;AACpB,YAAY,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAACA,cAAY,CAAC,CAAC;AACnD,QAAQ,KAAK,QAAQ;AACrB,YAAY,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC5C,YAAY,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC5C,gBAAgB,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACnD,gBAAgB,IAAI,SAAS,EAAE;AAC/B,oBAAoB,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAGA,cAAY,CAAC,SAAS,CAAC,CAAC;AAC1E,iBAAiB;AACjB,aAAa;AACb,YAAY,OAAO,GAAG,CAAC;AACvB,QAAQ,KAAK,MAAM,CAAC;AACpB,QAAQ,KAAK,QAAQ,CAAC;AACtB,QAAQ,KAAK,QAAQ,CAAC;AACtB,QAAQ,KAAK,SAAS;AACtB,YAAY,OAAO,IAAI,CAAC,KAAK,CAAC;AAC9B,QAAQ;AACR,YAAY,OAAO,SAAS,CAAC;AAC7B,KAAK;AACL,CAAC;AACM,SAAS,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,iBAAiB,GAAG,KAAK,EAAE;AAClE,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,iBAAiB,KAAK,MAAM,MAAM,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;AAC5I,CAAC;AACD;AACA;AACA;AACO,SAASC,kBAAgB,CAAC,IAAI,EAAE,MAAM,EAAE,iBAAiB,GAAG,KAAK,EAAE;AAC1E,IAAI,IAAI,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,iBAAiB,CAAC,EAAE;AACnD,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACvC,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;AACrC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,EAAE,CAAC,EAAE,EAAE;AACtF,gBAAgB,MAAM,IAAI,GAAGA,kBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;AACtF,gBAAgB,IAAI,IAAI,EAAE;AAC1B,oBAAoB,OAAO,IAAI,CAAC;AAChC,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,OAAO,SAAS,CAAC;AACrB,CAAC;AACD;AACA;AACA;AACO,SAASN,OAAK,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,GAAG,YAAY,CAAC,OAAO,EAAE;AACrE,IAAI,MAAM,QAAQ,GAAGH,eAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAChD;AACA;AACA,IAAI,MAAM,SAAS,GAAG,EAAE,CAAC;AACzB;AACA;AACA,IAAI,IAAI,mBAAmB,GAAG,CAAC,CAAC;AAChC,IAAI,SAAS,YAAY,CAAC,aAAa,EAAE;AACzC,QAAQ,OAAO,aAAa,GAAG,MAAM,mBAAmB,KAAK,CAAC,IAAI,aAAa,CAAC,QAAQ,CAAC,cAAc,EAAE,EAAE,QAAQ,CAAC,cAAc,EAAE,EAAE,QAAQ,CAAC,iBAAiB,EAAE,EAAE,QAAQ,CAAC,sBAAsB,EAAE,CAAC,GAAG,MAAM,IAAI,CAAC;AACpN,KAAK;AACL,IAAI,SAAS,aAAa,CAAC,aAAa,EAAE;AAC1C,QAAQ,OAAO,aAAa,GAAG,CAAC,GAAG,KAAK,mBAAmB,KAAK,CAAC,IAAI,aAAa,CAAC,GAAG,EAAE,QAAQ,CAAC,cAAc,EAAE,EAAE,QAAQ,CAAC,cAAc,EAAE,EAAE,QAAQ,CAAC,iBAAiB,EAAE,EAAE,QAAQ,CAAC,sBAAsB,EAAE,CAAC,GAAG,MAAM,IAAI,CAAC;AAC5N,KAAK;AACL,IAAI,SAAS,qBAAqB,CAAC,aAAa,EAAE;AAClD,QAAQ,OAAO,aAAa,GAAG,CAAC,GAAG,KAAK,mBAAmB,KAAK,CAAC,IAAI,aAAa,CAAC,GAAG,EAAE,QAAQ,CAAC,cAAc,EAAE,EAAE,QAAQ,CAAC,cAAc,EAAE,EAAE,QAAQ,CAAC,iBAAiB,EAAE,EAAE,QAAQ,CAAC,sBAAsB,EAAE,EAAE,MAAM,SAAS,CAAC,KAAK,EAAE,CAAC,GAAG,MAAM,IAAI,CAAC;AACrP,KAAK;AACL,IAAI,SAAS,YAAY,CAAC,aAAa,EAAE;AACzC,QAAQ,OAAO,aAAa;AAC5B,YAAY,MAAM;AAClB,gBAAgB,IAAI,mBAAmB,GAAG,CAAC,EAAE;AAC7C,oBAAoB,mBAAmB,EAAE,CAAC;AAC1C,iBAAiB;AACjB,qBAAqB;AACrB,oBAAoB,IAAI,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC,cAAc,EAAE,EAAE,QAAQ,CAAC,cAAc,EAAE,EAAE,QAAQ,CAAC,iBAAiB,EAAE,EAAE,QAAQ,CAAC,sBAAsB,EAAE,EAAE,MAAM,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC;AACjM,oBAAoB,IAAI,QAAQ,KAAK,KAAK,EAAE;AAC5C,wBAAwB,mBAAmB,GAAG,CAAC,CAAC;AAChD,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,cAAc,MAAM,IAAI,CAAC;AACzB,KAAK;AACL,IAAI,SAAS,UAAU,CAAC,aAAa,EAAE;AACvC,QAAQ,OAAO,aAAa;AAC5B,YAAY,MAAM;AAClB,gBAAgB,IAAI,mBAAmB,GAAG,CAAC,EAAE;AAC7C,oBAAoB,mBAAmB,EAAE,CAAC;AAC1C,iBAAiB;AACjB,gBAAgB,IAAI,mBAAmB,KAAK,CAAC,EAAE;AAC/C,oBAAoB,aAAa,CAAC,QAAQ,CAAC,cAAc,EAAE,EAAE,QAAQ,CAAC,cAAc,EAAE,EAAE,QAAQ,CAAC,iBAAiB,EAAE,EAAE,QAAQ,CAAC,sBAAsB,EAAE,CAAC,CAAC;AACzJ,iBAAiB;AACjB,aAAa;AACb,cAAc,MAAM,IAAI,CAAC;AACzB,KAAK;AACL,IAAI,MAAM,aAAa,GAAG,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,gBAAgB,GAAG,qBAAqB,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,WAAW,GAAG,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,cAAc,GAAG,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AAC1d,IAAI,MAAM,gBAAgB,GAAG,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;AACjE,IAAI,MAAM,kBAAkB,GAAG,OAAO,IAAI,OAAO,CAAC,kBAAkB,CAAC;AACrE,IAAI,SAAS,QAAQ,GAAG;AACxB,QAAQ,OAAO,IAAI,EAAE;AACrB,YAAY,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;AAC1C,YAAY,QAAQ,QAAQ,CAAC,aAAa,EAAE;AAC5C,gBAAgB,KAAK,CAAC;AACtB,oBAAoB,WAAW,CAAC,EAAE,qCAAqC,CAAC;AACxE,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,CAAC;AACtB,oBAAoB,WAAW,CAAC,EAAE,6CAA6C,CAAC;AAChF,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,CAAC;AACtB,oBAAoB,WAAW,CAAC,EAAE,4CAA4C,CAAC;AAC/E,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,CAAC;AACtB,oBAAoB,IAAI,CAAC,gBAAgB,EAAE;AAC3C,wBAAwB,WAAW,CAAC,EAAE,6CAA6C,CAAC;AACpF,qBAAqB;AACrB,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,CAAC;AACtB,oBAAoB,WAAW,CAAC,EAAE,4CAA4C,CAAC;AAC/E,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,CAAC;AACtB,oBAAoB,WAAW,CAAC,EAAE,uCAAuC,CAAC;AAC1E,oBAAoB,MAAM;AAC1B,aAAa;AACb,YAAY,QAAQ,KAAK;AACzB,gBAAgB,KAAK,EAAE,oCAAoC;AAC3D,gBAAgB,KAAK,EAAE;AACvB,oBAAoB,IAAI,gBAAgB,EAAE;AAC1C,wBAAwB,WAAW,CAAC,EAAE,0CAA0C,CAAC;AACjF,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,SAAS,EAAE,CAAC;AACpC,qBAAqB;AACrB,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,EAAE;AACvB,oBAAoB,WAAW,CAAC,CAAC,oCAAoC,CAAC;AACtE,oBAAoB,MAAM;AAC1B,gBAAgB,KAAK,EAAE,yBAAyB;AAChD,gBAAgB,KAAK,EAAE;AACvB,oBAAoB,MAAM;AAC1B,gBAAgB;AAChB,oBAAoB,OAAO,KAAK,CAAC;AACjC,aAAa;AACb,SAAS;AACT,KAAK;AACL,IAAI,SAAS,WAAW,CAAC,KAAK,EAAE,cAAc,GAAG,EAAE,EAAE,SAAS,GAAG,EAAE,EAAE;AACrE,QAAQ,OAAO,CAAC,KAAK,CAAC,CAAC;AACvB,QAAQ,IAAI,cAAc,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AAC1D,YAAY,IAAI,KAAK,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;AAC5C,YAAY,OAAO,KAAK,KAAK,EAAE,uBAAuB;AACtD,gBAAgB,IAAI,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;AAC1D,oBAAoB,QAAQ,EAAE,CAAC;AAC/B,oBAAoB,MAAM;AAC1B,iBAAiB;AACjB,qBAAqB,IAAI,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;AAC1D,oBAAoB,MAAM;AAC1B,iBAAiB;AACjB,gBAAgB,KAAK,GAAG,QAAQ,EAAE,CAAC;AACnC,aAAa;AACb,SAAS;AACT,KAAK;AACL,IAAI,SAAS,WAAW,CAAC,OAAO,EAAE;AAClC,QAAQ,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;AAC/C,QAAQ,IAAI,OAAO,EAAE;AACrB,YAAY,cAAc,CAAC,KAAK,CAAC,CAAC;AAClC,SAAS;AACT,aAAa;AACb,YAAY,gBAAgB,CAAC,KAAK,CAAC,CAAC;AACpC;AACA,YAAY,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAClC,SAAS;AACT,QAAQ,QAAQ,EAAE,CAAC;AACnB,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,SAAS,YAAY,GAAG;AAC5B,QAAQ,QAAQ,QAAQ,CAAC,QAAQ,EAAE;AACnC,YAAY,KAAK,EAAE;AACnB,gBAAgB,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;AAC5D,gBAAgB,IAAI,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AAC/C,gBAAgB,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;AAClC,oBAAoB,WAAW,CAAC,CAAC,0CAA0C,CAAC;AAC5E,oBAAoB,KAAK,GAAG,CAAC,CAAC;AAC9B,iBAAiB;AACjB,gBAAgB,cAAc,CAAC,KAAK,CAAC,CAAC;AACtC,gBAAgB,MAAM;AACtB,YAAY,KAAK,CAAC;AAClB,gBAAgB,cAAc,CAAC,IAAI,CAAC,CAAC;AACrC,gBAAgB,MAAM;AACtB,YAAY,KAAK,CAAC;AAClB,gBAAgB,cAAc,CAAC,IAAI,CAAC,CAAC;AACrC,gBAAgB,MAAM;AACtB,YAAY,KAAK,CAAC;AAClB,gBAAgB,cAAc,CAAC,KAAK,CAAC,CAAC;AACtC,gBAAgB,MAAM;AACtB,YAAY;AACZ,gBAAgB,OAAO,KAAK,CAAC;AAC7B,SAAS;AACT,QAAQ,QAAQ,EAAE,CAAC;AACnB,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,SAAS,aAAa,GAAG;AAC7B,QAAQ,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,iCAAiC;AACvE,YAAY,WAAW,CAAC,CAAC,4CAA4C,EAAE,EAAE,CAAC,CAAC,mCAAmC,CAAC,6BAA6B,CAAC,CAAC;AAC9I,YAAY,OAAO,KAAK,CAAC;AACzB,SAAS;AACT,QAAQ,WAAW,CAAC,KAAK,CAAC,CAAC;AAC3B,QAAQ,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,8BAA8B;AACnE,YAAY,WAAW,CAAC,GAAG,CAAC,CAAC;AAC7B,YAAY,QAAQ,EAAE,CAAC;AACvB,YAAY,IAAI,CAAC,UAAU,EAAE,EAAE;AAC/B,gBAAgB,WAAW,CAAC,CAAC,qCAAqC,EAAE,EAAE,CAAC,CAAC,mCAAmC,CAAC,6BAA6B,CAAC,CAAC;AAC3I,aAAa;AACb,SAAS;AACT,aAAa;AACb,YAAY,WAAW,CAAC,CAAC,qCAAqC,EAAE,EAAE,CAAC,CAAC,mCAAmC,CAAC,6BAA6B,CAAC,CAAC;AACvI,SAAS;AACT,QAAQ,SAAS,CAAC,GAAG,EAAE,CAAC;AACxB,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,SAAS,WAAW,GAAG;AAC3B,QAAQ,aAAa,EAAE,CAAC;AACxB,QAAQ,QAAQ,EAAE,CAAC;AACnB,QAAQ,IAAI,UAAU,GAAG,KAAK,CAAC;AAC/B,QAAQ,OAAO,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,qCAAqC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,uBAAuB;AAC9H,YAAY,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,8BAA8B;AACvE,gBAAgB,IAAI,CAAC,UAAU,EAAE;AACjC,oBAAoB,WAAW,CAAC,CAAC,qCAAqC,EAAE,EAAE,EAAE,CAAC,CAAC;AAC9E,iBAAiB;AACjB,gBAAgB,WAAW,CAAC,GAAG,CAAC,CAAC;AACjC,gBAAgB,QAAQ,EAAE,CAAC;AAC3B,gBAAgB,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,qCAAqC,kBAAkB,EAAE;AACtG,oBAAoB,MAAM;AAC1B,iBAAiB;AACjB,aAAa;AACb,iBAAiB,IAAI,UAAU,EAAE;AACjC,gBAAgB,WAAW,CAAC,CAAC,qCAAqC,EAAE,EAAE,EAAE,CAAC,CAAC;AAC1E,aAAa;AACb,YAAY,IAAI,CAAC,aAAa,EAAE,EAAE;AAClC,gBAAgB,WAAW,CAAC,CAAC,qCAAqC,EAAE,EAAE,CAAC,CAAC,mCAAmC,CAAC,6BAA6B,CAAC,CAAC;AAC3I,aAAa;AACb,YAAY,UAAU,GAAG,IAAI,CAAC;AAC9B,SAAS;AACT,QAAQ,WAAW,EAAE,CAAC;AACtB,QAAQ,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,mCAAmC;AACxE,YAAY,WAAW,CAAC,CAAC,0CAA0C,CAAC,CAAC,kCAAkC,EAAE,EAAE,CAAC,CAAC;AAC7G,SAAS;AACT,aAAa;AACb,YAAY,QAAQ,EAAE,CAAC;AACvB,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,SAAS,UAAU,GAAG;AAC1B,QAAQ,YAAY,EAAE,CAAC;AACvB,QAAQ,QAAQ,EAAE,CAAC;AACnB,QAAQ,IAAI,cAAc,GAAG,IAAI,CAAC;AAClC,QAAQ,IAAI,UAAU,GAAG,KAAK,CAAC;AAC/B,QAAQ,OAAO,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,uCAAuC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,uBAAuB;AAChI,YAAY,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,8BAA8B;AACvE,gBAAgB,IAAI,CAAC,UAAU,EAAE;AACjC,oBAAoB,WAAW,CAAC,CAAC,qCAAqC,EAAE,EAAE,EAAE,CAAC,CAAC;AAC9E,iBAAiB;AACjB,gBAAgB,WAAW,CAAC,GAAG,CAAC,CAAC;AACjC,gBAAgB,QAAQ,EAAE,CAAC;AAC3B,gBAAgB,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,uCAAuC,kBAAkB,EAAE;AACxG,oBAAoB,MAAM;AAC1B,iBAAiB;AACjB,aAAa;AACb,iBAAiB,IAAI,UAAU,EAAE;AACjC,gBAAgB,WAAW,CAAC,CAAC,qCAAqC,EAAE,EAAE,EAAE,CAAC,CAAC;AAC1E,aAAa;AACb,YAAY,IAAI,cAAc,EAAE;AAChC,gBAAgB,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClC,gBAAgB,cAAc,GAAG,KAAK,CAAC;AACvC,aAAa;AACb,iBAAiB;AACjB,gBAAgB,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;AAClD,aAAa;AACb,YAAY,IAAI,CAAC,UAAU,EAAE,EAAE;AAC/B,gBAAgB,WAAW,CAAC,CAAC,qCAAqC,EAAE,EAAE,CAAC,CAAC,qCAAqC,CAAC,6BAA6B,CAAC,CAAC;AAC7I,aAAa;AACb,YAAY,UAAU,GAAG,IAAI,CAAC;AAC9B,SAAS;AACT,QAAQ,UAAU,EAAE,CAAC;AACrB,QAAQ,IAAI,CAAC,cAAc,EAAE;AAC7B,YAAY,SAAS,CAAC,GAAG,EAAE,CAAC;AAC5B,SAAS;AACT,QAAQ,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,qCAAqC;AAC1E,YAAY,WAAW,CAAC,CAAC,4CAA4C,CAAC,CAAC,oCAAoC,EAAE,EAAE,CAAC,CAAC;AACjH,SAAS;AACT,aAAa;AACb,YAAY,QAAQ,EAAE,CAAC;AACvB,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,SAAS,UAAU,GAAG;AAC1B,QAAQ,QAAQ,QAAQ,CAAC,QAAQ,EAAE;AACnC,YAAY,KAAK,CAAC;AAClB,gBAAgB,OAAO,UAAU,EAAE,CAAC;AACpC,YAAY,KAAK,CAAC;AAClB,gBAAgB,OAAO,WAAW,EAAE,CAAC;AACrC,YAAY,KAAK,EAAE;AACnB,gBAAgB,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC;AACzC,YAAY;AACZ,gBAAgB,OAAO,YAAY,EAAE,CAAC;AACtC,SAAS;AACT,KAAK;AACL,IAAI,QAAQ,EAAE,CAAC;AACf,IAAI,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,uBAAuB;AACzD,QAAQ,IAAI,OAAO,CAAC,iBAAiB,EAAE;AACvC,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS;AACT,QAAQ,WAAW,CAAC,CAAC,qCAAqC,EAAE,EAAE,EAAE,CAAC,CAAC;AAClE,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;AACvB,QAAQ,WAAW,CAAC,CAAC,qCAAqC,EAAE,EAAE,EAAE,CAAC,CAAC;AAClE,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL,IAAI,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,uBAAuB;AACzD,QAAQ,WAAW,CAAC,CAAC,yCAAyC,EAAE,EAAE,EAAE,CAAC,CAAC;AACtE,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB,CAAC;AACD;AACA;AACA;AACA;AACA;AACO,SAASU,eAAa,CAAC,IAAI,EAAE,SAAS,EAAE;AAC/C,IAAI,IAAI,QAAQ,GAAGV,eAAa,CAAC,IAAI,CAAC,EAAE,KAAK,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,GAAG,CAAC,EAAE,GAAG,CAAC;AAC1E,IAAI,GAAG;AACP,QAAQ,GAAG,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;AACrC,QAAQ,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;AAC/B,QAAQ,QAAQ,IAAI;AACpB,YAAY,KAAK,EAAE,oCAAoC;AACvD,YAAY,KAAK,EAAE,qCAAqC;AACxD,YAAY,KAAK,EAAE;AACnB,gBAAgB,IAAI,MAAM,KAAK,GAAG,EAAE;AACpC,oBAAoB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;AAC5D,iBAAiB;AACjB,gBAAgB,IAAI,SAAS,KAAK,SAAS,EAAE;AAC7C,oBAAoB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;AACxF,iBAAiB;AACjB,gBAAgB,MAAM,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;AAChD,gBAAgB,MAAM;AACtB,SAAS;AACT,KAAK,QAAQ,IAAI,KAAK,EAAE,uBAAuB;AAC/C,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC1B,CAAC;AACM,SAAS,WAAW,CAAC,KAAK,EAAE;AACnC,IAAI,QAAQ,OAAO,KAAK;AACxB,QAAQ,KAAK,SAAS,EAAE,OAAO,SAAS,CAAC;AACzC,QAAQ,KAAK,QAAQ,EAAE,OAAO,QAAQ,CAAC;AACvC,QAAQ,KAAK,QAAQ,EAAE,OAAO,QAAQ,CAAC;AACvC,QAAQ,KAAK,QAAQ,EAAE;AACvB,YAAY,IAAI,CAAC,KAAK,EAAE;AACxB,gBAAgB,OAAO,MAAM,CAAC;AAC9B,aAAa;AACb,iBAAiB,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AAC3C,gBAAgB,OAAO,OAAO,CAAC;AAC/B,aAAa;AACb,YAAY,OAAO,QAAQ,CAAC;AAC5B,SAAS;AACT,QAAQ,SAAS,OAAO,MAAM,CAAC;AAC/B,KAAK;AACL;;AClpBA;AACA;AACA;AACA;AAOO,SAAS,WAAW,CAAC,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE;AAChE,IAAI,MAAM,IAAI,GAAG,YAAY,CAAC,KAAK,EAAE,CAAC;AACtC,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,IAAI,MAAM,IAAI,GAAGK,WAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACzC,IAAI,IAAI,MAAM,GAAG,KAAK,CAAC,CAAC;AACxB,IAAI,IAAI,WAAW,GAAG,KAAK,CAAC,CAAC;AAC7B,IAAI,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;AAC5B,QAAQ,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACjC,QAAQ,MAAM,GAAGC,oBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChD,QAAQ,IAAI,MAAM,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE;AACnD,YAAY,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;AACjD,gBAAgB,KAAK,GAAG,EAAE,CAAC,WAAW,GAAG,KAAK,EAAE,CAAC;AACjD,aAAa;AACb,iBAAiB;AACjB,gBAAgB,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;AAChC,aAAa;AACb,SAAS;AACT,aAAa;AACb,YAAY,MAAM;AAClB,SAAS;AACT,KAAK;AACL,IAAI,IAAI,CAAC,MAAM,EAAE;AACjB;AACA,QAAQ,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE;AAC9B,YAAY,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;AAChE,SAAS;AACT,QAAQ,OAAO,cAAc,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,EAAE,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;AACjJ,KAAK;AACL,SAAS,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,OAAO,WAAW,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;AAC5G,QAAQ,MAAM,QAAQ,GAAGA,oBAAkB,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;AACnE,QAAQ,IAAI,QAAQ,KAAK,KAAK,CAAC,EAAE;AACjC,YAAY,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE;AAClC,gBAAgB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;AACtC,oBAAoB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;AACrD,iBAAiB;AACjB,gBAAgB,MAAM,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC/E,gBAAgB,IAAI,WAAW,CAAC;AAChC,gBAAgB,IAAI,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC;AAChF,gBAAgB,IAAI,aAAa,GAAG,CAAC,EAAE;AACvC;AACA,oBAAoB,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;AACtE,oBAAoB,WAAW,GAAG,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;AACpE,iBAAiB;AACjB,qBAAqB;AACrB,oBAAoB,WAAW,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AACpD,oBAAoB,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;AACpD;AACA,wBAAwB,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACtD,wBAAwB,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;AAChD,qBAAqB;AACrB,iBAAiB;AACjB,gBAAgB,OAAO,cAAc,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,SAAS,GAAG,WAAW,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;AAC5H,aAAa;AACb,iBAAiB;AACjB;AACA,gBAAgB,OAAO,cAAc,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;AAC3I,aAAa;AACb,SAAS;AACT,aAAa;AACb,YAAY,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE;AAClC,gBAAgB,OAAO,EAAE,CAAC;AAC1B,aAAa;AACb,YAAY,MAAM,WAAW,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC3F,YAAY,MAAM,KAAK,GAAG,OAAO,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;AACxJ,YAAY,IAAI,IAAI,CAAC;AACrB,YAAY,IAAI,KAAK,GAAG,CAAC,EAAE;AAC3B,gBAAgB,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;AAC1D,gBAAgB,IAAI,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,GAAG,WAAW,EAAE,CAAC;AAC5G,aAAa;AACb,iBAAiB,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AACnD,gBAAgB,IAAI,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;AACtF,aAAa;AACb,iBAAiB;AACjB,gBAAgB,IAAI,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,WAAW,GAAG,GAAG,EAAE,CAAC;AAC5F,aAAa;AACb,YAAY,OAAO,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACvD,SAAS;AACT,KAAK;AACL,SAAS,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,OAAO,WAAW,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;AAC3G,QAAQ,MAAM,WAAW,GAAG,WAAW,CAAC;AACxC,QAAQ,IAAI,WAAW,KAAK,CAAC,CAAC,EAAE;AAChC;AACA,YAAY,MAAM,WAAW,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC3D,YAAY,IAAI,IAAI,CAAC;AACrB,YAAY,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AAC9C,gBAAgB,IAAI,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;AACtF,aAAa;AACb,iBAAiB;AACjB,gBAAgB,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAC7E,gBAAgB,IAAI,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,GAAG,WAAW,EAAE,CAAC;AAC5G,aAAa;AACb,YAAY,OAAO,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACvD,SAAS;AACT,aAAa,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;AAClE;AACA,YAAY,MAAM,YAAY,GAAG,WAAW,CAAC;AAC7C,YAAY,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;AAC3D,YAAY,IAAI,IAAI,CAAC;AACrB,YAAY,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AAC9C;AACA,gBAAgB,IAAI,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;AAC7F,aAAa;AACb,iBAAiB,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,KAAK,YAAY,EAAE;AAClE;AACA,gBAAgB,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;AACjE,gBAAgB,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;AAC/D,gBAAgB,IAAI,eAAe,GAAG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AACpE,gBAAgB,IAAI,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,eAAe,GAAG,CAAC,GAAG,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;AACrF,aAAa;AACb,iBAAiB;AACjB,gBAAgB,IAAI,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;AACpI,aAAa;AACb,YAAY,OAAO,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACvD,SAAS;AACT,aAAa,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE;AACnC,YAAY,IAAI,IAAI,CAAC;AACrB,YAAY,MAAM,WAAW,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC3D,YAAY,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,WAAW,EAAE;AACnF,gBAAgB,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;AAC9D,gBAAgB,IAAI,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;AAClG,aAAa;AACb,iBAAiB,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,WAAW,KAAK,CAAC,EAAE;AACxE,gBAAgB,IAAI,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,GAAG,WAAW,GAAG,WAAW,GAAG,GAAG,EAAE,CAAC;AACzI,aAAa;AACb,iBAAiB;AACjB,gBAAgB,MAAM,KAAK,GAAG,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,WAAW,CAAC;AAC1G,gBAAgB,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;AAC5D,gBAAgB,IAAI,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,GAAG,WAAW,EAAE,CAAC;AAC5G,aAAa;AACb,YAAY,OAAO,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACvD,SAAS;AACT,aAAa;AACb,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,QAAQ,EAAE,KAAK,KAAK,KAAK,CAAC,GAAG,QAAQ,IAAI,OAAO,CAAC,gBAAgB,GAAG,QAAQ,GAAG,QAAQ,CAAC,CAAC,aAAa,EAAE,WAAW,CAAC,4BAA4B,CAAC,CAAC,CAAC;AAChL,SAAS;AACT,KAAK;AACL,SAAS;AACT,QAAQ,MAAM,IAAI,KAAK,CAAC,CAAC,YAAY,EAAE,OAAO,WAAW,KAAK,QAAQ,GAAG,OAAO,GAAG,UAAU,CAAC,mBAAmB,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClI,KAAK;AACL,CAAC;AACD,SAAS,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE;AAC7C,IAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE;AACpC,QAAQ,OAAO,CAAC,IAAI,CAAC,CAAC;AACtB,KAAK;AACL;AACA,IAAI,IAAI,OAAO,GAAG,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACxC;AACA,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;AAC5B,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AAChD,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;AACxD,QAAQ,OAAO,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,GAAG,CAAC,CAAC,EAAE;AACxD,YAAY,KAAK,EAAE,CAAC;AACpB,SAAS;AACT,QAAQ,OAAO,GAAG,GAAG,OAAO,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;AAC7D,YAAY,GAAG,EAAE,CAAC;AAClB,SAAS;AACT,KAAK;AACL,IAAI,MAAM,KAAK,GAAGL,QAAM,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,GAAG,KAAK,EAAE,EAAE,EAAE,GAAG,OAAO,CAAC,iBAAiB,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;AAC9H;AACA,IAAI,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAChD,QAAQ,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC9B,QAAQ,OAAO,GAAG,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC3C,QAAQ,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7C,QAAQ,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;AACvD,QAAQ,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACjD,KAAK;AACL;AACA,IAAI,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;AACpE,IAAI,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;AAC3F,CAAC;AACM,SAAS,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE;AACtC,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;AACrG;;ACrLA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACY,MAAC,aAAa,GAAGU,gBAAsB;AACzC,IAAC,UAAU;AACrB,CAAC,UAAU,SAAS,EAAE;AACtB,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;AAC9C,IAAI,SAAS,CAAC,SAAS,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC,GAAG,wBAAwB,CAAC;AAClF,IAAI,SAAS,CAAC,SAAS,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,GAAG,uBAAuB,CAAC;AAChF,IAAI,SAAS,CAAC,SAAS,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,GAAG,uBAAuB,CAAC;AAChF,IAAI,SAAS,CAAC,SAAS,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC;AAClE,IAAI,SAAS,CAAC,SAAS,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC,GAAG,wBAAwB,CAAC;AAClF,IAAI,SAAS,CAAC,SAAS,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,GAAG,kBAAkB,CAAC;AACtE,CAAC,EAAE,SAAS,KAAK,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC;AACxB,IAAC,WAAW;AACtB,CAAC,UAAU,UAAU,EAAE;AACvB,IAAI,UAAU,CAAC,UAAU,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC;AACpE,IAAI,UAAU,CAAC,UAAU,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,GAAG,iBAAiB,CAAC;AACtE,IAAI,UAAU,CAAC,UAAU,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,GAAG,kBAAkB,CAAC;AACxE,IAAI,UAAU,CAAC,UAAU,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,mBAAmB,CAAC;AAC1E,IAAI,UAAU,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC;AAC5D,IAAI,UAAU,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC;AAC5D,IAAI,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC;AAC9D,IAAI,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC;AAC9D,IAAI,UAAU,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,cAAc,CAAC;AAChE,IAAI,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,GAAG,eAAe,CAAC;AACnE,IAAI,UAAU,CAAC,UAAU,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,GAAG,gBAAgB,CAAC;AACrE,IAAI,UAAU,CAAC,UAAU,CAAC,mBAAmB,CAAC,GAAG,EAAE,CAAC,GAAG,mBAAmB,CAAC;AAC3E,IAAI,UAAU,CAAC,UAAU,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC,GAAG,oBAAoB,CAAC;AAC7E,IAAI,UAAU,CAAC,UAAU,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC,GAAG,iBAAiB,CAAC;AACvE,IAAI,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,QAAQ,CAAC;AACrD,IAAI,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC;AACvD,IAAI,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;AAC/C,CAAC,EAAE,UAAU,KAAK,UAAU,GAAG,EAAE,CAAC,CAAC,CAAC;AACpC;AACA;AACA;AACY,MAAC,WAAW,GAAGC,cAAmB;AAC9C;AACA;AACA;AACA;AACY,MAAC,KAAK,GAAGC,QAAa;AAClC;AACA;AACA;AACY,MAAC,SAAS,GAAGC,YAAiB;AAC1C;AACA;AACA;AACY,MAAC,kBAAkB,GAAGC,qBAA0B;AAC5D;AACA;AACA;AACY,MAAC,gBAAgB,GAAGC,mBAAwB;AACxD;AACA;AACA;AACY,MAAC,WAAW,GAAGC,cAAmB;AAC9C;AACA;AACA;AACY,MAAC,YAAY,GAAGC,eAAoB;AAChD;AACA;AACA;AACY,MAAC,KAAK,GAAGC,QAAa;AAClC;AACA;AACA;AACA;AACA;AACY,MAAC,aAAa,GAAGC,gBAAqB;AACxC,IAAC,eAAe;AAC1B,CAAC,UAAU,cAAc,EAAE;AAC3B,IAAI,cAAc,CAAC,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC;AAC1E,IAAI,cAAc,CAAC,cAAc,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,GAAG,qBAAqB,CAAC;AACtF,IAAI,cAAc,CAAC,cAAc,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,GAAG,sBAAsB,CAAC;AACxF,IAAI,cAAc,CAAC,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC;AAC1E,IAAI,cAAc,CAAC,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC;AAC1E,IAAI,cAAc,CAAC,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC;AAC1E,IAAI,cAAc,CAAC,cAAc,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,GAAG,oBAAoB,CAAC;AACpF,IAAI,cAAc,CAAC,cAAc,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,GAAG,sBAAsB,CAAC;AACxF,IAAI,cAAc,CAAC,cAAc,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,mBAAmB,CAAC;AAClF,IAAI,cAAc,CAAC,cAAc,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC,GAAG,qBAAqB,CAAC;AACvF,IAAI,cAAc,CAAC,cAAc,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB,CAAC;AAC7F,IAAI,cAAc,CAAC,cAAc,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC,GAAG,uBAAuB,CAAC;AAC3F,IAAI,cAAc,CAAC,cAAc,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC,GAAG,uBAAuB,CAAC;AAC3F,IAAI,cAAc,CAAC,cAAc,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,GAAG,gBAAgB,CAAC;AAC7E,IAAI,cAAc,CAAC,cAAc,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB,CAAC;AAC7F,IAAI,cAAc,CAAC,cAAc,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,GAAG,kBAAkB,CAAC;AACjF,CAAC,EAAE,cAAc,KAAK,cAAc,GAAG,EAAE,CAAC,CAAC,CAAC;AACrC,SAAS,mBAAmB,CAAC,IAAI,EAAE;AAC1C,IAAI,QAAQ,IAAI;AAChB,QAAQ,KAAK,CAAC,qCAAqC,OAAO,eAAe,CAAC;AAC1E,QAAQ,KAAK,CAAC,2CAA2C,OAAO,qBAAqB,CAAC;AACtF,QAAQ,KAAK,CAAC,4CAA4C,OAAO,sBAAsB,CAAC;AACxF,QAAQ,KAAK,CAAC,qCAAqC,OAAO,eAAe,CAAC;AAC1E,QAAQ,KAAK,CAAC,qCAAqC,OAAO,eAAe,CAAC;AAC1E,QAAQ,KAAK,CAAC,qCAAqC,OAAO,eAAe,CAAC;AAC1E,QAAQ,KAAK,CAAC,0CAA0C,OAAO,oBAAoB,CAAC;AACpF,QAAQ,KAAK,CAAC,4CAA4C,OAAO,sBAAsB,CAAC;AACxF,QAAQ,KAAK,CAAC,yCAAyC,OAAO,mBAAmB,CAAC;AAClF,QAAQ,KAAK,EAAE,2CAA2C,OAAO,qBAAqB,CAAC;AACvF,QAAQ,KAAK,EAAE,8CAA8C,OAAO,wBAAwB,CAAC;AAC7F,QAAQ,KAAK,EAAE,6CAA6C,OAAO,uBAAuB,CAAC;AAC3F,QAAQ,KAAK,EAAE,6CAA6C,OAAO,uBAAuB,CAAC;AAC3F,QAAQ,KAAK,EAAE,sCAAsC,OAAO,gBAAgB,CAAC;AAC7E,QAAQ,KAAK,EAAE,8CAA8C,OAAO,wBAAwB,CAAC;AAC7F,QAAQ,KAAK,EAAE,wCAAwC,OAAO,kBAAkB,CAAC;AACjF,KAAK;AACL,IAAI,OAAO,0BAA0B,CAAC;AACtC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,MAAM,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE;AACrD,IAAI,OAAOC,QAAgB,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AAC1D,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;AACnD,IAAI,OAAOC,WAAgB,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AACxD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE;AACxC,IAAI,IAAI,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;AACpD,QAAQ,MAAM,IAAI,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;AACzC,QAAQ,IAAI,IAAI,KAAK,CAAC,EAAE;AACxB,YAAY,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;AACvC,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC;AACzC,IAAI,KAAK,IAAI,CAAC,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AACtD,QAAQ,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;AAC/B,QAAQ,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,IAAI,kBAAkB,EAAE;AACvD,YAAY,IAAI,GAAGC,SAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AAC3C,SAAS;AACT,aAAa;AACb,YAAY,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;AAChD,SAAS;AACT,QAAQ,kBAAkB,GAAG,CAAC,CAAC,MAAM,CAAC;AACtC,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB;;;;","x_google_ignoreList":[0,1,2,3,4,5]}