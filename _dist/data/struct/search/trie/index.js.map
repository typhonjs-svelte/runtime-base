{"version":3,"file":"index.js","sources":["../../../../../node_modules/@typhonjs-svelte/trie-search/dist-trl/trie/index.js"],"sourcesContent":["import { HashArray, getValueFromKey } from '#runtime/data/struct/hash/array';\nexport { getValueFromKey } from '#runtime/data/struct/hash/array';\nimport { QuickLRU } from '#runtime/data/struct/cache/quick-lru';\nimport { klona, isIterable, isObject } from '#runtime/util/object';\n\nvar _a;\n/**\n * A Trie is a data structure designed for quick reTRIEval of objects by string search. This was designed for use with\n * a type-ahead search (e.g. like a dropdown) but could be used in a variety of situations.\n *\n * This data structure indexes sentences / words to objects for searching by full or partial matches. So you can map\n * 'hello' to an Object, and then search by 'hel', 'hell', or 'hello' and get the Object or an Array of all objects\n * that match.\n *\n * By default, sentences / words are split along whitespace boundaries. For example, if your inserted mapping is\n * 'the quick brown fox', this object will be searchable by 'the', 'quick', 'brown', or 'fox' or any of their partials\n * like 'qui' or 'qu' or 'fo'. Boundaries can be customized using the `splitOnRegEx` option.\n *\n * By default, the trie-search is internationalized for a common set of vowels in the ASCII set. So if you insert 'ö',\n * then searching on 'o' will return that result. You can customize this by providing your own `expandRegexes` object.\n *\n * @template T\n */\nclass TrieSearch {\n    /**\n     * Provides a LRU cache for recent search queries. Caches all items matched per phrase.\n     */\n    #cachePhrase;\n    /**\n     * Caches the object associated with a given word in `#findNode`.\n     */\n    #cacheWord;\n    /**\n     * A single string or an array of strings / arrays representing what fields on added objects are to be used as keys\n     * for the trie search / HashArray.\n     */\n    #keyFields;\n    /**\n     * A clone of `#keyFields` returned from {@link TrieSearch.keyFields} and also sent to any reducer in\n     * {@link TrieSearch.search}.\n     */\n    #keyFieldsClone;\n    /**\n     * Stores whether this instance has been destroyed.\n     */\n    #isDestroyed = false;\n    /**\n     * Stores the TrieSearch options.\n     */\n    #options;\n    /**\n     * A clone of `#options` sent to any reducer in {@link TrieSearch.search}.\n     */\n    #optionsClone;\n    /**\n     * Number of nodes in the trie data structure.\n     */\n    #size;\n    /**\n     * Stores the trie data structure.\n     */\n    #root;\n    /**\n     * Stores the subscriber handlers registered through {@link TrieSearch.subscribe}.\n     */\n    // readonly #subscribers: (({ action: 'add' | 'clear' | 'destroy', trieSearch: TrieSearch<T> | undefined) => unknown)[] = [];\n    #subscribers = [];\n    /**\n     * @param {string | KeyFields} [keyFields] - A single string or an array of strings / arrays representing what\n     * fields on added objects are to be used as keys for the trie search / HashArray.\n     *\n     * @param {TrieSearchOptions} [options] - Options.\n     */\n    constructor(keyFields, options) {\n        this.#keyFields = keyFields ? (Array.isArray(keyFields) ? keyFields : [keyFields]) : [];\n        this.#keyFieldsClone = klona(this.#keyFields);\n        // Note: idFieldOrFunction not set / undefined default.\n        this.#options = Object.assign({}, {\n            cache: true,\n            expandRegexes: _a.#DEFAULT_INTERNATIONALIZE_EXPAND_REGEXES,\n            ignoreCase: true,\n            insertFullUnsplitKey: false,\n            maxCacheSize: _a.#MAX_CACHE_SIZE,\n            min: 1,\n            splitOnRegEx: /\\s/g,\n        }, options);\n        // Fallback to `splitOnRegEx` if `splitOnGetRegEx` not defined.\n        this.#options.splitOnGetRegEx = options?.splitOnGetRegEx ?? this.#options.splitOnRegEx;\n        _a.#validateOptions(this.#options);\n        this.#optionsClone = klona(this.#options);\n        this.#root = {};\n        this.#size = 0;\n        if (this.#options.cache) {\n            this.#cachePhrase = new QuickLRU({ maxSize: this.#options.maxCacheSize });\n            this.#cacheWord = new QuickLRU({ maxSize: this.#options.maxCacheSize });\n        }\n    }\n    /**\n     * @returns {boolean} Whether this TrieSearch instance has been destroyed.\n     */\n    get isDestroyed() {\n        return this.#isDestroyed;\n    }\n    /**\n     * @returns {KeyFields} A clone of the current key fields.\n     */\n    get keyFields() {\n        return this.#keyFieldsClone;\n    }\n    /**\n     * @returns {TrieNode<T>} The root trie node.\n     */\n    get root() {\n        if (this.#isDestroyed) {\n            throw new Error('TrieSearch error: This instance has been destroyed.');\n        }\n        return this.#root;\n    }\n    /**\n     * @returns {number} Number of nodes in the trie data structure.\n     */\n    get size() {\n        return this.#size;\n    }\n    /**\n     * Add items or list of items to the TrieSearch instance.\n     *\n     * @param {...(T | Iterable<T>)}  items - Items to add.\n     */\n    add(...items) {\n        if (items.length === 0) {\n            return;\n        }\n        if (this.#isDestroyed) {\n            throw new Error('TrieSearch error: This instance has been destroyed.');\n        }\n        // Only need to clear the phrase cache.\n        if (this.#cachePhrase?.size) {\n            this.#cachePhrase.clear();\n        }\n        for (const itemOrList of items) {\n            if (isIterable(itemOrList)) {\n                for (const item of itemOrList) {\n                    this.#addOne(item);\n                }\n            }\n            else {\n                this.#addOne(itemOrList);\n            }\n        }\n        // Notify subscribers; IE TrieSearchQuery instances.\n        if (this.#subscribers.length) {\n            for (let i = 0; i < this.#subscribers.length; i++) {\n                this.#subscribers[i]({ action: 'add', trieSearch: this });\n            }\n        }\n        return this;\n    }\n    /**\n     * Clears all items.\n     *\n     * @returns {TrieSearch<T>} This instance.\n     */\n    clear() {\n        if (this.#isDestroyed) {\n            throw new Error('TrieSearch error: This instance has been destroyed.');\n        }\n        this.#root = {};\n        this.#size = 0;\n        this.#cachePhrase?.clear();\n        this.#cacheWord?.clear();\n        // Notify subscribers; IE TrieSearchQuery instances.\n        if (this.#subscribers.length) {\n            for (let i = 0; i < this.#subscribers.length; i++) {\n                this.#subscribers[i]({ action: 'clear', trieSearch: this });\n            }\n        }\n        return this;\n    }\n    /**\n     * Destroys this TrieSearch instance. Removing all data and preventing new data from being added. Any subscribers\n     * are notified with an undefined argument in the callback signaling that the associated instance is destroyed.\n     */\n    destroy() {\n        this.#isDestroyed = true;\n        this.#root = {};\n        this.#size = 0;\n        this.#cachePhrase?.clear();\n        this.#cacheWord?.clear();\n        // Notify subscribers; IE TrieSearchQuery instances.\n        if (this.#subscribers.length) {\n            for (let i = 0; i < this.#subscribers.length; i++) {\n                this.#subscribers[i]({ action: 'destroy', trieSearch: this });\n            }\n        }\n        this.#subscribers.length = 0;\n        return this;\n    }\n    /**\n     * Directly maps an item to the given key.\n     *\n     * @param {string}   key - The key to store the item.\n     *\n     * @param {T}        value - The item to store.\n     */\n    map(key, value) {\n        if (this.#isDestroyed) {\n            throw new Error('TrieSearch error: This instance has been destroyed.');\n        }\n        if (this.#options.splitOnRegEx && this.#options.splitOnRegEx.test(key)) {\n            const words = key.split(this.#options.splitOnRegEx);\n            const emptySplitMatch = words.filter((p) => { return _a.#REGEX_IS_WHITESPACE.test(p); });\n            const selfMatch = words.filter((p) => { return p === key; });\n            const selfIsOnlyMatch = selfMatch.length + emptySplitMatch.length === words.length;\n            // There is an edge case that a RegEx with a positive lookahead like `/?=[A-Z]/` split on capital letters for\n            // a camelcase sentence will then match again when we call map, creating an infinite stack loop.\n            if (!selfIsOnlyMatch) {\n                for (let i = 0, l = words.length; i < l; i++) {\n                    if (!_a.#REGEX_IS_WHITESPACE.test(words[i])) {\n                        this.map(words[i], value);\n                    }\n                }\n                // Only insert full unsplit phrase if this option is true; continues with rest of `map` method.\n                if (!this.#options.insertFullUnsplitKey) {\n                    return;\n                }\n            }\n        }\n        if (this.#options.ignoreCase) {\n            key = key.toLowerCase();\n        }\n        let node = this.#root;\n        for (const token of this.#keyTokenizer(key)) {\n            if (!node[token]) {\n                this.#size++;\n                node[token] = {};\n            }\n            node = node[token];\n        }\n        // Ensure that a token was generated otherwise discard setting value as key is likely less than `min` option.\n        if (node !== this.#root) {\n            node['value'] = node['value'] ?? [];\n            node['value'].push(value);\n        }\n        return this;\n    }\n    /**\n     * Performs a search of the trie data structure with the given phrases. By default, each phrase is split by\n     * {@link TrieSearchOptions.splitOnGetRegEx} and matches found for each word resulting in a `OR` lookup. You may\n     * provide a `reducer` function to change the behavior\n     *\n     * @param {string | Iterable<string>}  phrases - The phrases to parse and search in the trie data structure.\n     *\n     * @param {object}   [options] - Search Options.\n     *\n     * @param {TrieSearchReducer<T>}  [options.reducer] - A trie reducer instance to apply to this search.\n     *\n     * @param {number}   [options.limit] - The limit for search results returned.\n     *\n     * @param {T[]}      [options.list=[]] - An external array to use for storing search results.\n     *\n     * @returns {T[]} Found matches.\n     */\n    search(phrases, { reducer, limit, list = [] } = {}) {\n        if (phrases === void 0) {\n            return list;\n        }\n        if (limit !== void 0 && (!Number.isInteger(limit) || limit < 0)) {\n            throw new TypeError(`TrieSearch.search error: 'limit' is not an integer >= 0.`);\n        }\n        let haKeyFields = this.#keyFields;\n        // Reset reducer and retrieve potentially more specific KeyFields.\n        if (reducer) {\n            reducer.reset({ keyFields: this.#keyFieldsClone, list, options: this.#optionsClone, phrases });\n            haKeyFields = reducer.keyFields ?? haKeyFields;\n        }\n        if (typeof phrases === 'string') {\n            const ignoreCasePhrase = this.#options.ignoreCase ? phrases.toLowerCase() : phrases;\n            let matchesAndWords;\n            let cachedMatches;\n            if (this.#cachePhrase && (cachedMatches = this.#cachePhrase.get(_a.#getCacheKey(ignoreCasePhrase, limit)))) {\n                matchesAndWords = cachedMatches;\n            }\n            else {\n                matchesAndWords = this.#getImpl(ignoreCasePhrase, limit, haKeyFields);\n            }\n            if (reducer) {\n                reducer.reduce({ ignoreCasePhrase, index: 0, ...matchesAndWords, phrase: phrases });\n            }\n            else {\n                new HashArray(haKeyFields, { list }).add(matchesAndWords.matches);\n            }\n        }\n        else if (isIterable(phrases)) {\n            let resultsHA;\n            let index = 0;\n            for (const phrase of phrases) {\n                const ignoreCasePhrase = this.#options.ignoreCase ? phrase.toLowerCase() : phrase;\n                let matchesAndWords;\n                let cachedMatches;\n                if (this.#cachePhrase && (cachedMatches = this.#cachePhrase.get(_a.#getCacheKey(ignoreCasePhrase, limit)))) {\n                    matchesAndWords = cachedMatches;\n                }\n                else {\n                    matchesAndWords = this.#getImpl(ignoreCasePhrase, limit, haKeyFields);\n                }\n                if (reducer) {\n                    reducer.reduce({ ignoreCasePhrase, index: index++, ...matchesAndWords, phrase });\n                }\n                else {\n                    resultsHA = resultsHA ? resultsHA.add(matchesAndWords.matches) :\n                        new HashArray(haKeyFields, { list }).add(matchesAndWords.matches);\n                }\n            }\n        }\n        return reducer ? reducer.matches : list;\n    }\n    // Readable store implementation ----------------------------------------------------------------------------------\n    /**\n     * Subscribe for change notification on add / clear / destroy.\n     *\n     * Note: There is no data defined regarding what changed only that one of three actions occurred. This TrieSearch\n     * instance is sent as the only argument. When it is undefined this signals that the TrieSearch instance has been\n     * destroyed.\n     *\n     * @param {(trieSearch: TrieSearch<T> | undefined) => unknown} handler - Callback function that is invoked on\n     * changes (add / clear / destroy).\n     *\n     * @returns {() => void} Unsubscribe function.\n     */\n    subscribe(handler) {\n        this.#subscribers.push(handler);\n        handler({ action: 'subscribe', trieSearch: this });\n        // Return unsubscribe function.\n        /* c8 ignore next 5 */\n        return () => {\n            const index = this.#subscribers.findIndex((sub) => sub === handler);\n            if (index >= 0) {\n                this.#subscribers.splice(index, 1);\n            }\n        };\n    }\n    // Internal -------------------------------------------------------------------------------------------------------\n    static #MAX_CACHE_SIZE = 64;\n    static #REGEX_IS_WHITESPACE = /^\\s*$/;\n    static #DEFAULT_INTERNATIONALIZE_EXPAND_REGEXES = [\n        { regex: /[åäàáâãæ]/ig, alternate: 'a' },\n        { regex: /[èéêë]/ig, alternate: 'e' },\n        { regex: /[ìíîï]/ig, alternate: 'i' },\n        { regex: /[òóôõö]/ig, alternate: 'o' },\n        { regex: /[ùúûü]/ig, alternate: 'u' },\n        { regex: /æ/ig, alternate: 'ae' }\n    ];\n    #addOne(item) {\n        if (!isObject(item)) {\n            throw new TypeError(`TrieSearch.add error: The add method only accepts objects.`);\n        }\n        for (const key of this.#keyFields) {\n            let val = Array.isArray(key) ? getValueFromKey(item, key) : item[key];\n            if (!val) {\n                continue;\n            }\n            val = val.toString();\n            for (const expandedValue of _a.#expandString(val, this.#options)) {\n                this.map(expandedValue, item);\n            }\n        }\n    }\n    /**\n     * By default, using the options.expandRegexes, given a string like 'ö är bra', this will expand it to:\n     *\n     * ['ö är bra', 'o är bra', 'ö ar bra', 'o ar bra']\n     *\n     * By default, this was built to allow for internationalization, but it could be also be expanded to\n     * allow for word alternates, etc. like spelling alternates ('teh' and 'the').\n     *\n     * This is used for insertion! This should not be used for lookup since if a person explicitly types\n     * 'ä' they probably do not want to see all results for 'a'.\n     *\n     * @param {string}   value The string to find alternates for.\n     *\n     * @param {TrieSearchOptions} options - TrieSearch options.\n     *\n     * @returns {IterableIterator<string>}  Always returns an array even if no matches.\n     * @yields {string}\n     */\n    static *#expandString(value, options) {\n        yield value;\n        if (options.expandRegexes && options.expandRegexes.length) {\n            for (let i = 0; i < options.expandRegexes.length; i++) {\n                const er = options.expandRegexes[i];\n                let match;\n                while ((match = er.regex.exec(value)) !== null) {\n                    const alternateValue = _a.#replaceStringAt(value, match.index, er.alternate);\n                    yield alternateValue;\n                }\n            }\n        }\n    }\n    /**\n     * Finds the node in the trie data by a depth first algorithm by the given key. Uses a larger LRU cache. The key is\n     * tokenized into fragments.\n     *\n     * @param {string}   key - A key to find in trie data.\n     */\n    #findNode(key) {\n        if (this.#cacheWord?.has(key)) {\n            return this.#cacheWord.get(key);\n        }\n        let node = this.#root;\n        for (const token of this.#keyTokenizer(key)) {\n            if (!node) {\n                return void 0;\n            }\n            node = node[token];\n        }\n        this.#cacheWord?.set(key, node);\n        return node;\n    }\n    /**\n     * @param {string}   phrase -\n     *\n     * @param {number}   [limit] -\n     *\n     * @returns {string} A cache key.\n     */\n    static #getCacheKey(phrase, limit) {\n        return limit ? `${phrase}_${limit}` : phrase;\n    }\n    /**\n     * @param {string}   phrase -\n     *\n     * @param {number}   limit -\n     *\n     * @param {Key | KeyFields} haKeyFields -\n     *\n     * @returns {{ matches: T[], words: string[] }} An array of items found from `phrase`.\n     */\n    #getImpl(phrase, limit, haKeyFields) {\n        const words = this.#options.splitOnGetRegEx ? phrase.split(this.#options.splitOnGetRegEx) : [phrase];\n        let ret = void 0;\n        // Note: HashArray has solid encapsulation; to not make a copy of the resulting backing list one can pass in\n        // a list in the constructor or clone method. In the performance critical block below `matchesList` will contain\n        // the final value to return after the loop completes.\n        let matchesList, node;\n        for (const word of words) {\n            if (this.#options.min && word.length < this.#options.min) {\n                continue;\n            }\n            const temp = new HashArray(haKeyFields, { list: matchesList = [] });\n            if ((node = this.#findNode(word))) {\n                aggregate(node, temp);\n            }\n            ret = ret ? ret.intersection(temp, ret.clone({ options: { list: matchesList = [] } })) : temp;\n        }\n        const matches = ret ? matchesList : [];\n        this.#cachePhrase?.set(_a.#getCacheKey(phrase, limit), { matches, words });\n        return { matches, words };\n        function aggregate(node, ha) {\n            if (limit !== void 0 && ha.sizeFlat >= limit) {\n                return;\n            }\n            if (node.value && node.value.length) {\n                if (!limit || (ha.sizeFlat + node.value.length) < limit) {\n                    ha.add(node.value);\n                }\n                else {\n                    // Limit is less than the number of entries in the node.value + ha combined\n                    ha.add(node.value.slice(0, limit - ha.sizeFlat));\n                    return;\n                }\n            }\n            for (const k in node) {\n                if (limit !== void 0 && ha.sizeFlat >= limit) {\n                    return;\n                }\n                if (k !== 'value') {\n                    aggregate(node[k], ha);\n                }\n            }\n        }\n    }\n    /**\n     * Splits the given key by a minimum prefix followed by remaining characters as tokens.\n     *\n     * Note: An external tokenizer may be set in options to replace the internal / ASCII tokenizer. An external\n     * tokenizer must be a function that takes a string and returns an {@link IterableIterator<string>}.\n     *\n     * @param {string}   key - A key to split.\n     *\n     * @returns {IterableIterator<string>} A generator that yields each character or prefix from the key as a token.\n     * @yields {string}\n     */\n    *#keyTokenizer(key) {\n        if (this.#options.tokenizer) {\n            const extTokenizer = this.#options.tokenizer(key);\n            // Only process this block if there is a min size > 1.\n            if (this.#options.min && this.#options.min > 1) {\n                let buffer = '';\n                let i = 0;\n                for (; i < this.#options.min; i++) {\n                    const next = extTokenizer.next();\n                    // Tokens ended before `min` length.\n                    if (next.done) {\n                        return;\n                    }\n                    buffer += next.value;\n                }\n                yield buffer;\n            }\n            // Finish yielding rest of tokens.\n            for (const token of extTokenizer) {\n                yield token;\n            }\n        }\n        else {\n            if (this.#options.min && this.#options.min > 1) {\n                if (key.length < this.#options.min) {\n                    return;\n                }\n                yield key.substring(0, this.#options.min);\n                for (let i = this.#options.min; i < key.length; i++) {\n                    yield key[i];\n                }\n            }\n            else {\n                for (let i = 0; i < key.length; i++) {\n                    yield key[i];\n                }\n            }\n        }\n    }\n    /**\n     * Replaces a portion of a string with a new value.\n     *\n     * @param {string}   target - The target string.\n     *\n     * @param {number}   index - Index for replacement.\n     *\n     * @param {string}   replacement - The replacement string.\n     *\n     * @returns {string} The target string w/ replacement.\n     */\n    static #replaceStringAt(target, index, replacement) {\n        return target.substring(0, index) + replacement + target.substring(index + replacement.length);\n    }\n    /**\n     * Validate options\n     *\n     * @param {TrieSearchOptions} options - Options to validate.\n     */\n    static #validateOptions(options) {\n        if (options.maxCacheSize !== void 0 && (!Number.isInteger(options.maxCacheSize) || options.maxCacheSize < 0)) {\n            throw new TypeError(`TrieSearch error: 'options.maxCacheSize' must be an integer >= 0.`);\n        }\n        if (options.tokenizer !== void 0 && typeof options.tokenizer !== 'function') {\n            throw new TypeError(`TrieSearch error: 'options.tokenizer' is not a function.`);\n        }\n    }\n}\n_a = TrieSearch;\n\n/**\n * Provides an ITrieSearchReducer implementation to accumulate a union / `AND` of matches across all phrases provided in\n * a search query.\n *\n * @template T\n */\nclass UnionReducer {\n    /**\n     * Provides a lookup key for unique values in items being reduced.\n     */\n    #indexField;\n    /**\n     * Stores the accumulation results after each batch of matches is processed.\n     */\n    #accumulator;\n    /**\n     * Stores the main list from {@link TrieSearch.search} method which is set on `reset`.\n     */\n    #list;\n    /**\n     * With each batch of matches stores the accumulation keys.\n     */\n    #set = new Set();\n    constructor(indexField) {\n        this.#indexField = indexField;\n    }\n    /**\n     * @returns {Key | KeyFields | undefined} Returns the index field key.\n     */\n    get keyFields() { return this.#indexField; }\n    /**\n     * @returns {T[]} Returns the union of all matches.\n     */\n    get matches() {\n        // Push results into the main list.\n        const matches = this.#list;\n        matches.push(...this.#accumulator);\n        // Remove unused references.\n        this.#accumulator = void 0;\n        this.#list = void 0;\n        return matches;\n    }\n    /**\n     * Accumulates and reduces each batch of matches for one or more phrases.\n     *\n     * @param {TrieSearchReducerData<T>}   data - Matches of current iteration / batch.\n     */\n    reduce(data) {\n        const matches = data.matches;\n        // In the first iteration simply set matches to the accumulator returning immediately.\n        if (this.#accumulator === void 0) {\n            this.#accumulator = matches;\n            return;\n        }\n        const results = [];\n        // Add accumulator keys to Set.\n        for (let i = this.#accumulator.length; --i >= 0;) {\n            this.#set.add(getValueFromKey(this.#accumulator[i], this.#indexField));\n        }\n        // Iterate through current matches and only add to results if the index field is in accumulated Set.\n        for (let i = 0; i < matches.length; i++) {\n            if (this.#set.has(getValueFromKey(matches[i], this.#indexField))) {\n                results.push(matches[i]);\n            }\n        }\n        this.#accumulator = results;\n        this.#set.clear();\n    }\n    /**\n     * Reset state.\n     *\n     * @param {T[]}   list - The main output list from {@link TrieSearch.search}.\n     */\n    reset({ list }) {\n        this.#list = list;\n        this.#accumulator = void 0;\n    }\n}\n\nexport { TrieSearch, UnionReducer };\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}