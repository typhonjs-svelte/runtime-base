{"version":3,"file":"index.js","sources":["../../../../node_modules/colord-typhonjs/dist/index.js"],"sourcesContent":["/**\n * We used to work with 2 digits after the decimal point, but it wasn't accurate enough,\n * so the library produced colors that were perceived differently.\n */\nconst ALPHA_PRECISION = 3;\n/**\n * Valid CSS <angle> units.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/angle\n */\nconst ANGLE_UNITS = {\n    grad: 360 / 400,\n    turn: 360,\n    rad: 360 / (Math.PI * 2),\n};\n\nconst isPresent = (value) => {\n    if (typeof value === \"string\")\n        return value.length > 0;\n    if (typeof value === \"number\")\n        return true;\n    return false;\n};\nconst round = (number, digits = 0, base = Math.pow(10, digits)) => {\n    return Math.round(base * number) / base + 0;\n};\n/**\n * Clamps a value between an upper and lower bound.\n * We use ternary operators because it makes the minified code\n * is 2 times shorter then `Math.min(Math.max(a,b),c)`\n * NaN is clamped to the lower bound\n */\nconst clamp = (number, min = 0, max = 1) => {\n    return number > max ? max : number > min ? number : min;\n};\n/**\n * Processes and clamps a degree (angle) value properly.\n * Any `NaN` or `Infinity` will be converted to `0`.\n * Examples: -1 => 359, 361 => 1\n */\nconst clampHue = (degrees) => {\n    degrees = isFinite(degrees) ? degrees % 360 : 0;\n    return degrees > 0 ? degrees : degrees + 360;\n};\n/**\n * Converts a hue value to degrees from 0 to 360 inclusive.\n */\nconst parseHue = (value, unit = \"deg\") => {\n    return Number(value) * (ANGLE_UNITS[unit] || 1);\n};\n\nconst clampRgba = (rgba) => ({\n    r: clamp(rgba.r, 0, 255),\n    g: clamp(rgba.g, 0, 255),\n    b: clamp(rgba.b, 0, 255),\n    a: clamp(rgba.a),\n});\nconst roundRgba = (rgba, digits = 0) => ({\n    r: round(rgba.r, digits),\n    g: round(rgba.g, digits),\n    b: round(rgba.b, digits),\n    a: round(rgba.a, ALPHA_PRECISION > digits ? ALPHA_PRECISION : digits),\n});\nconst parseRgba = ({ r, g, b, a = 1 }) => {\n    if (!isPresent(r) || !isPresent(g) || !isPresent(b))\n        return null;\n    return clampRgba({\n        r: Number(r),\n        g: Number(g),\n        b: Number(b),\n        a: Number(a),\n    });\n};\n\nconst hexMatcher = /^#([0-9a-f]{3,8})$/i;\n/** Parses any valid Hex3, Hex4, Hex6 or Hex8 string and converts it to an RGBA object */\nconst parseHex = (hex) => {\n    const hexMatch = hexMatcher.exec(hex);\n    if (!hexMatch)\n        return null;\n    hex = hexMatch[1];\n    if (hex.length <= 4) {\n        return {\n            r: parseInt(hex[0] + hex[0], 16),\n            g: parseInt(hex[1] + hex[1], 16),\n            b: parseInt(hex[2] + hex[2], 16),\n            a: hex.length === 4 ? round(parseInt(hex[3] + hex[3], 16) / 255, 2) : 1,\n        };\n    }\n    if (hex.length === 6 || hex.length === 8) {\n        return {\n            r: parseInt(hex.substr(0, 2), 16),\n            g: parseInt(hex.substr(2, 2), 16),\n            b: parseInt(hex.substr(4, 2), 16),\n            a: hex.length === 8 ? round(parseInt(hex.substr(6, 2), 16) / 255, 2) : 1,\n        };\n    }\n    return null;\n};\n/** Formats any decimal number (e.g. 128) as a hexadecimal string (e.g. \"08\") */\nconst format = (number) => {\n    const hex = number.toString(16);\n    return hex.length < 2 ? \"0\" + hex : hex;\n};\n/** Converts RGBA object to Hex6 or (if it has alpha channel) Hex8 string */\nconst rgbaToHex = (rgba) => {\n    const { r, g, b, a } = roundRgba(rgba);\n    const alphaHex = a < 1 ? format(round(a * 255)) : \"\";\n    return \"#\" + format(r) + format(g) + format(b) + alphaHex;\n};\n\nconst clampHsva = (hsva) => ({\n    h: clampHue(hsva.h),\n    s: clamp(hsva.s, 0, 100),\n    v: clamp(hsva.v, 0, 100),\n    a: clamp(hsva.a),\n});\nconst roundHsva = (hsva, digits = 0) => ({\n    h: round(hsva.h, digits),\n    s: round(hsva.s, digits),\n    v: round(hsva.v, digits),\n    a: round(hsva.a, ALPHA_PRECISION > digits ? ALPHA_PRECISION : digits),\n});\nconst parseHsva = ({ h, s, v, a = 1 }) => {\n    if (!isPresent(h) || !isPresent(s) || !isPresent(v))\n        return null;\n    const hsva = clampHsva({\n        h: Number(h),\n        s: Number(s),\n        v: Number(v),\n        a: Number(a),\n    });\n    return hsvaToRgba(hsva);\n};\nconst rgbaToHsva = ({ r, g, b, a }) => {\n    const max = Math.max(r, g, b);\n    const delta = max - Math.min(r, g, b);\n    const hh = delta\n        ? max === r\n            ? (g - b) / delta\n            : max === g\n                ? 2 + (b - r) / delta\n                : 4 + (r - g) / delta\n        : 0;\n    return {\n        h: 60 * (hh < 0 ? hh + 6 : hh),\n        s: max ? (delta / max) * 100 : 0,\n        v: (max / 255) * 100,\n        a,\n    };\n};\nconst hsvaToRgba = ({ h, s, v, a }) => {\n    h = (h / 360) * 6;\n    s = s / 100;\n    v = v / 100;\n    const hh = Math.floor(h), b = v * (1 - s), c = v * (1 - (h - hh) * s), d = v * (1 - (1 - h + hh) * s), module = hh % 6;\n    return {\n        r: [v, c, b, b, d, v][module] * 255,\n        g: [d, v, v, c, b, b][module] * 255,\n        b: [b, b, d, v, v, c][module] * 255,\n        a: a,\n    };\n};\n\nconst clampHsla = (hsla) => ({\n    h: clampHue(hsla.h),\n    s: clamp(hsla.s, 0, 100),\n    l: clamp(hsla.l, 0, 100),\n    a: clamp(hsla.a),\n});\nconst roundHsla = (hsla, digits = 0) => ({\n    h: round(hsla.h, digits),\n    s: round(hsla.s, digits),\n    l: round(hsla.l, digits),\n    a: round(hsla.a, ALPHA_PRECISION > digits ? ALPHA_PRECISION : digits),\n});\nconst parseHsla = ({ h, s, l, a = 1 }) => {\n    if (!isPresent(h) || !isPresent(s) || !isPresent(l))\n        return null;\n    const hsla = clampHsla({\n        h: Number(h),\n        s: Number(s),\n        l: Number(l),\n        a: Number(a),\n    });\n    return hslaToRgba(hsla);\n};\nconst hslaToHsva = ({ h, s, l, a }) => {\n    s *= (l < 50 ? l : 100 - l) / 100;\n    return {\n        h: h,\n        s: s > 0 ? ((2 * s) / (l + s)) * 100 : 0,\n        v: l + s,\n        a,\n    };\n};\nconst hsvaToHsla = ({ h, s, v, a }) => {\n    const hh = ((200 - s) * v) / 100;\n    return {\n        h,\n        s: hh > 0 && hh < 200 ? ((s * v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0,\n        l: hh / 2,\n        a,\n    };\n};\nconst hslaToRgba = (hsla) => {\n    return hsvaToRgba(hslaToHsva(hsla));\n};\nconst rgbaToHsla = (rgba) => {\n    return hsvaToHsla(rgbaToHsva(rgba));\n};\n\n// Functional syntax\n// hsl( <hue>, <percentage>, <percentage>, <alpha-value>? )\nconst commaHslaMatcher = /^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i;\n// Whitespace syntax\n// hsl( <hue> <percentage> <percentage> [ / <alpha-value> ]? )\nconst spaceHslaMatcher = /^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i;\n/**\n * Parses a valid HSL[A] CSS color function/string\n * https://www.w3.org/TR/css-color-4/#the-hsl-notation\n */\nconst parseHslaString = (input) => {\n    const match = commaHslaMatcher.exec(input) || spaceHslaMatcher.exec(input);\n    if (!match)\n        return null;\n    const hsla = clampHsla({\n        h: parseHue(match[1], match[2]),\n        s: Number(match[3]),\n        l: Number(match[4]),\n        a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1),\n    });\n    return hslaToRgba(hsla);\n};\nconst rgbaToHslaString = (rgba, digits = 0) => {\n    const { h, s, l, a } = roundHsla(rgbaToHsla(rgba), digits);\n    return a < 1 ? `hsla(${h}, ${s}%, ${l}%, ${a})` : `hsl(${h}, ${s}%, ${l}%)`;\n};\n\n// Functional syntax\n// rgb( <percentage>#{3} , <alpha-value>? )\n// rgb( <number>#{3} , <alpha-value>? )\nconst commaRgbaMatcher = /^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i;\n// Whitespace syntax\n// rgb( <percentage>{3} [ / <alpha-value> ]? )\n// rgb( <number>{3} [ / <alpha-value> ]? )\nconst spaceRgbaMatcher = /^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i;\n/**\n * Parses a valid RGB[A] CSS color function/string\n * https://www.w3.org/TR/css-color-4/#rgb-functions\n */\nconst parseRgbaString = (input) => {\n    const match = commaRgbaMatcher.exec(input) || spaceRgbaMatcher.exec(input);\n    if (!match)\n        return null;\n    // Mixing numbers and percentages is not allowed\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb_syntax_variations\n    if (match[2] !== match[4] || match[4] !== match[6])\n        return null;\n    return clampRgba({\n        r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n        g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n        b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n        a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? 100 : 1),\n    });\n};\nconst rgbaToRgbaString = (rgba, digits = 0) => {\n    const { r, g, b, a } = roundRgba(rgba, digits);\n    return a < 1 ? `rgba(${r}, ${g}, ${b}, ${a})` : `rgb(${r}, ${g}, ${b})`;\n};\n\n// The built-in input parsing functions.\n// We use array instead of object to keep the bundle size lighter.\nconst parsers = {\n    string: [\n        [parseHex, \"hex\"],\n        [parseRgbaString, \"rgb\"],\n        [parseHslaString, \"hsl\"],\n    ],\n    object: [\n        [parseRgba, \"rgb\"],\n        [parseHsla, \"hsl\"],\n        [parseHsva, \"hsv\"],\n    ],\n};\nconst findValidColor = (input, parsers) => {\n    for (let index = 0; index < parsers.length; index++) {\n        const result = parsers[index][0](input);\n        if (result)\n            return [result, parsers[index][1]];\n    }\n    return [null, undefined];\n};\n/** Tries to convert an incoming value into RGBA color by going through all color model parsers */\nconst parse = (input) => {\n    if (typeof input === \"string\") {\n        return findValidColor(input.trim(), parsers.string);\n    }\n    // Don't forget that the type of `null` is \"object\" in JavaScript\n    // https://bitsofco.de/javascript-typeof/\n    if (typeof input === \"object\" && input !== null) {\n        return findValidColor(input, parsers.object);\n    }\n    return [null, undefined];\n};\n/**\n * Returns a color model name for the input passed to the function.\n */\nconst getFormat = (input) => parse(input)[1];\n\nconst changeAlpha = (rgba, a) => ({\n    r: rgba.r,\n    g: rgba.g,\n    b: rgba.b,\n    a,\n});\n\nconst saturate = (rgba, amount) => {\n    const hsla = rgbaToHsla(rgba);\n    return {\n        h: hsla.h,\n        s: clamp(hsla.s + amount * 100, 0, 100),\n        l: hsla.l,\n        a: hsla.a,\n    };\n};\n\n/**\n * Returns the brightness of a color [0-1].\n * https://www.w3.org/TR/AERT/#color-contrast\n * https://en.wikipedia.org/wiki/YIQ\n */\nconst getBrightness = (rgba) => {\n    return (rgba.r * 299 + rgba.g * 587 + rgba.b * 114) / 1000 / 255;\n};\n\nconst lighten = (rgba, amount) => {\n    const hsla = rgbaToHsla(rgba);\n    return {\n        h: hsla.h,\n        s: hsla.s,\n        l: clamp(hsla.l + amount * 100, 0, 100),\n        a: hsla.a,\n    };\n};\n\nconst invert = (rgba) => ({\n    r: 255 - rgba.r,\n    g: 255 - rgba.g,\n    b: 255 - rgba.b,\n    a: rgba.a,\n});\n\nclass Colord {\n    parsed;\n    rgba;\n    constructor(input) {\n        // Internal color format is RGBA object.\n        // We do not round the internal RGBA numbers for better conversion accuracy.\n        this.parsed = parse(input)[0];\n        this.rgba = this.parsed || { r: 0, g: 0, b: 0, a: 1 };\n    }\n    /**\n     * Returns a boolean indicating whether or not an input has been parsed successfully.\n     * Note: If parsing is unsuccessful, Colord defaults to black (does not throws an error).\n     */\n    isValid() {\n        return this.parsed !== null;\n    }\n    /**\n     * Returns the brightness of a color (from 0 to 1).\n     * The calculation logic is modified from WCAG.\n     * https://www.w3.org/TR/AERT/#color-contrast\n     */\n    brightness() {\n        return round(getBrightness(this.rgba), 2);\n    }\n    /**\n     * Same as calling `brightness() < 0.5`.\n     */\n    isDark() {\n        return getBrightness(this.rgba) < 0.5;\n    }\n    /**\n     * Same as calling `brightness() >= 0.5`.\n     * */\n    isLight() {\n        return getBrightness(this.rgba) >= 0.5;\n    }\n    /**\n     * Returns the hexadecimal representation of a color.\n     * When the alpha channel value of the color is less than 1,\n     * it outputs #rrggbbaa format instead of #rrggbb.\n     */\n    toHex() {\n        return rgbaToHex(this.rgba);\n    }\n    /**\n     * Converts a color to RGB color space and returns an object.\n     * Always includes an alpha value from 0 to 1.\n     */\n    toRgb(digits = 0) {\n        return roundRgba(this.rgba, digits);\n    }\n    /**\n     * Converts a color to RGB color space and returns a string representation.\n     * Outputs an alpha value only if it is less than 1.\n     */\n    toRgbString(digits = 0) {\n        return rgbaToRgbaString(this.rgba, digits);\n    }\n    /**\n     * Converts a color to HSL color space and returns an object.\n     * Always includes an alpha value from 0 to 1.\n     */\n    toHsl(digits = 0) {\n        return roundHsla(rgbaToHsla(this.rgba), digits);\n    }\n    /**\n     * Converts a color to HSL color space and returns a string representation.\n     * Always includes an alpha value from 0 to 1.\n     */\n    toHslString(digits = 0) {\n        return rgbaToHslaString(this.rgba, digits);\n    }\n    /**\n     * Converts a color to HSV color space and returns an object.\n     * Always includes an alpha value from 0 to 1.\n     */\n    toHsv(digits = 0) {\n        return roundHsva(rgbaToHsva(this.rgba), digits);\n    }\n    /**\n     * Creates a new instance containing an inverted (opposite) version of the color.\n     */\n    invert() {\n        return colord(invert(this.rgba));\n    }\n    /**\n     * Increases the HSL saturation of a color by the given amount.\n     */\n    saturate(amount = 0.1) {\n        return colord(saturate(this.rgba, amount));\n    }\n    /**\n     * Decreases the HSL saturation of a color by the given amount.\n     */\n    desaturate(amount = 0.1) {\n        return colord(saturate(this.rgba, -amount));\n    }\n    /**\n     * Makes a gray color with the same lightness as a source color.\n     */\n    grayscale() {\n        return colord(saturate(this.rgba, -1));\n    }\n    /**\n     * Increases the HSL lightness of a color by the given amount.\n     */\n    lighten(amount = 0.1) {\n        return colord(lighten(this.rgba, amount));\n    }\n    /**\n     * Increases the HSL lightness of a color by the given amount.\n     */\n    darken(amount = 0.1) {\n        return colord(lighten(this.rgba, -amount));\n    }\n    /**\n     * Changes the HSL hue of a color by the given amount.\n     */\n    rotate(amount = 15) {\n        return this.hue(this.hue() + amount);\n    }\n    alpha(value) {\n        if (typeof value === \"number\")\n            return colord(changeAlpha(this.rgba, value));\n        return round(this.rgba.a, ALPHA_PRECISION);\n    }\n    hue(value) {\n        const hsla = rgbaToHsla(this.rgba);\n        if (typeof value === \"number\")\n            return colord({ h: value, s: hsla.s, l: hsla.l, a: hsla.a });\n        return round(hsla.h);\n    }\n    /**\n     * Determines whether two values are the same color.\n     */\n    isEqual(color) {\n        return this.toHex() === colord(color).toHex();\n    }\n}\n/**\n * Parses the given input color and creates a new `Colord` instance.\n * See accepted input formats: https://github.com/omgovich/colord#color-parsing\n */\nconst colord = (input) => {\n    if (input instanceof Colord)\n        return input;\n    return new Colord(input);\n};\n\nconst activePlugins = [];\nconst extend = (plugins) => {\n    plugins.forEach((plugin) => {\n        if (activePlugins.indexOf(plugin) < 0) {\n            plugin(Colord, parsers);\n            activePlugins.push(plugin);\n        }\n    });\n};\n\nconst random = () => {\n    return new Colord({\n        r: Math.random() * 255,\n        g: Math.random() * 255,\n        b: Math.random() * 255,\n    });\n};\n\nexport { Colord, colord, extend, getFormat, random };\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}