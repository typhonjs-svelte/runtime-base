{"version":3,"file":"index.js","sources":["../../../src/svelte/reactivity/SvelteSet.ts","../../../src/svelte/reactivity/ReadonlySvelteSet.ts"],"sourcesContent":["import { isIterable }   from '#runtime/util/object';\n\nimport type {\n   Readable,\n   Subscriber,\n   Unsubscriber }       from 'svelte/store';\n\n/**\n * Provides a Svelte 4 Readable store based Set implementation.\n *\n * Note: This implementation will be removed in transition to Svelte 5.\n */\nexport class SvelteSet<T> extends Set<T> implements Readable<SvelteSet<T>>\n{\n   /**\n    * Stores the subscribers.\n    */\n   #subscribers: Subscriber<SvelteSet<T>>[] = [];\n\n   constructor(entries?: Iterable<T>)\n   {\n      super();\n\n      if (entries !== void 0 && !isIterable(entries))\n      {\n         throw new TypeError(`'entries' must be an iterable list.`);\n      }\n\n      if (entries)\n      {\n         for (const entry of entries) { super.add(entry); }\n      }\n   }\n\n   /**\n    * Appends a new element with a specified value to the end of the Set.\n    *\n    * @param value - Value to add.\n    *\n    * @returns This instance.\n    */\n   add(value: T): this\n   {\n      const hasValue = super.has(value);\n\n      super.add(value);\n\n      if (!hasValue) { this.#updateSubscribers(); }\n\n      return this;\n   }\n\n   /**\n    * Clears this set.\n    */\n   clear()\n   {\n      if (this.size === 0) { return; }\n\n      super.clear();\n\n      this.#updateSubscribers();\n   }\n\n   /**\n    * Removes a specified value from the Set.\n    *\n    * @param value - Value to delete.\n    *\n    * @returns Returns true if an element in the Set existed and has been removed, or false if the element\n    *          does not exist.\n    */\n   delete(value: T): boolean\n   {\n      const result = super.delete(value);\n\n      if (result) { this.#updateSubscribers(); }\n\n      return result;\n   }\n\n   // Store subscriber implementation --------------------------------------------------------------------------------\n\n   /**\n    * @param handler - Callback function that is invoked on update / changes.\n    *\n    * @returns Unsubscribe function.\n    */\n   subscribe(handler: Subscriber<SvelteSet<T>>): Unsubscriber\n   {\n      const currentIdx = this.#subscribers.findIndex((sub) => sub === handler);\n      if (currentIdx === -1)\n      {\n         this.#subscribers.push(handler);\n         handler(this);\n      }\n\n      // Return unsubscribe function.\n      return () =>\n      {\n         const index = this.#subscribers.findIndex((sub) => sub === handler);\n         if (index >= 0) { this.#subscribers.splice(index, 1); }\n      };\n   }\n\n   /**\n    * Updates subscribers.\n    */\n   #updateSubscribers()\n   {\n      for (let cntr = 0; cntr < this.#subscribers.length; cntr++) { this.#subscribers[cntr](this); }\n   }\n}\n","import { subscribeIgnoreFirst }  from '#runtime/svelte/store/util';\n\nimport { SvelteSet }             from './SvelteSet'\n\nimport type {\n   Readable,\n   Subscriber,\n   Unsubscriber }                from 'svelte/store';\n\n/**\n * Provides a readonly variant of SvelteSet wrapping an instance of SvelteSet as the source.\n */\nexport class ReadonlySvelteSet<T> implements ReadonlySet<T>, Readable<ReadonlySvelteSet<T>>\n{\n   /**\n    * Stores the subscribers.\n    */\n   #subscribers: Subscriber<ReadonlySvelteSet<T>>[] = [];\n\n   /**\n    * The backing wrapped SvelteSet implementation.\n    */\n   readonly #svelteSet: SvelteSet<T>;\n\n   /**\n    * Unsubscriber when subscribed to backing SvelteSet.\n    */\n   #unsubscribe?: Unsubscriber;\n\n   /**\n    * Creates a readonly variant of SvelteSet.\n    *\n    * @param svelteSet - Backing wrapped SvelteSet implementation.\n    */\n   constructor(svelteSet: SvelteSet<T>)\n   {\n      if (!(svelteSet instanceof SvelteSet))\n      {\n         throw new TypeError(`'svelteSet' is not an instance of SvelteSet.`);\n      }\n\n      this.#svelteSet = svelteSet;\n   }\n\n   /**\n    * Iterates over values in the set.\n    */\n   [Symbol.iterator](): IterableIterator<T>\n   {\n      return this.#svelteSet.values();\n   }\n\n   /**\n    * Returns the number of unique elements in this set.\n    */\n   get size(): number\n   {\n      return this.#svelteSet.size;\n   }\n\n   /**\n    * Returns an iterable of [v,v] pairs for every value `v` in the set.\n    */\n   entries(): IterableIterator<[T, T]>\n   {\n      return this.#svelteSet.entries();\n   }\n\n   /**\n    * Executes a provided function once for each value in this set, in insertion order.\n    *\n    * @param callbackfn - Callback function.\n    *\n    * @param thisArg - Optional this reference for callback function.\n    */\n   forEach(callbackfn: (value: T, value2: T, set: ReadonlySvelteSet<T>) => void, thisArg?: unknown): void\n   {\n      for (const v of this.#svelteSet.values())\n      {\n         callbackfn.call(thisArg as any, v, v, this);\n      }\n   }\n\n   /**\n    * Returns a boolean indicating whether an element with the specified value exists in this set or not.\n    *\n    * @param value - Value to test.\n    */\n   has(value: T): boolean\n   {\n      return this.#svelteSet.has(value);\n   }\n\n   /**\n    * Despite its name, returns an iterable of the values in the set.\n    */\n   keys(): IterableIterator<T>\n   {\n      return this.#svelteSet.keys();\n   }\n\n   /**\n    * Returns an iterable of values in the set.\n    */\n   values(): IterableIterator<T>\n   {\n      return this.#svelteSet.values();\n   }\n\n   // Store subscriber implementation --------------------------------------------------------------------------------\n\n   /**\n    * @param handler - Callback function that is invoked on update / changes.\n    *\n    * @returns Unsubscribe function.\n    */\n   subscribe(handler: Subscriber<ReadonlySvelteSet<T>>): Unsubscriber\n   {\n      const currentIdx = this.#subscribers.findIndex((sub) => sub === handler);\n      if (currentIdx === -1)\n      {\n         this.#subscribers.push(handler);\n\n         if (this.#subscribers.length === 1)\n         {\n            this.#unsubscribe = subscribeIgnoreFirst(this.#svelteSet, this.#updateSubscribers.bind(this));\n         }\n\n         handler(this);\n      }\n\n      // Return unsubscribe function.\n      return () =>\n      {\n         const index = this.#subscribers.findIndex((sub) => sub === handler);\n         if (index >= 0)\n         {\n            this.#subscribers.splice(index, 1);\n\n            if (this.#subscribers.length === 0)\n            {\n               this.#unsubscribe?.();\n               this.#unsubscribe = void 0;\n            }\n         }\n      };\n   }\n\n   /**\n    * Updates subscribers.\n    */\n   #updateSubscribers()\n   {\n      for (let cntr = 0; cntr < this.#subscribers.length; cntr++) { this.#subscribers[cntr](this); }\n   }\n}\n"],"names":[],"mappings":"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"}