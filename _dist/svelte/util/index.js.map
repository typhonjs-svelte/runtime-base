{"version":3,"file":"index.js","sources":["../../../src/svelte/util/APIConfig.ts","../../../src/svelte/util/APIUtil.ts","../../../src/svelte/util/TJSSvelte.ts"],"sourcesContent":["import { CrossWindow }  from '#runtime/util/browser';\r\nimport { isObject }     from '#runtime/util/object';\r\n\r\nimport { TJSSvelte }    from './TJSSvelte';\r\n\r\n/**\r\n * Provides utilities to verify and parse {@link TJSSvelte.Config} configuration objects.\r\n */\r\nclass APIConfig\r\n{\r\n   private constructor() {}\r\n\r\n   /**\r\n    * Validates `config` argument whether it is a valid {@link TJSSvelte.Config.Dynamic} or\r\n    * {@link TJSSvelte.Config.Standard} configuration object suitable for parsing by\r\n    * {@link TJSSvelte.API.Config.parseConfig}.\r\n    *\r\n    * @param config - The potential config object to validate.\r\n    *\r\n    * @param [options] - Options.\r\n    *\r\n    * @param [options.raiseException=false] - If validation fails raise an exception.\r\n    *\r\n    * @returns Is the config a valid TJSSvelte.Config.Dynamic or TJSSvelte.Config.Standard configuration object.\r\n    *\r\n    * @throws {TypeError}  Any validation error when `raiseException` is enabled.\r\n    */\r\n   static isConfig(config: unknown, { raiseException = false }: { raiseException?: boolean } = {}):\r\n    config is TJSSvelte.Config.Dynamic | TJSSvelte.Config.Standard\r\n   {\r\n      if (!isObject(config))\r\n      {\r\n         if (raiseException) { throw new TypeError(`TJSSvelte.config.isConfig error: 'config' is not an object.`); }\r\n         return false;\r\n      }\r\n\r\n      if (!TJSSvelte.util.isComponent(config.class))\r\n      {\r\n         if (raiseException)\r\n         {\r\n            throw new TypeError(\r\n             `TJSSvelte.config.isConfig error: 'config.class' is not a Svelte component constructor.`);\r\n         }\r\n         return false;\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   /**\r\n    * Validates `config` argument whether it is a valid {@link TJSSvelte.Config.Embed} configuration object\r\n    * suitable for directly mounting via the `<svelte:component>` directive.\r\n    *\r\n    * @param config - The potential config object to validate.\r\n    *\r\n    * @param [options] - Options.\r\n    *\r\n    * @param [options.raiseException=false] - If validation fails raise an exception.\r\n    *\r\n    * @returns Is the config a valid TJSSvelte.Config.Embed configuration object.\r\n    *\r\n    * @throws {TypeError}  Any validation error when `raiseException` is enabled.\r\n    */\r\n   static isConfigEmbed(config: unknown, { raiseException = false }: { raiseException?: boolean } = {}):\r\n    config is TJSSvelte.Config.Embed\r\n   {\r\n      if (!isObject(config))\r\n      {\r\n         if (raiseException)\r\n         {\r\n            throw new TypeError(`TJSSvelte.config.isConfigEmbed error: 'config' is not an object.`);\r\n         }\r\n         return false;\r\n      }\r\n\r\n      if (!TJSSvelte.util.isComponent(config.class))\r\n      {\r\n         if (raiseException)\r\n         {\r\n            throw new TypeError(\r\n             `TJSSvelte.config.isConfigEmbed error: 'config.class' is not a Svelte component constructor.`);\r\n         }\r\n         return false;\r\n      }\r\n\r\n      if (config.props !== void 0 && !isObject(config.props))\r\n      {\r\n         if (raiseException)\r\n         {\r\n            throw new TypeError(`TJSSvelte.config.isConfigEmbed error: 'config.props' is not an object.`);\r\n         }\r\n         return false;\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   /**\r\n    * Parses a TyphonJS Svelte dynamic or standard config object ensuring that the class specified is a Svelte\r\n    * component, loads any dynamic defined `context` or `props` preparing the config object for loading into the\r\n    * Svelte component.\r\n    *\r\n    * @param config - Svelte config object.\r\n    *\r\n    * @param [options] - Options.\r\n    *\r\n    * @param [options.contextExternal] - When true any context data provided will be loaded into `#external`\r\n    *        context separating it from any internal context created by the component.\r\n    *\r\n    * @param [options.thisArg] - `This` reference to set for invoking any `context` or `props` defined as\r\n    *        functions for {@link Config.Dynamic} configuration objects.\r\n    *\r\n    * @returns The processed Svelte config object turned with parsed `props` & `context` converted into the format\r\n    *          supported by Svelte.\r\n    */\r\n   static parseConfig(config: TJSSvelte.Config.Dynamic | TJSSvelte.Config.Standard,\r\n    { contextExternal = false, thisArg = void 0 }: { contextExternal?: boolean, thisArg?: unknown } = {}):\r\n     TJSSvelte.Config.Parsed\r\n   {\r\n      if (!isObject(config))\r\n      {\r\n         throw new TypeError(\r\n          `TJSSvelte.config.parseConfig - 'config' is not an object:\\n${JSON.stringify(config)}.`);\r\n      }\r\n\r\n      if (!TJSSvelte.util.isComponent(config.class))\r\n      {\r\n         throw new TypeError(\r\n          `TJSSvelte.config.parseConfig - 'class' is not a Svelte component constructor for config:\\n${\r\n            JSON.stringify(config)}.`);\r\n      }\r\n\r\n      if (config.hydrate !== void 0 && typeof config.hydrate !== 'boolean')\r\n      {\r\n         throw new TypeError(\r\n          `TJSSvelte.config.parseConfig - 'hydrate' is not a boolean for config:\\n${JSON.stringify(config)}.`);\r\n      }\r\n\r\n      if (config.intro !== void 0 && typeof config.intro !== 'boolean')\r\n      {\r\n         throw new TypeError(\r\n          `TJSSvelte.config.parseConfig - 'intro' is not a boolean for config:\\n${JSON.stringify(config)}.`);\r\n      }\r\n\r\n      if (config.target !== void 0 && !CrossWindow.isElement(config.target) &&\r\n       !CrossWindow.isShadowRoot(config.target) && !CrossWindow.isDocumentFragment(config.target))\r\n      {\r\n         throw new TypeError(\r\n          `TJSSvelte.config.parseConfig - 'target' is not a Element, ShadowRoot, or DocumentFragment for config:\\n${\r\n           JSON.stringify(config)}.`);\r\n      }\r\n\r\n      if (config.anchor !== void 0 && !CrossWindow.isElement(config.anchor) &&\r\n       !CrossWindow.isShadowRoot(config.anchor) && !CrossWindow.isDocumentFragment(config.anchor))\r\n      {\r\n         throw new TypeError(`TJSSvelte.config.parseConfig - 'anchor' is not a string, Element for config:\\n${\r\n          JSON.stringify(config)}.`);\r\n      }\r\n\r\n      if (config.context !== void 0 && typeof config.context !== 'function' && !isObject(config.context))\r\n      {\r\n         throw new TypeError(\r\n          `TJSSvelte.config.parseConfig - 'context' is not a function or object for config:\\n${\r\n           JSON.stringify(config)}.`);\r\n      }\r\n\r\n      const svelteConfig: { [key: string]: any } = { ...config };\r\n\r\n      let context: { [key: string]: any } = {};\r\n\r\n      // If a context callback function is provided then invoke it with `this` being the Foundry app.\r\n      // If an object is returned it adds the entries to external context.\r\n      if (typeof svelteConfig.context === 'function')\r\n      {\r\n         const contextFunc: Function = svelteConfig.context;\r\n         delete svelteConfig.context;\r\n\r\n         const result: unknown = contextFunc.call(thisArg);\r\n         if (isObject(result))\r\n         {\r\n            context = { ...result };\r\n         }\r\n         else\r\n         {\r\n            throw new Error(\r\n             `TJSSvelte.config.parseConfig - 'context' is a function that did not return an object for config:\\n${\r\n              JSON.stringify(config)}`);\r\n         }\r\n      }\r\n      else if (isObject(svelteConfig.context))\r\n      {\r\n         context = svelteConfig.context;\r\n         delete svelteConfig.context;\r\n      }\r\n\r\n      // If a props is a function then invoke it with `this` being the Foundry app.\r\n      // If an object is returned set it as the props.\r\n      svelteConfig.props = this.#processProps(svelteConfig.props, thisArg, config);\r\n\r\n\r\n      if (contextExternal)\r\n      {\r\n         svelteConfig.context = new Map();\r\n         svelteConfig.context.set('#external', context);\r\n      }\r\n      else\r\n      {\r\n         svelteConfig.context = new Map(Object.entries(context));\r\n      }\r\n\r\n      return svelteConfig as TJSSvelte.Config.Parsed;\r\n   }\r\n\r\n   // Internal implementation ----------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * Processes Svelte props. Potentially props can be a function to invoke with `thisArg`.\r\n    *\r\n    * @param props - Svelte props.\r\n    *\r\n    * @param thisArg - `This` reference to set for invoking any props function.\r\n    *\r\n    * @param config - Svelte config\r\n    *\r\n    * @returns Svelte props.\r\n    */\r\n   static #processProps(props: { [key: string]: any } | Function, thisArg: unknown,\r\n    config: TJSSvelte.Config.Dynamic | TJSSvelte.Config.Standard): { [key: string]: any }\r\n   {\r\n      // If a props is a function then invoke it with `this` being the Foundry app.\r\n      // If an object is returned set it as the props.\r\n      if (typeof props === 'function')\r\n      {\r\n         const result: unknown = props.call(thisArg);\r\n         if (isObject(result))\r\n         {\r\n            return result;\r\n         }\r\n         else\r\n         {\r\n            throw new Error(\r\n             `TJSSvelte.config.parseConfig - 'props' is a function that did not return an object for config:\\n${\r\n              JSON.stringify(config)}`);\r\n         }\r\n      }\r\n      else if (isObject(props))\r\n      {\r\n         return props;\r\n      }\r\n      else if (props !== void 0)\r\n      {\r\n         throw new Error(`TJSSvelte.config.parseConfig - 'props' is not a function or an object for config:\\n${\r\n          JSON.stringify(config)}`);\r\n      }\r\n\r\n      return {};\r\n   }\r\n}\r\n\r\nObject.seal(APIConfig);\r\n\r\nexport { APIConfig };\r\n","// @ts-ignore\r\nimport { check_outros, group_outros, transition_out } from '#svelte/internal';\r\n\r\nimport type { SvelteComponent }  from 'svelte';\r\n\r\n/**\r\n * Various utilities to duck type / detect Svelte components and run outro transition while destroying a component\r\n * externally.\r\n */\r\nclass APIUtil\r\n{\r\n   private constructor() {}\r\n\r\n   /**\r\n    * Provides basic duck typing to determine if the provided function is a constructor function for a Svelte\r\n    * component.\r\n    *\r\n    * @param comp - Data to check as a Svelte component.\r\n    *\r\n    * @returns Whether basic duck typing succeeds.\r\n    */\r\n   static isComponent(comp: unknown): boolean\r\n   {\r\n      if (comp === null || comp === void 0 || typeof comp !== 'function') { return false; }\r\n\r\n      // When using Vite in a developer build the SvelteComponent is wrapped in a ProxyComponent class.\r\n      // This class doesn't define methods on the prototype, so we must check if the constructor name\r\n      // starts with `Proxy<` as it provides the wrapped component as `Proxy<_wrapped component name_>`.\r\n      const prototypeName: unknown = comp?.prototype?.constructor?.name;\r\n\r\n      if (typeof prototypeName === 'string' && (prototypeName.startsWith('Proxy<') ||\r\n       prototypeName === 'ProxyComponent'))\r\n      {\r\n         return true;\r\n      }\r\n\r\n      return typeof window !== 'undefined' ?\r\n       typeof comp?.prototype?.$destroy === 'function' && typeof comp?.prototype?.$on === 'function' : // client-side\r\n        typeof comp?.prototype?.render === 'function'; // server-side\r\n   }\r\n\r\n   /**\r\n    * Provides basic duck typing to determine if the provided object is a HMR ProxyComponent instance or class.\r\n    *\r\n    * @param {unknown}  comp - Data to check as a HMR proxy component.\r\n    *\r\n    * @returns {boolean} Whether basic duck typing succeeds.\r\n    */\r\n   static isHMRProxy(comp: unknown): boolean\r\n   {\r\n      const instanceName: string | undefined = comp?.constructor?.name;\r\n      if (typeof instanceName === 'string' && (instanceName.startsWith('Proxy<') || instanceName === 'ProxyComponent'))\r\n      {\r\n         return true;\r\n      }\r\n\r\n      // @ts-ignore\r\n      const prototypeName: unknown = comp?.prototype?.constructor?.name;\r\n      return typeof prototypeName === 'string' && (prototypeName.startsWith('Proxy<') ||\r\n       prototypeName === 'ProxyComponent');\r\n   }\r\n\r\n   /**\r\n    * Runs outro transition then destroys Svelte component.\r\n    *\r\n    * Workaround for https://github.com/sveltejs/svelte/issues/4056\r\n    *\r\n    * @param instance - A Svelte component.\r\n    *\r\n    * @returns Promise returned after outro transition completed and component destroyed.\r\n    */\r\n   static async outroAndDestroy(instance: SvelteComponent): Promise<void>\r\n   {\r\n      if (instance === void 0 || instance === null) { return Promise.resolve(); }\r\n\r\n      return new Promise((resolve: () => void): void =>\r\n      {\r\n         if (instance?.$$?.fragment && instance?.$$?.fragment?.o)\r\n         {\r\n            group_outros();\r\n            transition_out(instance.$$.fragment, 0, 0, () =>\r\n            {\r\n               instance?.$destroy?.();\r\n               resolve();\r\n            });\r\n            check_outros();\r\n         }\r\n         else\r\n         {\r\n            instance?.$destroy?.();\r\n            resolve();\r\n         }\r\n      });\r\n   }\r\n}\r\n\r\nObject.seal(APIUtil);\r\n\r\nexport { APIUtil };\r\n","import { APIConfig }       from './APIConfig';\r\nimport { APIUtil }         from './APIUtil';\r\n\r\nimport type {\r\n   ComponentConstructorOptions,\r\n   ComponentProps,\r\n   SvelteComponent }       from 'svelte';\r\n\r\n/**\r\n * Provides utilities to verify and parse {@link TJSSvelte.Config} configuration objects and general verification of\r\n * Svelte components.\r\n */\r\nclass TJSSvelte\r\n{\r\n   private constructor() {}\r\n\r\n   static get config(): TJSSvelte.API.Config { return APIConfig; }\r\n\r\n   /**\r\n    * @returns The utility API.\r\n    */\r\n   static get util(): TJSSvelte.API.Util { return APIUtil; }\r\n}\r\n\r\nObject.seal(TJSSvelte);\r\n\r\nexport { TJSSvelte };\r\n\r\ndeclare namespace TJSSvelte {\r\n   export namespace API {\r\n      export interface Config {\r\n         /**\r\n          * Validates `config` argument whether it is a valid {@link TJSSvelte.Config.Dynamic} or\r\n          * {@link TJSSvelte.Config.Standard} configuration object suitable for parsing by\r\n          * {@link TJSSvelte.API.Config.parseConfig}.\r\n          *\r\n          * @param config - The potential config object to validate.\r\n          *\r\n          * @param [options] - Options.\r\n          *\r\n          * @param [options.raiseException=false] - If validation fails raise an exception.\r\n          *\r\n          * @returns Is the config a valid TJSSvelte.Config.Dynamic or TJSSvelte.Config.Standard configuration object.\r\n          *\r\n          * @throws {TypeError}  Any validation error when `raiseException` is enabled.\r\n          */\r\n         isConfig(config: unknown, options?: { raiseException?: boolean }):\r\n          config is TJSSvelte.Config.Dynamic | TJSSvelte.Config.Standard;\r\n\r\n         /**\r\n          * Validates `config` argument whether it is a valid {@link TJSSvelte.Config.Embed} configuration object\r\n          * suitable for directly mounting via the `<svelte:component>` directive.\r\n          *\r\n          * @param config - The potential config object to validate.\r\n          *\r\n          * @param [options] - Options.\r\n          *\r\n          * @param [options.raiseException=false] - If validation fails raise an exception.\r\n          *\r\n          * @returns Is the config a valid TJSSvelte.Config.Embed configuration object.\r\n          *\r\n          * @throws {TypeError}  Any validation error when `raiseException` is enabled.\r\n          */\r\n         isConfigEmbed(config: unknown, options?: { raiseException?: boolean }):\r\n          config is TJSSvelte.Config.Embed;\r\n\r\n         /**\r\n          * Parses a TyphonJS Svelte dynamic or standard config object ensuring that the class specified is a Svelte\r\n          * component, loads any dynamic defined `context` or `props` preparing the config object for loading into the\r\n          * Svelte component.\r\n          *\r\n          * @param config - Svelte config object.\r\n          *\r\n          * @param [options] - Options.\r\n          *\r\n          * @param [options.contextExternal] - When true any context data provided will be loaded into `#external`\r\n          *        context separating it from any internal context created by the component.\r\n          *\r\n          * @param [options.thisArg] - `This` reference to set for invoking any `context` or `props` defined as\r\n          *        functions for {@link Config.Dynamic} configuration objects.\r\n          *\r\n          * @returns The processed Svelte config object turned with parsed `props` & `context` converted into the format\r\n          *          supported by Svelte.\r\n          */\r\n         parseConfig(config: TJSSvelte.Config.Dynamic | TJSSvelte.Config.Standard, options?: { thisArg?: unknown }):\r\n          TJSSvelte.Config.Parsed;\r\n      }\r\n\r\n      export interface Util {\r\n         /**\r\n          * Provides basic duck typing to determine if the provided function is a constructor function for a Svelte\r\n          * component.\r\n          *\r\n          * @param comp - Data to check as a Svelte component.\r\n          *\r\n          * @returns Whether basic duck typing succeeds.\r\n          */\r\n         isComponent(comp: unknown): boolean;\r\n\r\n         /**\r\n          * Provides basic duck typing to determine if the provided object is a HMR ProxyComponent instance or class.\r\n          *\r\n          * @param {unknown}  comp - Data to check as a HMR proxy component.\r\n          *\r\n          * @returns {boolean} Whether basic duck typing succeeds.\r\n          */\r\n         isHMRProxy(comp: unknown): boolean;\r\n\r\n         /**\r\n          * Runs outro transition then destroys Svelte component.\r\n          *\r\n          * Workaround for https://github.com/sveltejs/svelte/issues/4056\r\n          *\r\n          * @param instance - A Svelte component.\r\n          *\r\n          * @returns Promise returned after outro transition completed and component destroyed.\r\n          */\r\n         outroAndDestroy(instance: SvelteComponent): Promise<void>;\r\n      }\r\n   }\r\n\r\n   export namespace Config {\r\n      /**\r\n       * Provides the TRL / client side configuration object to load a Svelte component that is suitable to use\r\n       * with {@link TJSSvelte.API.Config.parseConfig}.\r\n       *\r\n       * Defines a dynamic config that allows the `context` and `props` properties to also be defined as a function that\r\n       * returns an object of properties to respectively load into given component. This can be useful when defining a\r\n       * config in a static context where it is helpful to pass an instance / `this` reference when defining `context`\r\n       * and `props`.\r\n       *\r\n       * See {@link Config.Embed} or {@link Config.Standard} that narrows the type accepted for `context` and `props`\r\n       * to just an `object`.\r\n       *\r\n       * @typeParam Component - A specific component to narrow the allowed `class` and `props`.\r\n       *\r\n       * @typeParam [Config] - Additional options to omit properties from allowed in `context` or `props`.\r\n       */\r\n      interface Dynamic<Component extends SvelteComponent = SvelteComponent, Config extends {\r\n         ContextOmit?: keyof NonNullable<Config['ContextShape']>;\r\n         ContextShape?: { [key: string]: any };\r\n         PropsOmit?: keyof ComponentProps<Component>;\r\n      } = { ContextOmit: never, ContextShape: {}, PropsOmit: never }> {\r\n         /**\r\n          * A child of `target` to render the component immediately before.\r\n          */\r\n         anchor?: Element;\r\n\r\n         /**\r\n          * The Svelte component class / constructor function.\r\n          */\r\n         class: new(options: ComponentConstructorOptions<ComponentProps<Component>>) => Component;\r\n\r\n         /**\r\n          * The root-level additional data to add to the context passed to the component.\r\n          */\r\n         context?: NarrowContextObject<Config> | NarrowContextFunction<Config>;\r\n\r\n         /**\r\n          * If true, will play transitions on initial render, rather than waiting for subsequent state changes.\r\n          */\r\n         intro?: boolean;\r\n\r\n         /**\r\n          * Props to pass to the component. You may define props as an `object` or a function returning an `object`.\r\n          */\r\n         props?: NarrowPropsObject<Component, Config> | NarrowPropsFunction<Component, Config>;\r\n\r\n         /**\r\n          * The target to render component to. By default, `document.body` is used as the target if not otherwise\r\n          * defined.\r\n          */\r\n         target?: Element | Document | ShadowRoot;\r\n      }\r\n\r\n      /**\r\n       * Defines the TRL / client side embed configuration object to load a Svelte component that is suitable to be\r\n       * mounted directly by the `<svelte:component>` directive. Just `class` and `props` are supported.\r\n       *\r\n       * @typeParam Component - A specific component to narrow the allowed `class` and `props`.\r\n       *\r\n       * @typeParam [Config] - Additional options to omit properties from allowed in `context` or `props`.\r\n       */\r\n      interface Embed<Component extends SvelteComponent = SvelteComponent, Config extends {\r\n         PropsOmit?: keyof ComponentProps<Component>;\r\n      } = { PropsOmit: never }> {\r\n         /**\r\n          * The Svelte component class / constructor function.\r\n          */\r\n         class: new(options: ComponentConstructorOptions<ComponentProps<Component>>) => Component;\r\n\r\n         /**\r\n          * If true, will play transitions on initial render, rather than waiting for subsequent state changes.\r\n          */\r\n         intro?: boolean;\r\n\r\n         /**\r\n          * Props to pass to the component. You may define props as an `object`.\r\n          */\r\n         props?: NarrowPropsObject<Component, Config>;\r\n      }\r\n\r\n      /**\r\n       * Defines the TRL / client side configuration object to load a Svelte component that is suitable to use\r\n       * with {@link TJSSvelte.API.Config.parseConfig}.\r\n       *\r\n       * @typeParam Component - A specific component to narrow the allowed `class` and `props`.\r\n       *\r\n       * @typeParam [Config] - Additional options to omit properties from allowed in `context` or `props`.\r\n       */\r\n      interface Standard<Component extends SvelteComponent = SvelteComponent, Config extends {\r\n         ContextOmit?: keyof NonNullable<Config['ContextShape']>;\r\n         ContextShape?: { [key: string]: any };\r\n         PropsOmit?: keyof ComponentProps<Component>;\r\n      } = { ContextOmit: never, ContextShape: {}, PropsOmit: never }> {\r\n         /**\r\n          * A child of `target` to render the component immediately before.\r\n          */\r\n         anchor?: Element;\r\n\r\n         /**\r\n          * The Svelte component class / constructor function.\r\n          */\r\n         class: new(options: ComponentConstructorOptions<ComponentProps<Component>>) => Component;\r\n\r\n         /**\r\n          * The root-level additional data to add to the context passed to the component.\r\n          */\r\n         context?: NarrowContextObject<Config>;\r\n\r\n         /**\r\n          * If true, will play transitions on initial render, rather than waiting for subsequent state changes.\r\n          */\r\n         intro?: boolean;\r\n\r\n         /**\r\n          * Props to pass to the component. You may define props as an `object`.\r\n          */\r\n         props?: NarrowPropsObject<Component, Config>;\r\n\r\n         /**\r\n          * The target to render component to. By default, `document.body` is used as the target if not otherwise\r\n          * defined.\r\n          */\r\n         target?: Element | Document | ShadowRoot;\r\n      }\r\n\r\n      /**\r\n       * The result of after parsing {@link Standard} or {@link Dynamic} by {@link TJSSvelte.parseConfig}.\r\n       */\r\n      interface Parsed\r\n      {\r\n         /**\r\n          * The Svelte component class / constructor function.\r\n          */\r\n         class: new(options: ComponentConstructorOptions<ComponentProps<SvelteComponent>>) => SvelteComponent;\r\n\r\n         /**\r\n          * A child of `target` to render the component immediately before.\r\n          */\r\n         anchor?: Element;\r\n\r\n         /**\r\n          * The root-level additional data to add to the context passed to the component.\r\n          */\r\n         context: Map<string, any>;\r\n\r\n         /**\r\n          * If true, will play transitions on initial render, rather than waiting for subsequent state changes.\r\n          */\r\n         intro?: boolean;\r\n\r\n         /**\r\n          * Props to pass to the component.\r\n          */\r\n         props: { [key: string]: any };\r\n\r\n         /**\r\n          * The target to render component to.\r\n          */\r\n         target?: Element | Document | ShadowRoot;\r\n      }\r\n   }\r\n}\r\n\r\n// Internal Utility Types --------------------------------------------------------------------------------------------\r\n\r\n/**\r\n * Always narrow and evaluate the `context` property even if `ConfigShape` just has the omitted keys. This is done\r\n * through the forced addition of `__uniqueKey_DO_NOT_USE_OR_REMOVE__`.\r\n *\r\n * Also do not evaluate if `ContextOmit` is undefined / never.\r\n */\r\ntype NarrowContextFunction<Config extends {\r\n   ContextOmit?: keyof NonNullable<Config['ContextShape']> | '__uniqueKey_DO_NOT_USE_OR_REMOVE__';\r\n   ContextShape?: { [key: string]: unknown };\r\n}> = (() => Config['ContextOmit'] extends never ? NonNullable<Config['ContextShape']> : Omit<\r\n   NonNullable<Config['ContextShape']> & { __uniqueKey_DO_NOT_USE_OR_REMOVE__?: never },\r\n   NonNullable<Config extends { ContextOmit: infer OmitType } ? OmitType : ''>\r\n>);\r\n\r\n/**\r\n * Always narrow and evaluate the `context` property even if `ConfigShape` just has the omitted keys. This is done\r\n * through the forced addition of `__uniqueKey_DO_NOT_USE_OR_REMOVE__`.\r\n *\r\n * Also do not evaluate if `ContextOmit` is undefined / never.\r\n */\r\ntype NarrowContextObject<Config extends {\r\n   ContextOmit?: keyof NonNullable<Config['ContextShape']> | '__uniqueKey_DO_NOT_USE_OR_REMOVE__';\r\n   ContextShape?: { [key: string]: unknown };\r\n}> = Config['ContextOmit'] extends never ? NonNullable<Config['ContextShape']> : Omit<\r\n   NonNullable<Config['ContextShape']> & { __uniqueKey_DO_NOT_USE_OR_REMOVE__?: never },\r\n   NonNullable<Config extends { ContextOmit: infer OmitType } ? OmitType : ''>\r\n>;\r\n\r\n/**\r\n * Narrows allowed props omitting / preventing definition of anything defined in `PropsOmit`.\r\n */\r\ntype NarrowPropsFunction<Component extends SvelteComponent, Config extends {\r\n   PropsOmit?: keyof ComponentProps<Component>;\r\n}> = (() => Partial<{\r\n   [K in keyof ComponentProps<Component>]: K extends NonNullable<Config['PropsOmit']> ? never :\r\n    ComponentProps<Component>[K];\r\n}>);\r\n\r\n/**\r\n * Narrows allowed props omitting / preventing definition of anything defined in `PropsOmit`.\r\n *\r\n * Note: If `PropsOmit` includes all valid props, the type system will allow any props.\r\n */\r\ntype NarrowPropsObject<Component extends SvelteComponent, Config extends {\r\n   PropsOmit?: keyof ComponentProps<Component>;\r\n}> = Partial<Omit<ComponentProps<Component>, NonNullable<Config['PropsOmit']>>>;\r\n"],"names":[],"mappings":"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"}