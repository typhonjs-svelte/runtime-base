{"version":3,"file":"index.js","sources":["../../../../../src/svelte/store/reducer/array-object/ObjectEntryStore.ts","../../../../../src/svelte/store/reducer/array-object/ArrayObjectStore.ts","../../../../../src/svelte/store/reducer/array-object/CrudArrayObjectStore.ts"],"sourcesContent":["import { Hashing }               from '#runtime/util';\r\nimport { isObject }              from '#runtime/util/object';\r\n\r\nimport type {\r\n   Subscriber,\r\n   Unsubscriber }                from 'svelte/store';\r\n\r\nimport type { MinimalWritable }  from '#runtime/svelte/store/util';\r\n\r\nimport type { ArrayObjectStore } from './ArrayObjectStore';\r\n\r\nimport type {\r\n   BaseArrayObject,\r\n   BaseObjectEntryStore }   from './types';\r\n\r\n/**\r\n * Provides a base implementation for store entries in {@link ArrayObjectStore}.\r\n *\r\n * In particular providing the required getting / accessor for the 'id' property.\r\n */\r\nexport abstract class ObjectEntryStore<T extends BaseArrayObject = BaseArrayObject> implements\r\n BaseObjectEntryStore<T>\r\n{\r\n   /**\r\n    */\r\n   readonly #data: T;\r\n\r\n   /**\r\n    * Stores the subscribers.\r\n    */\r\n   #subscribers: Subscriber<T>[] = [];\r\n\r\n   /**\r\n    * Invoked by ArrayObjectStore to provide custom duplication. Override this static method in your entry store.\r\n    *\r\n    * @param data - A copy of local data w/ new ID already set.\r\n    *\r\n    * @param arrayStore - The source ArrayObjectStore instance.\r\n    */\r\n   static duplicate(data: object, arrayStore: ArrayObjectStore<any>): void {}  // eslint-disable-line no-unused-vars\r\n\r\n   /**\r\n    * @param data -\r\n    */\r\n   constructor(data: T)\r\n   {\r\n      if (!isObject(data)) { throw new TypeError(`'data' is not an object.`); }\r\n\r\n      this.#data = data;\r\n\r\n      // If `id` is missing then add it.\r\n      if (typeof this.#data.id !== 'string') { this.#data.id = Hashing.uuidv4(); }\r\n\r\n      if (!Hashing.isUuidv4(this.#data.id))\r\n      {\r\n         throw new Error(`'data.id' (${this.#data.id}) is not a valid UUIDv4 string.`);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @returns The object data tracked by this store.\r\n    */\r\n   protected get _data(): T { return this.#data; }\r\n\r\n   /**\r\n    * @returns The ID attribute in object data tracked by this store.\r\n    */\r\n   get id(): string { return this.#data.id as string; }\r\n\r\n   // ----------------------------------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * To be implemented by child implementations as required by the {@link MinimalWritable} contract. You must manually\r\n    * invoke {@link ObjectEntryStore._updateSubscribers} to notify subscribers.\r\n    *\r\n    * @param data Data to set to store.\r\n    */\r\n   abstract set(data: T): void;\r\n\r\n   /**\r\n    * @returns A JSON data object for the backing data. The default implementation directly returns the backing private\r\n    *          data object. You may override this method to clone the data via {@link ObjectEntryStore._data}.\r\n    */\r\n   toJSON(): T\r\n   {\r\n      return this.#data;\r\n   }\r\n\r\n   /**\r\n    * @param handler - Callback function that is invoked on update / changes.\r\n    *\r\n    * @returns Unsubscribe function.\r\n    */\r\n   subscribe(handler: Subscriber<T>): Unsubscriber\r\n   {\r\n      this.#subscribers.push(handler);  // add handler to the array of subscribers\r\n\r\n      handler(this.#data);                // call handler with current value\r\n\r\n      // Return unsubscribe function.\r\n      return (): void =>\r\n      {\r\n         const index: number = this.#subscribers.findIndex((sub: Subscriber<T>): boolean => sub === handler);\r\n         if (index >= 0) { this.#subscribers.splice(index, 1); }\r\n      };\r\n   }\r\n\r\n   /**\r\n    * Update subscribers of this store. Useful for child implementations.\r\n    */\r\n   protected _updateSubscribers(): void\r\n   {\r\n      for (let cntr: number = 0; cntr < this.#subscribers.length; cntr++) { this.#subscribers[cntr](this.#data); }\r\n   }\r\n}\r\n","import { DynArrayReducer }       from '#runtime/svelte/store/reducer';\r\n\r\nimport {\r\n   isMinimalWritableStore,\r\n   subscribeIgnoreFirst }        from '#runtime/svelte/store/util';\r\n\r\nimport {\r\n   Hashing,\r\n   Timing }                      from '#runtime/util';\r\n\r\nimport {\r\n   hasGetter,\r\n   isObject,\r\n   klona }                       from '#runtime/util/object';\r\n\r\nimport { ObjectEntryStore }      from './ObjectEntryStore';\r\n\r\nimport type {\r\n   Subscriber,\r\n   Unsubscriber }                from 'svelte/store';\r\n\r\nimport type {\r\n   ArrayObjectStoreParams,\r\n   BaseObjectEntryStore,\r\n   ExtractDataType }             from './types';\r\n\r\n/**\r\n * @typeParam S - Store type.\r\n */\r\nexport class ArrayObjectStore<S extends BaseObjectEntryStore<any>>\r\n{\r\n   /**\r\n    */\r\n   #data: S[] = [];\r\n\r\n   /**\r\n    */\r\n   #dataMap: Map<string, { store: S, unsubscribe: Unsubscriber }> = new Map();\r\n\r\n   /**\r\n    */\r\n   readonly #dataReducer: DynArrayReducer<S> | undefined;\r\n\r\n   /**\r\n    */\r\n   readonly #manualUpdate: boolean;\r\n\r\n   /**\r\n    */\r\n   readonly #StoreClass: {\r\n      new (...args: any[]): S;\r\n      duplicate?(data: any, arrayStore: ArrayObjectStore<any>): void\r\n   };\r\n\r\n   /**\r\n    * Stores the subscribers.\r\n    */\r\n   #subscribers: Subscriber<S[]>[] = [];\r\n\r\n   /**\r\n    */\r\n   readonly #updateSubscribersBound: (update: boolean | ExtractDataType<S> | undefined) => void;\r\n\r\n   /**\r\n    * @returns The default object entry store constructor that can facilitate the creation of the required\r\n    *          {@link ArrayObjectStoreParams.StoreClass} and generic `T` type parameter.\r\n    */\r\n   static get EntryStore(): typeof ObjectEntryStore { return ObjectEntryStore; }\r\n\r\n   /**\r\n    * @param params -\r\n    */\r\n   constructor({ StoreClass, childDebounce = 250, dataReducer = false, manualUpdate = false }:\r\n    ArrayObjectStoreParams<S>)\r\n   {\r\n      if (!Number.isInteger(childDebounce) || childDebounce < 0 || childDebounce > 1000)\r\n      {\r\n         throw new TypeError(`'childDebounce' must be an integer between and including 0 - 1000.`);\r\n      }\r\n\r\n      if (typeof manualUpdate !== 'boolean') { throw new TypeError(`'manualUpdate' is not a boolean.`); }\r\n\r\n      if (!isMinimalWritableStore(StoreClass.prototype))\r\n      {\r\n         throw new TypeError(`'StoreClass' is not a minimal writable store constructor.`);\r\n      }\r\n\r\n      if (!hasGetter(StoreClass.prototype, 'id'))\r\n      {\r\n         throw new TypeError(`'StoreClass' does not have a getter accessor for 'id' property.`);\r\n      }\r\n\r\n      this.#manualUpdate = manualUpdate;\r\n\r\n      this.#StoreClass = StoreClass;\r\n\r\n      if (dataReducer) { this.#dataReducer = new DynArrayReducer({ data: this.#data }); }\r\n\r\n      // Prepare a debounced callback that is used for all child store entry subscriptions.\r\n      this.#updateSubscribersBound = childDebounce === 0 ? this.updateSubscribers.bind(this) :\r\n       Timing.debounce((update: boolean | ExtractDataType<S> | undefined): void => this.updateSubscribers(update),\r\n        childDebounce);\r\n   }\r\n\r\n   /**\r\n    * Provide an iterator for public access to entry stores.\r\n    *\r\n    * @returns iterator\r\n    */\r\n   *[Symbol.iterator](): IterableIterator<S>\r\n   {\r\n      if (this.#data.length === 0) { return; }\r\n\r\n      for (const entryStore of this.#data) { yield entryStore; }\r\n   }\r\n\r\n   /**\r\n    * @returns The internal data array tracked allowing child classes direct access.\r\n    */\r\n   protected get _data(): S[] { return this.#data; }\r\n\r\n   /**\r\n    * @returns The data reducer.\r\n    */\r\n   get dataReducer(): DynArrayReducer<S>\r\n   {\r\n      if (!this.#dataReducer)\r\n      {\r\n         throw new Error(\r\n          `'dataReducer' is not initialized; did you forget to specify 'dataReducer' as true in constructor options?`);\r\n      }\r\n\r\n      return this.#dataReducer;\r\n   }\r\n\r\n   /**\r\n    * @returns The length of all data.\r\n    */\r\n   get length(): number { return this.#data.length; }\r\n\r\n   /**\r\n    * Removes all child store entries.\r\n    */\r\n   clearEntries(): void\r\n   {\r\n      for (const storeEntryData of this.#dataMap.values()) { storeEntryData.unsubscribe(); }\r\n\r\n      this.#dataMap.clear();\r\n      this.#data.length = 0;\r\n\r\n      this.updateSubscribers();\r\n   }\r\n\r\n   /**\r\n    * Creates a new store from given data.\r\n    *\r\n    * @param entryData - Entry data.\r\n    *\r\n    * @returns The store\r\n    */\r\n   createEntry(entryData: ExtractDataType<S>): S\r\n   {\r\n      if (!isObject(entryData)) { throw new TypeError(`'entryData' is not an object.`); }\r\n\r\n      if (typeof entryData.id !== 'string') { entryData.id = Hashing.uuidv4(); }\r\n\r\n      if (this.#data.findIndex((entry: S): boolean => entry.id === entryData.id) >= 0)\r\n      {\r\n         throw new Error(`'entryData.id' (${entryData.id}) already in this ArrayObjectStore instance.`);\r\n      }\r\n\r\n      // The required `id` is added to `entryData` if not defined.\r\n      const store: S = this.#createStore(entryData);\r\n\r\n      this.updateSubscribers();\r\n\r\n      return store;\r\n   }\r\n\r\n   /**\r\n    * Add a new store entry from the given data.\r\n    *\r\n    * @param entryData - Entry data.\r\n    *\r\n    * @returns New store entry instance.\r\n    */\r\n   #createStore(entryData: ExtractDataType<S>): S\r\n   {\r\n      const store = new this.#StoreClass(entryData, this);\r\n\r\n      if (!Hashing.isUuidv4(store.id))\r\n      {\r\n         throw new Error(`'store.id' (${store.id}) is not a UUIDv4 compliant string.`);\r\n      }\r\n\r\n      const unsubscribe: Unsubscriber = subscribeIgnoreFirst(store, this.#updateSubscribersBound);\r\n\r\n      this.#data.push(store);\r\n      this.#dataMap.set(store.id, { store, unsubscribe });\r\n\r\n      return store;\r\n   }\r\n\r\n   /**\r\n    * Deletes a given entry store by ID from this world setting array store instance.\r\n    *\r\n    * @param id - ID of entry to delete.\r\n    *\r\n    * @returns Delete operation successful.\r\n    */\r\n   deleteEntry(id: string): boolean\r\n   {\r\n      const result: boolean = this.#deleteStore(id);\r\n\r\n      if (result) { this.updateSubscribers(); }\r\n\r\n      return result;\r\n   }\r\n\r\n   #deleteStore(id: string): boolean\r\n   {\r\n      if (typeof id !== 'string') { throw new TypeError(`'id' is not a string.`); }\r\n\r\n      const storeEntryData: { store: S, unsubscribe: Unsubscriber } | undefined = this.#dataMap.get(id);\r\n      if (storeEntryData)\r\n      {\r\n         storeEntryData.unsubscribe();\r\n\r\n         this.#dataMap.delete(id);\r\n\r\n         const index: number = this.#data.findIndex((entry: S): boolean => entry.id === id);\r\n         if (index >= 0) { this.#data.splice(index, 1); }\r\n\r\n         return true;\r\n      }\r\n\r\n      return false;\r\n   }\r\n\r\n   /**\r\n    * Duplicates an entry store by the given ID.\r\n    *\r\n    * @param {string}   id - UUIDv4 string.\r\n    *\r\n    * @returns {*} Instance of StoreClass.\r\n    */\r\n   duplicateEntry(id: string): S | undefined\r\n   {\r\n      if (typeof id !== 'string') { throw new TypeError(`'id' is not a string.`); }\r\n\r\n      const storeEntryData: { store: S, unsubscribe: Unsubscriber } | undefined = this.#dataMap.get(id);\r\n\r\n      if (storeEntryData)\r\n      {\r\n         const data: ExtractDataType<S> = klona(storeEntryData.store.toJSON());\r\n         data.id = Hashing.uuidv4();\r\n\r\n         // Allow StoreClass to statically perform any specialized duplication.\r\n         this.#StoreClass?.duplicate?.(data, this);\r\n\r\n         return this.createEntry(data);\r\n      }\r\n\r\n      return void 0;\r\n   }\r\n\r\n   /**\r\n    * Find an entry in the backing child store array.\r\n    *\r\n    * @param predicate - A predicate function.\r\n    *\r\n    * @returns Found entry in array or undefined.\r\n    */\r\n   findEntry(predicate: (value: S, index: number, obj: S[]) => unknown): S | undefined\r\n   {\r\n      return this.#data.find(predicate);\r\n   }\r\n\r\n   /**\r\n    * Finds an entry store instance by 'id' / UUIDv4.\r\n    *\r\n    * @param id - A UUIDv4 string.\r\n    *\r\n    * @returns Entry store instance.\r\n    */\r\n   getEntry(id: string): S | undefined\r\n   {\r\n      const storeEntryData: { store: S, unsubscribe: Unsubscriber } | undefined = this.#dataMap.get(id);\r\n      return storeEntryData ? storeEntryData.store : void 0;\r\n   }\r\n\r\n   /**\r\n    * Sets the children store data by 'id', adds new entry store instances, or removes entries that are no longer in the\r\n    * update list.\r\n    *\r\n    * @param updateList -\r\n    */\r\n   set(updateList: ExtractDataType<S>[]): void\r\n   {\r\n      if (!Array.isArray(updateList))\r\n      {\r\n         console.warn(`ArrayObjectStore.set warning: aborting set operation as 'updateList' is not an array.`);\r\n         return;\r\n      }\r\n\r\n      // Create a set of all current entry IDs.\r\n      const removeIDSet = new Set(this.#dataMap.keys());\r\n\r\n      let rebuildIndex: boolean = false;\r\n\r\n      for (let updateIndex: number = 0; updateIndex < updateList.length; updateIndex++)\r\n      {\r\n         const updateData: ExtractDataType<S> = updateList[updateIndex];\r\n\r\n         const id: string = updateData.id;\r\n\r\n         if (typeof id !== 'string') { throw new Error(`'updateData.id' is not a string.`); }\r\n\r\n         const localIndex: number = this.#data.findIndex((entry: S): boolean => entry.id === id);\r\n\r\n         if (localIndex >= 0)\r\n         {\r\n            const localEntry: S = this.#data[localIndex];\r\n\r\n            // Update the entry data.\r\n            localEntry.set(updateData);\r\n\r\n            // Must move to correct position\r\n            if (localIndex !== updateIndex)\r\n            {\r\n               // Remove from current location.\r\n               this.#data.splice(localIndex, 1);\r\n\r\n               if (updateIndex < this.#data.length)\r\n               {\r\n                  // Insert at new location.\r\n                  this.#data.splice(updateIndex, 0, localEntry);\r\n               }\r\n               else\r\n               {\r\n                  // Local data length is less than update data index; rebuild index.\r\n                  rebuildIndex = true;\r\n               }\r\n            }\r\n\r\n            // Delete from removeIDSet as entry is still in local data.\r\n            removeIDSet.delete(id);\r\n         }\r\n         else\r\n         {\r\n            this.#createStore(updateData);\r\n         }\r\n      }\r\n\r\n      if (rebuildIndex)\r\n      {\r\n         // Must invoke unsubscribe for all child stores.\r\n         for (const storeEntryData of this.#dataMap.values()) { storeEntryData.unsubscribe(); }\r\n\r\n         this.#data.length = 0;\r\n         this.#dataMap.clear();\r\n\r\n         for (const updateData of updateList) { this.#createStore(updateData); }\r\n      }\r\n      else\r\n      {\r\n         // Remove entries that are no longer in data.\r\n         for (const id of removeIDSet) { this.#deleteStore(id); }\r\n      }\r\n\r\n      this.updateSubscribers();\r\n   }\r\n\r\n   toJSON(): S[]\r\n   {\r\n      return this.#data;\r\n   }\r\n\r\n// -------------------------------------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * @param handler - Callback function that is invoked on update / changes.\r\n    *\r\n    * @returns Unsubscribe function.\r\n    */\r\n   subscribe(handler: Subscriber<S[]>): Unsubscriber\r\n   {\r\n      this.#subscribers.push(handler); // add handler to the array of subscribers\r\n\r\n      handler(this.#data);                     // call handler with current value\r\n\r\n      // Return unsubscribe function.\r\n      return (): void =>\r\n      {\r\n         const index: number = this.#subscribers.findIndex((sub: Subscriber<S[]>): boolean => sub === handler);\r\n         if (index >= 0) { this.#subscribers.splice(index, 1); }\r\n      };\r\n   }\r\n\r\n   /**\r\n    * Updates subscribers.\r\n    *\r\n    * @param [update] -\r\n    */\r\n   updateSubscribers(update: boolean | ExtractDataType<S> | undefined = void 0): void\r\n   {\r\n      const updateGate: boolean = typeof update === 'boolean' ? update : !this.#manualUpdate;\r\n\r\n      if (updateGate)\r\n      {\r\n         for (let cntr: number = 0; cntr < this.#subscribers.length; cntr++) { this.#subscribers[cntr](this.#data); }\r\n      }\r\n\r\n      // This will update the filtered data and `dataReducer` store and forces an update to subscribers.\r\n      if (this.#dataReducer) { this.#dataReducer.index.update(true); }\r\n   }\r\n}\r\n","import { Hashing }               from '#runtime/util';\r\n\r\nimport { isObject }              from '#runtime/util/object';\r\n\r\nimport { ArrayObjectStore }      from './ArrayObjectStore';\r\n\r\nimport type {\r\n   ArrayObjectStoreParams,\r\n   BaseObjectEntryStore,\r\n   CrudArrayObjectStoreParams,\r\n   CrudDispatch,\r\n   ExtractDataType }             from './types';\r\n\r\n/**\r\n * @typeParam S - Store type.\r\n */\r\nexport class CrudArrayObjectStore<S extends BaseObjectEntryStore<any>> extends ArrayObjectStore<S>\r\n{\r\n   /**\r\n    */\r\n   readonly #crudDispatch: CrudDispatch<ExtractDataType<S>> | undefined;\r\n\r\n   /**\r\n    */\r\n   readonly #extraData: object;\r\n\r\n   /**\r\n    * @param options - CrudArrayObjectStore options.\r\n    *\r\n    * @param [options.crudDispatch] -\r\n    *\r\n    * @param [options.extraData] -\r\n    *\r\n    * @param options.rest - Rest of ArrayObjectStore parameters.\r\n    */\r\n   constructor({ crudDispatch, extraData, ...rest }: CrudArrayObjectStoreParams<S> & ArrayObjectStoreParams<S>)\r\n   {\r\n      // 'manualUpdate' is set to true if 'crudUpdate' is defined, but can be overridden by `...rest`.\r\n      super({\r\n         manualUpdate: typeof crudDispatch === 'function',\r\n         ...rest,\r\n      });\r\n\r\n      if (crudDispatch !== void 0 && typeof crudDispatch !== 'function')\r\n      {\r\n         throw new TypeError(`'crudDispatch' is not a function.`);\r\n      }\r\n\r\n      if (extraData !== void 0 && !isObject(extraData))\r\n      {\r\n         throw new TypeError(`'extraData' is not an object.`);\r\n      }\r\n\r\n      this.#crudDispatch = crudDispatch;\r\n      this.#extraData = extraData ?? {};\r\n   }\r\n\r\n   /**\r\n    * Removes all child store entries.\r\n    */\r\n   override clearEntries(): void\r\n   {\r\n      super.clearEntries();\r\n\r\n      if (this.#crudDispatch)\r\n      {\r\n         this.#crudDispatch({ action: 'clear', ...this.#extraData });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Creates a new store from given data.\r\n    *\r\n    * @param entryData -\r\n    *\r\n    * @returns Associated store with entry data.\r\n    */\r\n   override createEntry(entryData: ExtractDataType<S>): S\r\n   {\r\n      const store: S = super.createEntry(entryData);\r\n\r\n      if (store && this.#crudDispatch)\r\n      {\r\n         this.#crudDispatch({\r\n            action: 'create',\r\n            ...this.#extraData,\r\n            id: store.id,\r\n            data: store.toJSON()\r\n         });\r\n      }\r\n\r\n      return store;\r\n   }\r\n\r\n   /**\r\n    * Deletes a given entry store by ID from this world setting array store instance.\r\n    *\r\n    * @param id - ID of entry to delete.\r\n    *\r\n    * @returns Delete operation successful.\r\n    */\r\n   override deleteEntry(id: string): boolean\r\n   {\r\n      const result: boolean = super.deleteEntry(id);\r\n\r\n      if (result && this.#crudDispatch)\r\n      {\r\n         this.#crudDispatch({ action: 'delete', ...this.#extraData, id });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * Updates subscribers, but provides special handling when a `crudDispatch` function is attached. When `update` is\r\n    * an object with a valid UUIDv4 string as the id property the `crudDispatch` function is invoked along with the\r\n    * data payload.\r\n    *\r\n    * @param [update] - A boolean indicating that subscribers should be notified otherwise\r\n    */\r\n   override updateSubscribers(update: boolean | ExtractDataType<S> | undefined = void 0): void\r\n   {\r\n      if (this.#crudDispatch && isObject(update) && Hashing.isUuidv4(update.id))\r\n      {\r\n         const result: boolean = this.#crudDispatch({\r\n            action: 'update',\r\n            ...this.#extraData,\r\n            id: update.id,\r\n            data: update  // TODO: Consider using klona to clone data.\r\n         });\r\n\r\n         // If the crudDispatch function returns a boolean then invoke 'ArrayObjectStore.updateSubscribers' with it.\r\n         super.updateSubscribers(typeof result === 'boolean' ? result : update);\r\n      }\r\n      else\r\n      {\r\n         super.updateSubscribers(update);\r\n      }\r\n   }\r\n}\r\n"],"names":[],"mappings":"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"}